{"version":3,"sources":["exercises/validationMethods.js","exercises/checkMethods.js","exercises/simple-variable/exBlueprint.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["noSpaceBetweenNumbers","ans","match","noConsecutiveSigns","parsedNormally","nerdamer","err","typicalMethods","onlyNumbers","upToNTerms","n","signs","slice","split","filter","char","includes","length","noNumberMult","compareNumbers","submittedAnswer","answerMath","processedAnswer","replace","nerd","eq","e","exBlueprint","questionText","questionMath","questionLatex","checkMethod","validationMethods","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"8FAAA,uWAIaA,GAJb,YAIqC,SAACC,GAGpC,OAAQA,EAAIC,MAAM,kBAGPC,EAAqB,SAACF,GAGjC,OAAQA,EAAIC,MAAM,qBAGPE,EAAiB,SAACH,GAE7B,IAEE,OADAI,IAASJ,IACF,EACP,MAAOK,GACP,OAAO,IAIEC,EAAiB,CAC5BP,EACAG,EACAC,GAGWI,EAAc,SAACP,GAE1B,OAAQA,EAAIC,MAAM,kBAGPO,EAAa,SAACC,GAKzB,OAAO,SAACT,GACN,IAAMU,EAAQ,CAAC,IAAK,KAKpB,OAJiBV,EACdW,MAAM,GACNC,MAAM,IACNC,QAAO,SAACC,GAAD,OAAUJ,EAAMK,SAASD,MAAOE,OACxBP,IAITQ,EAAe,SAACjB,GAG3B,OAAQA,EAAIC,MAAM,sB,gCCvDpB,gHAIaiB,GAJb,YAI8B,SAACC,EAAiBC,GAC9C,IAAIC,EAAkBF,EAAgBG,QAAQ,KAAM,IAIpD,MAH2B,MAAvBD,EAAgB,KAClBA,EAAkBA,EAAgBV,MAAM,IAEnCU,IAAoBD,IAGhBG,EAAO,SAACJ,EAAiBC,GACpC,IACE,OAAOhB,IAASe,GAAiBK,GAAGJ,GACpC,MAAOK,GACP,OAAO,K,uGCbEC,EAAc,CACzBC,aAAc,0FACdC,aAAc,KACdC,cAAe,KACfT,WAAY,KACZU,Y,MAAaP,KACbQ,kBAAkB,GAAD,mBAAMzB,kBAAN,CAAsBW,mB,0FCL1B,SAASe,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE","file":"static/js/14.77bbcfc9.chunk.js","sourcesContent":["import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nexport const noSpaceBetweenNumbers = (ans) => {\r\n  // answer should not contain numbers separated\r\n  // only by spaces (e.g. '1  1')\r\n  return !ans.match(/[0-9] +[0-9]/);\r\n};\r\n\r\nexport const noConsecutiveSigns = (ans) => {\r\n  // Answer should not contain consecutive signs\r\n  // e.g. '++', '-  +', '* +'\r\n  return !ans.match(/[+\\-*/] *[+\\-*/]/);\r\n};\r\n\r\nexport const parsedNormally = (ans) => {\r\n  // check if nerdamer parses the answer\r\n  try {\r\n    nerdamer(ans);\r\n    return true;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const typicalMethods = [\r\n  noSpaceBetweenNumbers,\r\n  noConsecutiveSigns,\r\n  parsedNormally,\r\n];\r\n\r\nexport const onlyNumbers = (ans) => {\r\n  // answer should contain only numbers and signs\r\n  return !ans.match(/[^0-9+\\-*/^ ]/);\r\n};\r\n\r\nexport const upToNTerms = (n) => {\r\n  // Return function that expects the answer to\r\n  // contain up to n terms\r\n  // i.e. the expression should have less than n\r\n  // + or - signs, except for a possible sign at the start\r\n  return (ans) => {\r\n    const signs = ['+', '-'];\r\n    const numSigns = ans\r\n      .slice(1)\r\n      .split('')\r\n      .filter((char) => signs.includes(char)).length;\r\n    return numSigns < n;\r\n  };\r\n};\r\n\r\nexport const noNumberMult = (ans) => {\r\n  // answer should not contain multiplication\r\n  // between numbers e.g. '2*10'\r\n  return !ans.match(/[0-9] *\\* *[0-9]/);\r\n};\r\n","import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nexport const compareNumbers = (submittedAnswer, answerMath) => {\r\n  let processedAnswer = submittedAnswer.replace(/ /g, '');\r\n  if (processedAnswer[0] === '+') {\r\n    processedAnswer = processedAnswer.slice(1);\r\n  }\r\n  return processedAnswer === answerMath;\r\n};\r\n\r\nexport const nerd = (submittedAnswer, answerMath) => {\r\n  try {\r\n    return nerdamer(submittedAnswer).eq(answerMath);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n","import { typicalMethods, noNumberMult } from '../validationMethods';\r\nimport { nerd } from '../checkMethods';\r\n\r\nexport const exBlueprint = {\r\n  questionText: 'Κάνε τις πράξεις:',\r\n  questionMath: null,\r\n  questionLatex: null,\r\n  answerMath: null,\r\n  checkMethod: nerd,\r\n  validationMethods: [...typicalMethods, noNumberMult],\r\n};\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}