{"version":3,"sources":["exercises/validationMethods.js"],"names":["noSpaceBetweenNumbers","ans","match","noConsecutiveSigns","parsedNormally","nerdamer","err","typicalMethods","onlyNumbers","upToNTerms","n","signs","slice","split","filter","char","includes","length","noNumberMult"],"mappings":"wFAAA,uWAIaA,GAJb,YAIqC,SAACC,GAGpC,OAAQA,EAAIC,MAAM,kBAGPC,EAAqB,SAACF,GAGjC,OAAQA,EAAIC,MAAM,qBAGPE,EAAiB,SAACH,GAE7B,IAEE,OADAI,IAASJ,IACF,EACP,MAAOK,GACP,OAAO,IAIEC,EAAiB,CAC5BP,EACAG,EACAC,GAGWI,EAAc,SAACP,GAE1B,OAAQA,EAAIC,MAAM,kBAGPO,EAAa,SAACC,GAKzB,OAAO,SAACT,GACN,IAAMU,EAAQ,CAAC,IAAK,KAKpB,OAJiBV,EACdW,MAAM,GACNC,MAAM,IACNC,QAAO,SAACC,GAAD,OAAUJ,EAAMK,SAASD,MAAOE,OACxBP,IAITQ,EAAe,SAACjB,GAG3B,OAAQA,EAAIC,MAAM","file":"static/js/17.3b710c0e.chunk.js","sourcesContent":["import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nexport const noSpaceBetweenNumbers = (ans) => {\r\n  // answer should not contain numbers separated\r\n  // only by spaces (e.g. '1  1')\r\n  return !ans.match(/[0-9] +[0-9]/);\r\n};\r\n\r\nexport const noConsecutiveSigns = (ans) => {\r\n  // Answer should not contain consecutive signs\r\n  // e.g. '++', '-  +', '* +'\r\n  return !ans.match(/[+\\-*/] *[+\\-*/]/);\r\n};\r\n\r\nexport const parsedNormally = (ans) => {\r\n  // check if nerdamer parses the answer\r\n  try {\r\n    nerdamer(ans);\r\n    return true;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const typicalMethods = [\r\n  noSpaceBetweenNumbers,\r\n  noConsecutiveSigns,\r\n  parsedNormally,\r\n];\r\n\r\nexport const onlyNumbers = (ans) => {\r\n  // answer should contain only numbers and signs\r\n  return !ans.match(/[^0-9+\\-*/^ ]/);\r\n};\r\n\r\nexport const upToNTerms = (n) => {\r\n  // Return function that expects the answer to\r\n  // contain up to n terms\r\n  // i.e. the expression should have less than n\r\n  // + or - signs, except for a possible sign at the start\r\n  return (ans) => {\r\n    const signs = ['+', '-'];\r\n    const numSigns = ans\r\n      .slice(1)\r\n      .split('')\r\n      .filter((char) => signs.includes(char)).length;\r\n    return numSigns < n;\r\n  };\r\n};\r\n\r\nexport const noNumberMult = (ans) => {\r\n  // answer should not contain multiplication\r\n  // between numbers e.g. '2*10'\r\n  return !ans.match(/[0-9] *\\* *[0-9]/);\r\n};\r\n"],"sourceRoot":""}