{"version":3,"sources":["exercises/validationMethods.js","exercises/checkMethods.js","exercises/fractions/exBlueprint.js","exercises/fractions/AddSubFractions.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","utility/random.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","utility/auxMath.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"names":["noSpaceBetweenNumbers","ans","match","noConsecutiveSigns","parsedNormally","nerdamer","err","typicalMethods","onlyNumbers","upToNTerms","n","signs","slice","split","filter","char","includes","length","noNumberMult","compareNumbers","submittedAnswer","answerMath","processedAnswer","replace","nerd","eq","e","exBlueprint","questionText","questionMath","questionLatex","checkMethod","validationMethods","generateExercise","numA","numB","numC","numD","exercise","randomIntBetween","wrapNegative","coinFlip","String","raw","convertToLaTeX","toString","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","generateRandomIntBetween","num1","num2","random","numsToExclude","lowNum","Math","min","highNum","max","floor","Error","intArr","push","randomNonZeroIntBetween","rollD","chooseRandomArrayElement","chooseSomeRandomArrayElements","elements","Set","size","add","shuffle","array","t","i","m","_defineProperty","obj","key","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","target","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","showSign","num","power","ignoreOne","_taggedTemplateLiteral","strings","freeze"],"mappings":"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","file":"static/js/9.395acd9e.chunk.js","sourcesContent":["import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nexport const noSpaceBetweenNumbers = (ans) => {\r\n  // answer should not contain numbers separated\r\n  // only by spaces (e.g. '1  1')\r\n  return !ans.match(/[0-9] +[0-9]/);\r\n};\r\n\r\nexport const noConsecutiveSigns = (ans) => {\r\n  // Answer should not contain consecutive signs\r\n  // e.g. '++', '-  +', '* +'\r\n  return !ans.match(/[+\\-*/] *[+\\-*/]/);\r\n};\r\n\r\nexport const parsedNormally = (ans) => {\r\n  // check if nerdamer parses the answer\r\n  try {\r\n    nerdamer(ans);\r\n    return true;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const typicalMethods = [\r\n  noSpaceBetweenNumbers,\r\n  noConsecutiveSigns,\r\n  parsedNormally,\r\n];\r\n\r\nexport const onlyNumbers = (ans) => {\r\n  // answer should contain only numbers and signs\r\n  return !ans.match(/[^0-9+\\-*/^ ]/);\r\n};\r\n\r\nexport const upToNTerms = (n) => {\r\n  // Return function that expects the answer to\r\n  // contain up to n terms\r\n  // i.e. the expression should have less than n\r\n  // + or - signs, except for a possible sign at the start\r\n  return (ans) => {\r\n    const signs = ['+', '-'];\r\n    const numSigns = ans\r\n      .slice(1)\r\n      .split('')\r\n      .filter((char) => signs.includes(char)).length;\r\n    return numSigns < n;\r\n  };\r\n};\r\n\r\nexport const noNumberMult = (ans) => {\r\n  // answer should not contain multiplication\r\n  // between numbers e.g. '2*10'\r\n  return !ans.match(/[0-9] *\\* *[0-9]/);\r\n};\r\n","import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nexport const compareNumbers = (submittedAnswer, answerMath) => {\r\n  let processedAnswer = submittedAnswer.replace(/ /g, '');\r\n  if (processedAnswer[0] === '+') {\r\n    processedAnswer = processedAnswer.slice(1);\r\n  }\r\n  return processedAnswer === answerMath;\r\n};\r\n\r\nexport const nerd = (submittedAnswer, answerMath) => {\r\n  try {\r\n    return nerdamer(submittedAnswer).eq(answerMath);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n","import { typicalMethods, onlyNumbers } from '../validationMethods';\r\nimport { compareNumbers } from '../checkMethods';\r\n\r\nexport const exBlueprint = {\r\n  questionText: 'Calculate and simplify:',\r\n  questionMath: null,\r\n  questionLatex: null,\r\n  answerMath: null,\r\n  checkMethod: compareNumbers,\r\n  validationMethods: [...typicalMethods, onlyNumbers],\r\n};\r\n","import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nimport { randomIntBetween, coinFlip } from '../../utility/random';\r\nimport { wrapNegative } from '../../utility/auxMath';\r\n\r\nimport { exBlueprint } from './exBlueprint';\r\n\r\nexport default function generateExercise() {\r\n  const exercise = { ...exBlueprint };\r\n\r\n  const maxInt = 7;\r\n\r\n  // numA / numB +- num / numD\r\n\r\n  let numA, numB, numC, numD;\r\n\r\n  numA = randomIntBetween(1, maxInt);\r\n  numB = randomIntBetween(2, maxInt);\r\n\r\n  numC = randomIntBetween(1, maxInt);\r\n  numD = randomIntBetween(2, maxInt);\r\n\r\n  exercise.questionMath = `${wrapNegative(numA)} / ${wrapNegative(numB)} ${\r\n    coinFlip() ? '+' : '-'\r\n  } ${wrapNegative(numC)} / ${wrapNegative(numD)}`;\r\n\r\n  exercise.questionLatex = String.raw`$ ${nerdamer.convertToLaTeX(\r\n    exercise.questionMath\r\n  )} $`;\r\n\r\n  exercise.answerMath = nerdamer(exercise.questionMath).toString();\r\n\r\n  return exercise;\r\n}\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export function generateRandomIntBetween(num1, num2, numsToExclude = []) {\r\n  // return an integer between num1 and num2,\r\n  // INCLUDING BOTH num1 and num2.\r\n  // numsToExclude is an array of undesired numbers\r\n\r\n  const lowNum = Math.min(num1, num2);\r\n  const highNum = Math.max(num1, num2) + 1;\r\n\r\n  let random;\r\n  while (typeof random === 'undefined' || numsToExclude.includes(random)) {\r\n    random = Math.floor(Math.random() * (highNum - lowNum) + lowNum);\r\n  }\r\n  return random;\r\n}\r\n\r\nexport function randomIntBetween(num1, num2, n = 1, numsToExclude = []) {\r\n  // return an integer between num1 and num2,\r\n  // INCLUDING BOTH num1 and num2.\r\n  // n is the number of integers to generate\r\n  if (n < 1) {\r\n    throw new Error('Generate less than 1 random integer?');\r\n  } else if (n === 1) {\r\n    return generateRandomIntBetween(num1, num2, numsToExclude);\r\n  } else {\r\n    const intArr = [];\r\n    while (intArr.length < n) {\r\n      intArr.push(generateRandomIntBetween(num1, num2, numsToExclude));\r\n    }\r\n    return intArr;\r\n  }\r\n}\r\n\r\nexport function randomNonZeroIntBetween(num1, num2, n = 1) {\r\n  if (num1 === 0 && num2 === 0) {\r\n    throw new Error('Both nums are 0 in randomNonZeroIntBetween');\r\n  }\r\n  return randomIntBetween(num1, num2, n, [0]);\r\n}\r\n\r\nexport function coinFlip() {\r\n  return !!randomIntBetween(0, 1);\r\n}\r\n\r\nexport function rollD(n) {\r\n  return randomIntBetween(1, n);\r\n}\r\n\r\nexport function chooseRandomArrayElement(arr) {\r\n  return arr[randomIntBetween(0, arr.length - 1)];\r\n}\r\n\r\nexport function chooseSomeRandomArrayElements(arr, n) {\r\n  // TODO: improve this method\r\n  if (n > arr.length) {\r\n    throw new Error('Elements  to pick are larger than array length');\r\n  }\r\n  const elements = new Set();\r\n  while (elements.size < n) {\r\n    elements.add(chooseRandomArrayElement(arr));\r\n  }\r\n  return [...elements];\r\n}\r\n\r\nexport function shuffle(array) {\r\n  // from https://bost.ocks.org/mike/shuffle/\r\n  var m = array.length,\r\n    t,\r\n    i;\r\n\r\n  // While there remain elements to shuffle…\r\n  while (m) {\r\n    // Pick a remaining element…\r\n    i = Math.floor(Math.random() * m--);\r\n\r\n    // And swap it with the current element.\r\n    t = array[m];\r\n    array[m] = array[i];\r\n    array[i] = t;\r\n  }\r\n\r\n  return array;\r\n}\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export function showSign(num) {\r\n  return num > 0 ? `+${num}` : `${num}`;\r\n}\r\n\r\nexport function wrapNum(num) {\r\n  return num > 0 ? `(+${num})` : `(${num})`;\r\n}\r\n\r\nexport function wrapNegative(num) {\r\n  return num < 0 ? `(${num})` : num;\r\n}\r\n\r\nexport function wrapWithVarIfNegative(num, varName) {\r\n  return `${num < 0 ? `(${num} ${varName})` : `${num} ${varName}`}`;\r\n}\r\n\r\nexport function power(num) {\r\n  // Currently unsuitable for printing the latex of negative powers\r\n  return num === 1 ? '' : `^${num}`;\r\n}\r\n\r\nexport function ignoreOne(num) {\r\n  if (num === 1) {\r\n    return '';\r\n  } else if (num === -1) {\r\n    return '-';\r\n  } else {\r\n    return num;\r\n  }\r\n}\r\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"sourceRoot":""}