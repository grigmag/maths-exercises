{"version":3,"sources":["exercises/validationMethods.js","exercises/checkMethods.js","exercises/auxData.js","exercises/simple-variable/exBlueprint.js","exercises/simple-variable/divideMonomials.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","utility/random.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","utility/auxMath.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["noSpaceBetweenNumbers","ans","match","noConsecutiveSigns","parsedNormally","nerdamer","err","typicalMethods","onlyNumbers","upToNTerms","n","signs","slice","split","filter","char","includes","length","noNumberMult","compareNumbers","submittedAnswer","answerMath","processedAnswer","replace","nerd","eq","e","varNameList","exBlueprint","questionText","questionMath","questionLatex","checkMethod","validationMethods","generateExercise","exercise","randomNonZeroIntBetween","numA","numB","varNames","chooseSomeRandomArrayElements","monomials","i","varsNum","rollD","vars","monomial","variable","power","randomIntBetween","push","toString","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","generateRandomIntBetween","num1","num2","random","numsToExclude","lowNum","Math","min","highNum","max","floor","Error","intArr","coinFlip","chooseRandomArrayElement","elements","Set","size","add","shuffle","array","t","m","_defineProperty","obj","key","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","target","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","showSign","num","wrapNegative","ignoreOne","_slicedToArray","_arr","_n","_d","_e","undefined","_s","_i","next","done"],"mappings":"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","file":"static/js/7.cbd2cfa7.chunk.js","sourcesContent":["import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nexport const noSpaceBetweenNumbers = (ans) => {\r\n  // answer should not contain numbers separated\r\n  // only by spaces (e.g. '1  1')\r\n  return !ans.match(/[0-9] +[0-9]/);\r\n};\r\n\r\nexport const noConsecutiveSigns = (ans) => {\r\n  // Answer should not contain consecutive signs\r\n  // e.g. '++', '-  +', '* +'\r\n  return !ans.match(/[+\\-*/] *[+\\-*/]/);\r\n};\r\n\r\nexport const parsedNormally = (ans) => {\r\n  // check if nerdamer parses the answer\r\n  try {\r\n    nerdamer(ans);\r\n    return true;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const typicalMethods = [\r\n  noSpaceBetweenNumbers,\r\n  noConsecutiveSigns,\r\n  parsedNormally,\r\n];\r\n\r\nexport const onlyNumbers = (ans) => {\r\n  // answer should contain only numbers and signs\r\n  return !ans.match(/[^0-9+\\-*/^ ]/);\r\n};\r\n\r\nexport const upToNTerms = (n) => {\r\n  // Return function that expects the answer to\r\n  // contain up to n terms\r\n  // i.e. the expression should have less than n\r\n  // + or - signs, except for a possible sign at the start\r\n  return (ans) => {\r\n    const signs = ['+', '-'];\r\n    const numSigns = ans\r\n      .slice(1)\r\n      .split('')\r\n      .filter((char) => signs.includes(char)).length;\r\n    return numSigns < n;\r\n  };\r\n};\r\n\r\nexport const noNumberMult = (ans) => {\r\n  // answer should not contain multiplication\r\n  // between numbers e.g. '2*10'\r\n  return !ans.match(/[0-9] *\\* *[0-9]/);\r\n};\r\n","import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nexport const compareNumbers = (submittedAnswer, answerMath) => {\r\n  let processedAnswer = submittedAnswer.replace(/ /g, '');\r\n  if (processedAnswer[0] === '+') {\r\n    processedAnswer = processedAnswer.slice(1);\r\n  }\r\n  return processedAnswer === answerMath;\r\n};\r\n\r\nexport const nerd = (submittedAnswer, answerMath) => {\r\n  try {\r\n    return nerdamer(submittedAnswer).eq(answerMath);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n","export const varNameList = [\r\n  'x',\r\n  'y',\r\n  'z',\r\n  'b',\r\n  'c',\r\n  'd',\r\n  'k',\r\n  'l',\r\n  'm',\r\n  'n',\r\n  's',\r\n  't',\r\n];\r\n","import { typicalMethods, noNumberMult } from '../validationMethods';\r\nimport { nerd } from '../checkMethods';\r\n\r\nexport const exBlueprint = {\r\n  questionText: 'Calculate:',\r\n  questionMath: null,\r\n  questionLatex: null,\r\n  answerMath: null,\r\n  checkMethod: nerd,\r\n  validationMethods: [...typicalMethods, noNumberMult],\r\n};\r\n","import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nimport {\r\n  randomIntBetween,\r\n  randomNonZeroIntBetween,\r\n  rollD,\r\n  chooseSomeRandomArrayElements,\r\n} from '../../utility/random';\r\n\r\nimport { power } from '../../utility/auxMath';\r\n\r\nimport { upToNTerms } from '../validationMethods';\r\n\r\nimport { varNameList } from '../auxData';\r\nimport { exBlueprint } from './exBlueprint';\r\n\r\nexport default function generateExercise() {\r\n  const exercise = { ...exBlueprint };\r\n\r\n  const maxInt = 5;\r\n  const maxPower = 4;\r\n\r\n  // Generate monomial\r\n  const [numA, numB] = randomNonZeroIntBetween(-maxInt, maxInt, 2);\r\n  const varNames = chooseSomeRandomArrayElements(varNameList, 3);\r\n\r\n  const pow = () => randomIntBetween(1, maxPower);\r\n\r\n  const monomials = [];\r\n\r\n  for (let i = 0; i < 2; ++i) {\r\n    const varsNum = rollD(3);\r\n    const vars = chooseSomeRandomArrayElements(varNames, varsNum);\r\n\r\n    let monomial = '';\r\n    for (const variable of vars) {\r\n      monomial += `${variable}${power(pow())} `;\r\n    }\r\n\r\n    monomials.push(monomial);\r\n  }\r\n\r\n  exercise.questionMath = `(${numA} ${monomials[0]}) / (${numB} ${monomials[1]})`;\r\n  exercise.questionLatex = `$\\\\frac{${numA} ${monomials[0]}}{${numB} ${monomials[1]}}$`;\r\n\r\n  // exercise.questionLatex = String.raw`$ ${nerdamer.convertToLaTeX(\r\n  //   exercise.questionMath\r\n  // )} $`;\r\n\r\n  exercise.answerMath = nerdamer(exercise.questionMath).toString();\r\n\r\n  exercise.validationMethods = [...exercise.validationMethods, upToNTerms(1)];\r\n  return exercise;\r\n}\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export function generateRandomIntBetween(num1, num2, numsToExclude = []) {\r\n  // return an integer between num1 and num2,\r\n  // INCLUDING BOTH num1 and num2.\r\n  // numsToExclude is an array of undesired numbers\r\n\r\n  const lowNum = Math.min(num1, num2);\r\n  const highNum = Math.max(num1, num2) + 1;\r\n\r\n  let random;\r\n  while (typeof random === 'undefined' || numsToExclude.includes(random)) {\r\n    random = Math.floor(Math.random() * (highNum - lowNum) + lowNum);\r\n  }\r\n  return random;\r\n}\r\n\r\nexport function randomIntBetween(num1, num2, n = 1, numsToExclude = []) {\r\n  // return an integer between num1 and num2,\r\n  // INCLUDING BOTH num1 and num2.\r\n  // n is the number of integers to generate\r\n  if (n < 1) {\r\n    throw new Error('Generate less than 1 random integer?');\r\n  } else if (n === 1) {\r\n    return generateRandomIntBetween(num1, num2, numsToExclude);\r\n  } else {\r\n    const intArr = [];\r\n    while (intArr.length < n) {\r\n      intArr.push(generateRandomIntBetween(num1, num2, numsToExclude));\r\n    }\r\n    return intArr;\r\n  }\r\n}\r\n\r\nexport function randomNonZeroIntBetween(num1, num2, n = 1) {\r\n  if (num1 === 0 && num2 === 0) {\r\n    throw new Error('Both nums are 0 in randomNonZeroIntBetween');\r\n  }\r\n  return randomIntBetween(num1, num2, n, [0]);\r\n}\r\n\r\nexport function coinFlip() {\r\n  return !!randomIntBetween(0, 1);\r\n}\r\n\r\nexport function rollD(n) {\r\n  return randomIntBetween(1, n);\r\n}\r\n\r\nexport function chooseRandomArrayElement(arr) {\r\n  return arr[randomIntBetween(0, arr.length - 1)];\r\n}\r\n\r\nexport function chooseSomeRandomArrayElements(arr, n) {\r\n  // TODO: improve this method\r\n  if (n > arr.length) {\r\n    throw new Error('Elements  to pick are larger than array length');\r\n  }\r\n  const elements = new Set();\r\n  while (elements.size < n) {\r\n    elements.add(chooseRandomArrayElement(arr));\r\n  }\r\n  return [...elements];\r\n}\r\n\r\nexport function shuffle(array) {\r\n  // from https://bost.ocks.org/mike/shuffle/\r\n  var m = array.length,\r\n    t,\r\n    i;\r\n\r\n  // While there remain elements to shuffle…\r\n  while (m) {\r\n    // Pick a remaining element…\r\n    i = Math.floor(Math.random() * m--);\r\n\r\n    // And swap it with the current element.\r\n    t = array[m];\r\n    array[m] = array[i];\r\n    array[i] = t;\r\n  }\r\n\r\n  return array;\r\n}\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export function showSign(num) {\r\n  return num > 0 ? `+${num}` : `${num}`;\r\n}\r\n\r\nexport function wrapNum(num) {\r\n  return num > 0 ? `(+${num})` : `(${num})`;\r\n}\r\n\r\nexport function wrapNegative(num) {\r\n  return num < 0 ? `(${num})` : num;\r\n}\r\n\r\nexport function wrapWithVarIfNegative(num, varName) {\r\n  return `${num < 0 ? `(${num} ${varName})` : `${num} ${varName}`}`;\r\n}\r\n\r\nexport function power(num) {\r\n  // Currently unsuitable for printing the latex of negative powers\r\n  return num === 1 ? '' : `^${num}`;\r\n}\r\n\r\nexport function ignoreOne(num) {\r\n  if (num === 1) {\r\n    return '';\r\n  } else if (num === -1) {\r\n    return '-';\r\n  } else {\r\n    return num;\r\n  }\r\n}\r\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}