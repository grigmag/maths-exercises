{"version":3,"sources":["../node_modules/nerdamer/nerdamer.core.js","../node_modules/nerdamer/Algebra.js","../node_modules/nerdamer/Solve.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/nerdamer/Calculus.js"],"names":["nerdamer","imports","_","Parser","bigInt","bigDec","set","precision","Groups","PRIMES","CUSTOM_OPERATORS","Settings","init_primes","exclude","suppress_errors","PARSE2NUMBER","SAFE","IMAGINARY","FUNCTION_MODULES","Math","ALLOW_CHARS","USE_MULTICHARACTER_VARS","POWER_OPERATOR","VALIDATION_REGEX","ALIASES","POSITIVE_MULTIPLIERS","CACHE","SILENCE_WARNINGS","PRECISION","VECTOR","PARENTHESIS","SQRT","ABS","FACTORIAL","DOUBLEFACTORIAL","LONG_PI","LONG_E","PI","E","LOG","LOG10","LOG10_LATEX","MAX_EXP","roots","i","j","nthpow","pow","N","P","S","EX","FN","PL","CB","CP","CONST_HASH","EXPRESSIONS","VARS","RESERVED","WARNINGS","err","msg","ErrorObj","Error","customError","name","message","this","undefined","error","stack","prototype","Object","create","isReserved","value","indexOf","allSame","arr","last","l","length","equals","warn","push","SHOW_WARNINGS","console","validateName","typ","test","InvalidVariableNameError","scientificToDecimal","num","nsign","sign","abs","parts","String","toLowerCase","split","e","pop","coeff_array","slice","zero","Array","join","dec","isPrime","n","q","floor","sqrt","isNumber","isFraction","isSymbol","multiplier","toDecimal","obj","Symbol","isExpression","Expression","variables","poly","vars","c","add","isNaN","group","prevgroup","previousGroup","power","x","symbols","firstObject","args","sort","isVector","Vector","isMatrix","Matrix","isSet","Set","isNumericSymbol","symbol","isArray","isInt","toString","isNegative","lessThan","stringify","o","inBrackets","str","format","call","arguments","shift","new_str","replace","match","index","arg","keys","key","both","setFunction","params_array","body","parse","functions","mapped_function","params","arrayMin","min","apply","decompose_fn","fn","wrt","as_obj","ax","a","b","t","expand","clone","stripVar","subtract","divide","nround","s","Number","MAX_VALUE","round","each","hasOwnProperty","even","evenFraction","arrayUnique","item","removeDuplicates","condition","conditionType","seen","temp","reserveNames","remove","indexOrKey","result","splice","block","setting","f","opt","current_setting","retval","arguments2Array","evaluate","generatePrimes","upto","allNumbers","allConstants","isPi","isE","isConstant","DivisionByZero","ParseError","UndefinedError","MaximumIterationsReached","NerdamerTypeError","ParityError","OperatorError","OutOfRangeError","DimensionError","ValueLimitExceededError","NerdamerValueError","SolveError","exceptions","Big","cos","sin","Math2","csc","sec","cot","tan","acsc","asin","asec","acos","acot","atan","erf","exp","diff","h","median","values","half","fromContinued","contd","fractions","whole","continuedFraction","w","absn","ni","done","EPSILON","idx","bigpow","p","Frac","isInteger","den","nthroot","gamma","z","C","g","bigfactorial","times","bigLog","quick","k","r","invert","multiply","factorial","is_int","NaN","dfactorial","GCD","map","QGCD","gcd","negate","LCM","factor","ifactors","ifactor","factors","updateHash","sfactor","prime","lt","rho","xf","cz","mod","minus","sm","boxfactor","max","d","safety","fib","y","integer_part","simpson","step","get_value","side","v","dx","xi","num_integrate","tol","maxdepth","state","maxDepthCount","nanEncountered","fa","fm","fb","adsimp","V0","depth","f1","f2","sl","sr","s2","m","V1","V2","integrate","Ci","sum","n2","log","Si","Ei","Infinity","Shi","Chi","cosh","Li","gamma_incomplete","rect","sinc","tri","A","dk","dk0","d0","xk","powb","dk_dec","gte","xn","ld","same_delta","delta","decimal","text","option","useGroup","decp","asHash","wrapCondition","asDecimal","valueOf","frac","exec","negative","quotient","digits","passed","numer","denom","divmod","remainder","operator","om","collectSymbols","txt","pg","pwg","fname","isComposite","charAt","cv","parens","elements","Scientific","startsWith","substr","isScientific","fromScientific","convert","simple","Fraction","isInfinity","imaginary","bin","preprocessors","names","actions","Slice","upper","lower","start","end","Collection","Token","node","node_type","column","type","OPERATOR","operators","FUNCTION","precedence","MAX_PRECEDENCE","leftAssoc","append","getItems","pretty_print","collection","is_prefix","VARIABLE_OR_LITERAL","UNIT","KEYWORD","classes","complex","prec","re","im","sinh","removeDen","sq","fromArray","tanh","sech","csch","coth","acosh","asinh","atanh","asech","acsch","acoth","realpart","imagpart","hyp","atan2","greaterThan","symfunction","trig","isImaginary","getQuadrant","isLinear","trigh","infinity","units","action","prefix","postfix","operation","overloaded","overloadAction","overloadLeftAssoc","vectorFn","brackets","id","is_open","is_close","maps_to","SYMBOLIC_MIN_MAX","symMinMax","_symbol","cf","sigfigs","scientific","pfactor","identity","mat","determinant","cols","rows","transpose","vec1","vec2","dot","cross","vector","tolerance","matrix","M","col_index","col","l2","conjugate","theta","toPolarFormArray","original","getDenom","getNum","getval","aval","bval","set1","set2","union","contains","intersection","difference","intersects","is_subset","override","which","with_what","restore","what","extend","force_call","fn_name","callfunction","allowed_args","fn_settings","num_allowed_args","is_array","min_args","max_args","num_args","error_msg","numericArgs","USE_BIG","fmodules","fmodule","findFunction","bigConvert","operator_filter_regex","ostr","filter","RegExp","setOperator","postif","getOperator","aliasOperator","getOperators","getBrackets","Node","token","left","right","initConstants","CONSTANTS","peekers","pre_operator","post_operator","pre_function","post_function","callPeekers","tokenize","trim","regex","L","lpos","tokens","scopes","target","open_brackets","has_space","addScope","scope_type","new_scope","goUp","get_operator_str","start_at","substring","chunkify","operator_str","_operators","ch","add_token","at","add_function","set_last_position","position","last_token_is_numeric","bracket","pair","prev","nxt","is_operator","toRPN","output","prefixes","collapse","destination","next","previous","next_is_operator","last_on_stack","parseRPN","rpn","substitutions","pi","Q","is_comma","fromSet","ans","parent","fn_args","ret","getter","il","element","subbed","isUnit","toHTML","indent","tab","repeat","html","tree","location","group1","group2","first","before","g1","g2","prepare_expression","toObject","expression_string","objectify","isConversion","chunkAtCommas","chunks","rem_brackets","ms","distributeMultiplier","V","symbol1","symbol2","is_negative","img","setPower","qa","tw","nn","unwrapPARENS","toLinear","rem","toUnitMultiplier","isOne","asbig","numVal","base","log_sym","log_base","img_part","sIsConstant","toExponential","isFinite","pn","sym","hascomposites","sp","sub","composites","non_composites","isDenom","prod","finalResult","testSQRT","absEquals","testPow","fct","primeFactors","toTeX","expression_or_obj","TeX","cdot","nobj","LaTeX","braces","expr","argSplit","latex","clean","new_num","new_den","addPreprocessor","order","shift_cells","PreprocessorError","getPreprocessors","removePreprocessor","subs","aIsSymbol","bIsSymbol","unit","Unit","aneg","bneg","inf","ap","bp","h1","h2","powEQ","v1","v2","aIsComposite","bIsComposite","PN","PNEQ","valEQ","attach","insert","shell","canIterate","bothPL","bIsMatrix","eachElement","row","dimensions","toFixed","bnum","bden","a_pow","ONN","u","gt","_a","_b","distributeExponent","combine","bm","p1","p2","isSymbolP1","isSymbolP2","toEX","logV","n1","ndiv","ddiv","ps","isMatrixB","isMatrixA","isVectorA","isVectorB","aIsZero","bIsZero","nre","nim","bIsConstant","aIsConstant","bIsInt","multiplyPower","sgn","aa","a1","b1","c1","neg_num","nr","tn","evenr","evenp","evennp","_result","isEX","pt","IGNORE_E","comma","percent","assign","function_assign","bool2Symbol","eq","lte","log10","LOG10E","trunc","ceil","getExpression","expression_number","asType","expression","text_","first_arg","buildFunction","Build","build","isPolynomial","isPoly","for_symbol","otype","callback","numerator","denominator","hasFunction","containsFunction","variable","coeff","exponent","removeLeadingZeroes","removeTrailingZeroes","dot_location","zeroes","leadingZeroes","copy","rounded","next_two","ed","is_neg","isFrac","m_dc","simplify","neg","narr","unshift","qcompare","isnegative","lcm","div","unwrapSQRT","all","isSimple","powSimp","powers","mfactors","out_","in_","xt","multivariate","exclude_x","toArray","hasFunc","fn_group","same_pow","a_is_unit_multiplier","find","needle","nargs","isMonomial","isSQRT","check_all","check_symbols","retainSign","isSymbolic","isInverse","properties","keepSign","deep","power_only","is_one","cp","isImgSymbol","keyForGroup","existing","hash","contents","is_parens","sort_fn","expand_symbol","collected","concat","isCombination","opts","qc","quickConversion","fullConversion","parseInt","d1","d2","parser","keep","space","LaTeXArray","rowTeX","m_array","v_array","formatFrac","p_array","greek","alpha","beta","epsilon","zeta","eta","iota","kappa","lambda","mu","nu","omnikron","sigma","tau","upsilon","phi","chi","psi","omega","Gamma","Delta","Epsilon","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega","arccos","ker","limsup","arcsin","deg","lg","ln","Pr","sup","arctan","det","hom","lim","LN","dim","liminf","inverted","t_varray","input","den_map","num_map","num_c","den_c","setBrackets","container","counter","laTex","combine_power","isBracketed","formatP","tp","merge","mn","md","vn","vd","top","bottom","glue","is_pow","square","brace","angle","filterTokens","filtered","raw_tokens","parse_next","get","items","lw","rl","el","arrayPrefill","val","custom","modulus","eql","toUnitVector","angleFrom","mod1","mod2","product","theta_val","isParallelTo","isAntiparallelTo","isPerpendicularTo","B","magnitude","tex","F","zeroMatrix","raw_values","raw","nc","isSquare","toRightTriangular","isSingular","augment","np","els","divisor","new_element","ki","imatrix","kp","inverse_elements","nel","nj","canMultiplyFromLeft","sameSize","MM","kj","toVector","newline","to_decimal","row_tex","_union","_intersection","dependencies","_rename","reformat","deps","getProperName","continued_fraction","compileDependencies","dep_string","replacements","components","getArgsDeps","arg_array","supplements","f_array","ftext","xports","ftext_complex","cc","ft","ftext_function","bn","alias","Function","LOG_FNS","Utils","allNumeric","arrayAddSlices","slices","arrayClone","new_array","arrayMax","arraySum","clearU","indx","comboSort","combined","na","nb","compare","sym1","sym2","comparison","scope","random","convertToVector","customType","fillHoles","getCoeffs","coeffs","term","getU","importFunctions","isVariableSymbol","nroots","_roots","root","range","sameSign","separate","stringReplace","from","to","with_str","groups","PARSER","libExports","fndec","multi_options","convertToLaTeX","convertFromLaTeX","version","add_on","getWarnings","setConstant","constant","getConstant","getCore","getEquation","reserved","asArray","clear","equation_number","keep_EXPRESSIONS_fixed","flush","expressions","asObject","asLaTeX","register","core","parent_obj","visible","numargs","validVarName","varname","supported","numEquations","numExpressions","setVar","getVar","clearVars","load","loader","getVars","api","linker","replaceFunction","new_num_args","withOperator","htmlTree","addPeeker","removePeeker","BASE","MAX_INT","MAX_INT_ARR","smallToArray","LOG_MAX_INT","Integer","radix","parseValue","parseBase","BigInteger","isSmall","SmallInteger","isPrecise","arrayToSmall","compareAbs","createArray","truncate","l_a","l_b","carry","addAny","addSmall","a_l","b_l","borrow","subtractSmall","multiplyLong","a_i","multiplySmall","shiftLeft","multiplySmallAndArray","divModSmall","divModAny","self","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","reverse","divMod2","qSign","mSign","isBasicPrime","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","modPow","plus","subtractAny","small","l1","multiplyKaratsuba","ac","bd","abcd","_multiplyBySmall","over","isZero","isPositive","isOdd","compareTo","notEquals","neq","greater","greaterOrEquals","geq","lesserOrEquals","leq","strict","bits","bitLength","logN","isProbablePrime","iterations","randBetween","modInv","lastT","lastR","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","toJSNumber","shiftRight","remQuo","and","or","xor","roughLOB","integerLogarithm","tmp","absBase","charCodeAt","charCode","parseBaseFromArray","digit","toBase","out","toBaseString","parseStringValue","decimalPlace","parseNumberValue","toJSON","minusOne","isInstance","low","restricted","module","exports","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","O","D","absoluteValue","constructor","comparedTo","cmp","cosine","sd","W","J","cubeRoot","cbrt","Z","decimalPlaces","dp","dividedBy","dividedToIntegerBy","divToInt","greaterThanOrEqualTo","hyperbolicCosine","hyperbolicSine","hyperbolicTangent","inverseCosine","isNeg","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","inverseSine","inverseTangent","isPos","lessThanOrEqualTo","logarithm","U","naturalExponential","H","naturalLogarithm","negated","sine","squareRoot","tangent","mul","toBinary","toDecimalPlaces","toDP","R","toFraction","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","T","LN10","toPrecision","toSignificantDigits","toSD","truncated","G","I","search","$","K","X","Y","en","rn","sn","on","un","cn","defaults","getRandomValues","randomBytes","hn","an","dn","gn","wn","Nn","En","Mn","yn","qn","Uint32Array","On","Fn","An","Dn","Zn","Pn","Rn","Ln","Un","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","isDecimal","hypot","log2","default","Decimal","require","math","Polynomial","fill","Factors","MVTerm","terms","image","fit","c2","equalsZero","modP","up_one","dividend","mp","x1","x2","lc","monic","gcf","toPolynomial","ca","fnz","parr","quad","incl_img","dsc","squareFree","equalsNumber","toSymbol","with_order","tBase","nterm","updateCount","altVar","sameVars","groupTerms","egrouped","grouped","collectFactors","getNumberSymbolics","fo","preAdd","pFactor","is_constant","factored","count","getRevMap","rev_map","len","mapped","generateImage","getImg","mvterm","new_mvterm","toMapObj","filledArray","clss","arrSum","haveIntersection","some","subFunctions","tvar","getFunctionsSubs","__","Algebra","init","proots","known_roots","get_roots","rarr","calcroots","lowest_pow","lowest_symbol","minpower","last_power","zeroi","degreePar","Degree","zeror","QuadSD_ak1","NN","iPar","calcSC_ak1","DBL_EPSILON","qk","sdPar","dumFlag","a3","a7","nextK_ak1","tFlag","qp","newest_ak1","a4","a5","b2","c3","c4","Quad_ak1","si","lr","li","QuadIT_ak1","uu","vv","calcPar","ee","omp","relstp","ui","vi","zm","qPar","triedFlag","NZ","szr","szi","lzr","lzi","RealIT_ak1","kv","pv","nm1","Fxshfr_ak1","MDP1","L2","betas","betav","oss","ots","otv","ovv","ss","ts","tss","tv","tvv","fflag","spass","stry","vpass","vtry","svk","iFlag","degPar","bnd","df","ff","moduli_max","moduli_min","sc","xm","bb","xxx","jj","NM1","zerok","LB2","LN2","Fxshfr_Par","LO","MIN_VALUE","cosr","sinr","xx","yy","rpSolve","real","froot","Calculus","newtonraph","sumProd","polyPowers","for_variable","Factor","mix","include_negatives","ll","common","exit","n_terms","n_zeroes","_factor","_factored","quadFactor","degree","root1","root2","untouched","den_array","num_array","dfact","nfact","Simplify","strip","unstrip","multiVar","all_S","all_unit","coeff_factors","coeffFactor","power_factors","powerFactor","mfactor","t_factors","trialAndError","tf_symbol","t_factor","reduce","sqfr","cnst","cfactors","candidate","ltfactors","nfactors","lc_is_neg","cnst_is_neg","factor_found","mSqfrFactor","can_divide","is_factor","sqdiff","remove_square","separated","obj_array","constants","factors2","sorted","maxes","new_factor","divided","neg_numeric_factor","allLinear","status","sg","appeared","every","aggregate","gcd_","gcd_m","gcd_v","gcd_p","vars_a","vars_b","multipliers","curr","denom_args","size","mask","results","total","symbol1_has_func","symbol2_has_func","parse_funcs","quot","reconvert","get_unique_max","any","t_map","init_sort","is_larger","s1","get_det","lookat","umax","is_equal","max1","max2","idx1","idx2","item1","item2","cterm","lead_var","sf","blv","alv","checked","tt","try_better_lead_var","fdt","fnt","nd","dividend_larger","cur","line","dy","PartFrac","createTemplate","denom_factors","factors_vec","degrees","efactor","partfrac","as_array","ofactors","nterms","dterms","ks","template","tfactors","partials","sqComplete","br","sqrt_a","stop","complexSimp","bc","ad","cd","r1","r2","i1","i2","trigSimp","sym_array","tr","fnTransform","fracSimp","ratSimp","simplified","Classes","useAlgebraDiv","divideFn","calls","useParserDiv","_A","_C","explode","integration","decompose_arg","Equation","lhs","rhs","LHS","RHS","SOLVE_RADIUS","ROOTS_PER_SIDE","make_pi_conversions","STEP_SIZE","MAX_NEWTON_ITERATIONS","MAX_NON_LINEAR_TRIES","NON_LINEAR_JUMP_AT","NON_LINEAR_JUMP_SIZE","NON_LINEAR_START","NEWTON_SLICES","NEWTON_EPSILON","SOLUTION_PROXIMITY","FILTER_SOLUTIONS","MAX_SOLVE_DEPTH","hasTrig","hasNegativeTerms","toLHS","eqn","removeDenom","_t","newRHS","solveFor","solve","jacobian","eqns","getSystemVariables","forEach","cMatrix","setEq","checkAll","Solve","solutions","solution","es","solveNonLinearSystem","tries","max_tries","halfway","iters","xn1","norm","lnorm","jump_at","jump","found","create_subs","max_iter","f_eqns","systemSolutions","expand_result","SOLUTIONS_AS_OBJECT","solveSystem","var_array","tparts","discriminant","cubic","d_o","c_o","b_o","a_o","Ct","quartic","D0","D1","divideAndConquer","solve_for","sols","csolve","pf","getPoints","points","last_sign","rside","lside","test_side","num_roots","hits","Newton","point","fp","maxiter","iter","x0","fx0","rewrite","sqrts","sqrtSolve","add_to_result","has_trig","r_is_symbol","sol","r_str","numvars","cfact","fractionals","correct_denom","is_sqrt","min_p","corrected","inverseFunctionSolve","fkeys","was_calculated","points1","points2","points3","rw","_arrayLikeToArray","arr2","_toConsumableArray","iterator","minLen","TypeError","SIN","COS","TAN","SEC","CSC","COT","SINH","COSH","NoIntegralFound","hasIntegral","in_trig","in_inverse_trig","toCommonDenominator","in_htrig","all_functions","cosAsinBtransform","cosAsinBtranform","cosAsinAtransform","cosAsinAtranform","sinAsinBtransform","trigTransform","integration_depth","modifier","nth","derive","polydiff","product_rule","qdiff","x_","y_","altVal","u_substitution","try_combo","do_fn_sub","poly_integrate","dc","xp","dc2","new_val","by_parts","integrated","partial_fraction","partial_fractions","get_udv","setSymbol","dv","trig_sub","du","integral","udv","vdu","uv","integral_vdu","vdu_s","is_cyclic","original_symbol","dt","decomp","b_is_positive","unwrapAbs","L1","sqrt_ax","sqa","sqb","aob","bsqi","was_factored","fx","u_du","ag","decomposed","a_","b_","rd","rd2","parse_str","cfsymbol","unwrapped","fn1","fn2","arg1","arg2","new_sym","p1_even","p2_even","double_angle","trans","transformed","sym1_is_linear","pd","pc","f_is_linear","dummy","bksub","ASIN","u_transform","expanded","U2","cosn","sym2_clone","sa","sb","nq","syma","symb","intg","defint","Limit","limit","interval","diverges","lim1","lim2","indeterminate","t_symbol","rewriteToLog","getSubbed","isInterval","isConvergent","_num","_den","symbol_","lim_base","lim_pow","evaluates","trial","s_arg","divergent","_lim","Fresnel"],"mappings":"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","file":"static/js/0.4963f4b3.chunk.js","sourcesContent":["/*\n * Author : Martin Donk\n * Website : http://www.nerdamer.com\n * Email : martin.r.donk@gmail.com\n * Source : https://github.com/jiggzson/nerdamer\n */\n\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\n//externals ====================================================================\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\n\nvar nerdamer = (function (imports) {\n    \"use strict\";\n\n//version ====================================================================== \n    var version = '1.1.3';\n\n//inits ========================================================================\n    var _ = new Parser(); //nerdamer's parser\n\n    //import bigInt\n    var bigInt = imports.bigInt;\n    var bigDec = imports.bigDec;\n    //set the precision to js precision\n    bigDec.set({\n        precision: 250\n    });\n\n    var Groups = {};\n\n    //container of pregenerated primes\n    var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113\n                , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\n        257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\n        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\n        563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\n        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\n        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,\n        1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,\n        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,\n        1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\n        1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,\n        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\n        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\n\n//Settings ===================================================================== \n    var CUSTOM_OPERATORS = {};\n\n    var Settings = {\n        //the max number up to which to cache primes. Making this too high causes performance issues\n        init_primes: 1000,\n\n        exclude: [],\n        //If you don't care about division by zero for example then this can be set to true. \n        //Has some nasty side effects so choose carefully.\n        suppress_errors: false,\n        //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\n        //cos(9) for convenience but parse to number will always try to return a number if set to true. \n        PARSE2NUMBER: false,\n        //this flag forces the a clone to be returned when add, subtract, etc... is called\n        SAFE: false,\n        //the symbol to use for imaginary symbols\n        IMAGINARY: 'i',\n        //the modules used to link numeric function holders\n        FUNCTION_MODULES: [Math],\n        //Allow certain characters\n        ALLOW_CHARS: ['π'],\n        //Allow nerdamer to convert multi-character variables\n        USE_MULTICHARACTER_VARS: true,\n        //Allow changing of power operator\n        POWER_OPERATOR: '^',\n        //The variable validation regex\n        //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\n        VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\n        //Aliases\n        ALIASES: {\n            'π': 'pi',\n            '∞': 'Infinity'\n        },\n        POSITIVE_MULTIPLIERS: false,\n        //Cached items\n        CACHE: {},\n        //Print out warnings or not\n        SILENCE_WARNINGS: false,\n        //Precision\n        PRECISION: 80,\n        //function mappings\n        VECTOR: 'vector',\n        PARENTHESIS: 'parens',\n        SQRT: 'sqrt',\n        ABS: 'abs',\n        FACTORIAL: 'factorial',\n        DOUBLEFACTORIAL: 'dfactorial',\n        //reference pi and e\n        LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +\n                '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\n        LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +\n                '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\n        PI: Math.PI,\n        E: Math.E,\n        LOG: 'log', \n        LOG10: 'log10',\n        LOG10_LATEX: 'log_{10}',\n        MAX_EXP: 200000\n    };\n\n    (function () {\n        Settings.CACHE.roots = {};\n        var x = 40,\n                y = 40;\n        for (var i = 2; i <= x; i++) {\n            for (var j = 2; j <= y; j++) {\n                var nthpow = bigInt(i).pow(j);\n                Settings.CACHE.roots[nthpow + '-' + j] = i;\n            }\n        }\n    })();\n    \n    //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\n    //The groups that help with organizing during parsing. Note that for FN is still a function even \n    //when it's raised to a symbol, which typically results in an EX\n    var N = Groups.N = 1, // A number\n            P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5). \n            S = Groups.S = 3, // A single variable e.g. x. \n            EX = Groups.EX = 4, // An exponential\n            FN = Groups.FN = 5, // A function\n            PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2\n            CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y\n            CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\n\n    var CONST_HASH = Settings.CONST_HASH = '#';\n\n    var PARENTHESIS = Settings.PARENTHESIS;\n\n    var SQRT = Settings.SQRT;\n\n    var ABS = Settings.ABS;\n\n    var FACTORIAL = Settings.FACTORIAL;\n\n    var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\n\n    //the storage container \"memory\" for parsed expressions\n    var EXPRESSIONS = [];\n\n    //variables\n    var VARS = {};\n\n    //the container used to store all the reserved functions\n    var RESERVED = [];\n\n    var WARNINGS = [];\n\n    /**\n     * Use this when errors are suppressible\n     * @param {String} msg\n     * @param {object} ErrorObj \n     */\n    var err = function (msg, ErrorObj) {\n        if (!Settings.suppress_errors) {\n            if (ErrorObj)\n                throw new ErrorObj(msg);\n            else\n                throw new Error(msg);\n        }\n    };\n\n//Utils ======================================================================== \n    var customError = function (name) {\n        var E = function (message) {\n            this.name = name;\n            this.message = message !== undefined ? message : '';\n            var error = new Error(this.message);\n            error.name = this.name;\n            this.stack = error.stack;\n        }; //create an empty error\n        E.prototype = Object.create(Error.prototype);\n        return E;\n    };\n\n    /**\n     * Checks to see if value is one of nerdamer's reserved names\n     * @param {String} value\n     * @return boolean\n     */\n    var isReserved = function (value) {\n        return RESERVED.indexOf(value) !== -1;\n    };\n\n    /**\n     * Checks to see that all symbols in array are the same\n     * @param {Symbol[]} arr\n     * @returns {bool}\n     */\n    var allSame = function (arr) {\n        var last = arr[0];\n        for (var i = 1, l = arr.length; i < l; i++)\n            if (!arr[i].equals(last))\n                return false;\n        return true;\n    };\n\n    /**\n     * Used to pass warnings or low severity errors about the library\n     * @param msg\n     */\n    var warn = function (msg) {\n        WARNINGS.push(msg);\n        if (Settings.SHOW_WARNINGS && console && console.warn) {\n            console.warn(msg);\n        }\n    };\n\n    /**\n     * Enforces rule: \"must start with a letter or underscore and \n     * can have any number of underscores, letters, and numbers thereafter.\"\n     * @param name The name of the symbol being checked\n     * @param {String} typ - The type of symbols that's being validated\n     * @throws {Exception}  - Throws an exception on fail\n     */\n    var validateName = function (name, typ) {\n        typ = typ || 'variable';\n        if (Settings.ALLOW_CHARS.indexOf(name) !== -1)\n            return;\n        var regex = Settings.VALIDATION_REGEX;\n        if (!(regex.test(name))) {\n            throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\n        }\n    };\n\n    /**\n     * Convert number from scientific format to decimal format\n     * @param {Number} num\n     */\n    var scientificToDecimal = function (num) {\n        var nsign = Math.sign(num);\n        //remove the sign\n        num = Math.abs(num);\n        //if the number is in scientific notation remove it\n        if (/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\n            var zero = '0',\n                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent\n                    e = parts.pop(), //store the exponential part\n                    l = Math.abs(e), //get the number of zeros\n                    sign = e / l,\n                    coeff_array = parts[0].split('.');\n            if (sign === -1) {\n                l = l - coeff_array[0].length;\n                if (l < 0) {\n                  num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\n                } \n                else {\n                  num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\n                }\n            } \n            else {\n                var dec = coeff_array[1];\n                if (dec)\n                    l = l - dec.length;\n                if (l < 0) {\n                  num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\n                } else {\n                  num = coeff_array.join('') + new Array(l + 1).join(zero);\n                }\n            }\n        }\n\n        return nsign < 0 ? '-'+num : num;\n    };\n    /**\n     * Checks if number is a prime number\n     * @param {Number} n - the number to be checked\n     */\n    var isPrime = function (n) {\n        var q = Math.floor(Math.sqrt(n));\n        for (var i = 2; i <= q; i++) {\n            if (n % i === 0)\n                return false;\n        }\n        return true;\n    };\n    \n    /**\n     * Checks if n is a number\n     * @param {any} n \n     */\n    var isNumber = function(n) {\n        return /^\\d+\\.?\\d*$/.test(n);\n    };\n    \n    /**\n     * Checks to see if an array contains only numeric values\n     * @param {Array} arr \n     */\n    var allNumeric = function(arr) {\n        for(var i=0; i<arr.length; i++)\n            if(!isNumber(arr[i]))\n                return false;\n        return true;\n    };\n    /**\n     * Checks to see if a number or Symbol is a fraction\n     * @param {Number|Symbol} num\n     * @returns {boolean}\n     */\n    var isFraction = function (num) {\n        if (isSymbol(num))\n            return isFraction(num.multiplier.toDecimal());\n        return (num % 1 !== 0);\n    };\n\n    /**\n     * Checks to see if the object provided is a Symbol\n     * @param {Object} obj\n     */\n    var isSymbol = function (obj) {\n        return (obj instanceof Symbol);\n    };\n\n    /**\n     * Checks to see if the object provided is an Expression\n     * @param {Object} obj\n     */\n    var isExpression = function (obj) {\n        return (obj instanceof Expression);\n    };\n\n    /**\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\n     * names are then returned in alphabetical order.\n     * @param {Symbol} obj\n     * @param {Boolean} poly \n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated \n     * automatically. In the future this will be a Collector object.\n     * @returns {String[]} - An array containing variable names\n     */\n    var variables = function (obj, poly, vars) {\n        vars = vars || {\n            c: [],\n            add: function (value) {\n                if (this.c.indexOf(value) === -1 && isNaN(value))\n                    this.c.push(value);\n            }\n        };\n\n        if (isSymbol(obj)) {\n            var group = obj.group,\n                    prevgroup = obj.previousGroup;\n            if (group === EX)\n                variables(obj.power, poly, vars);\n\n            if (group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\n                for (var x in obj.symbols) {\n                    variables(obj.symbols[x], poly, vars);\n                }\n            }\n            else if (group === S || prevgroup === S) {\n                //very crude needs fixing. TODO\n                if (!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))\n                    vars.add(obj.value);\n            }\n            else if (group === PL || prevgroup === PL) {\n                variables(firstObject(obj.symbols), poly, vars);\n            }\n            else if (group === EX) {\n                if (!isNaN(obj.value))\n                    vars.add(obj.value);\n                variables(obj.power, poly, vars);\n            }\n            else if (group === FN && !poly) {\n                for (var i = 0; i < obj.args.length; i++) {\n                    variables(obj.args[i], poly, vars);\n                }\n            }\n        }\n\n        return vars.c.sort();\n    };\n    \n    /**\n     * Returns the sum of an array\n     * @param {Array} arr\n     * @returns {Symbol}\n     */\n    var arraySum = function(arr) {\n        var sum = new Symbol(0);\n        arr.map(function(x) {\n            sum = _.add(sum, x);\n        });\n        return sum;\n    };\n\n    /**\n     * Separates out the variables into terms of variabls. \n     * e.g. x+y+x*y+sqrt(2)+pi returns \n     * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\n     * @param {type} symbol\n     * @param {type} o\n     * @returns {undefined}\n     * @throws {Error} for expontentials\n     */\n    var separate = function (symbol, o) {\n        symbol = _.expand(symbol);\n        o = o || {};\n        var insert = function (key, sym) {\n            if (!o[key])\n                o[key] = new Symbol(0);\n            o[key] = _.add(o[key], sym.clone());\n        };\n        symbol.each(function (x) {\n            if (x.isConstant('all'))\n                insert('constants', x);\n            else if (x.group === S) {\n                insert(x.value, x);\n            }\n            else if (x.group === FN && (x.fname === ABS || x.fname === '')) {\n                separate(x.args[0]);\n            }\n            else if (x.group === EX || x.group === FN) {\n                throw new Error('Unable to separate. Term cannot be a function!');\n            }\n            else {\n                insert(variables(x).join(' '), x);\n            }\n        });\n\n        return o;\n    };\n\n    /**\n     * Fills holes in an array with zero symbol or generates one with n zeroes\n     * @param {Array} arr \n     * @param {Number} n \n     */\n    var fillHoles = function (arr, n) {\n        n = n || arr.length;\n        for (var i = 0; i < n; i++) {\n            var sym = arr[i];\n            if (!sym)\n                arr[i] = new Symbol(0);\n        }\n        return arr;\n    };\n\n    /**\n     * \n     * Checks to see if the object provided is a Vector\n     * @param {Object} obj\n     */\n    var isVector = function (obj) {\n        return (obj instanceof Vector);\n    };\n\n    /**\n     * Checks to see if the object provided is a Matrix\n     * @param {Object} obj\n     */\n    var isMatrix = function (obj) {\n        return (obj instanceof Matrix);\n    };\n    \n    var isSet = function(obj) {\n        return (obj instanceof Set);\n    };\n    \n    /**\n     * Checks to see if a symbol is in group N\n     * @param {Symbol} symbol\n     */\n    var isNumericSymbol = function (symbol) {\n        return symbol.group === N || symbol.group === P;\n    };\n\n    /**\n     * Checks to see if a symbol is a variable with no multiplier nor power\n     * @param {Symbol} symbol\n     */\n    var isVariableSymbol = function (symbol) {\n        return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\n    };\n\n    /**\n     * Checks to see if the object provided is an Array\n     * @param {Object} arr\n     */\n    var isArray = function (arr) {\n        return Array.isArray(arr);\n    };\n\n    /**\n     * Checks to see if a number is an integer\n     * @param {Number} num\n     */\n    var isInt = function (num) {\n        return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\n    };\n\n    /**\n     * @param {Number|Symbol} obj\n     * @returns {boolean}\n     */\n    var isNegative = function (obj) {\n        if (isSymbol(obj)) {\n            obj = obj.multiplier;\n        }\n        return obj.lessThan(0);\n    };\n    /**\n     * Safely stringify object\n     * @param o\n     */\n    var stringify = function(o) {\n        if(!o)\n            return o;\n        return String(o);\n    };\n    \n    /**\n     * @param {String} str\n     * @returns {String} - returns a formatted string surrounded by brackets\n     */\n    var inBrackets = function (str) {\n        return '(' + str + ')';\n    };\n\n    /**\n     * A helper function to replace parts of string\n     * @param {String} str - The original string\n     * @param {Integer} from - The starting index\n     * @param {Integer} to - The ending index\n     * @param {String} with_str - The replacement string\n     * @returns {String} - A formatted string\n     */\n    var stringReplace = function (str, from, to, with_str) {\n        return str.substr(0, from) + with_str + str.substr(to, str.length);\n    };\n\n    /**\n     * the Parser uses this to check if it's allowed to convert the obj to type Symbol\n     * @param {Object} obj\n     * @returns {boolean}\n     */\n    var customType = function (obj) {\n        return obj !== undefined && obj.custom;\n    };\n\n    /**\n     * Checks to see if numbers are both negative or are both positive\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {boolean}\n     */\n    var sameSign = function (a, b) {\n        return (a < 0) === (b < 0);\n    };\n\n    /**\n     * A helper function to replace multiple occurences in a string. Takes multiple arguments\n     * @example format('{0} nice, {0} sweet', 'something')\n     * //returns 'something nice, something sweet'\n     */\n    var format = function () {\n        var args = [].slice.call(arguments),\n                str = args.shift();\n        var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\n            var arg = args[index];\n            return typeof arg === 'function' ? arg() : arg;\n        });\n\n        return new_str;\n    };\n    \n    /**\n     * Generates an array with values within a range. Multiplies by a step if provided\n     * @param {Number} start\n     * @param {Number} end\n     * @param {Number} step\n     */\n    var range = function(start, end, step) {\n        var arr = [];\n        step = step || 1;\n        for(var i=start; i<=end; i++) \n            arr.push(i*step);\n        return arr;\n    };\n    \n    /**\n     * Returns an array of all the keys in an array\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    var keys = Object.keys;\n\n    /**\n     * Returns the first encountered item in an object. Items do not have a fixed order in objects \n     * so only use if you need any first random or if there's only one item in the object\n     * @param {Object} obj\n     * @param {String} key Return this key as first object\n     * @param {Boolean} both\n     * @returns {*}\n     */\n    var firstObject = function (obj, key, both) {\n        for (var x in obj)\n            break;\n        if (key)\n            return x;\n        if(both)\n            return {\n                key: x,\n                obj: obj[x]\n            };\n        return obj[x];\n    };\n\n    /**\n     * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\n     * @param {Symbol} sym1\n     * @param {Symbol} sym2\n     * @param {String[]} vars - an optional array of variables to use\n     * @returns {bool}\n     */\n    var compare = function (sym1, sym2, vars) {\n        var n = 5; //a random number between 1 and 5 is good enough\n        var scope = {}; // scope object with random numbers generated using vars\n        var comparison;\n        for (var i = 0; i < vars.length; i++)\n            scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\n        block('PARSE2NUMBER', function () {\n            comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\n        });\n        return comparison;\n    };\n\n    /**\n     * Is used to set a user defined function using the function assign operator\n     * @param {String} name\n     * @param {String[]} params_array\n     * @param {String} body\n     * @returns {Boolean}\n     */\n    var setFunction = function (name, params_array, body) {\n        validateName(name);\n        if (!isReserved(name)) {\n            params_array = params_array || variables(_.parse(body));\n            _.functions[name] = [_.mapped_function, params_array.length, {\n                    name: name,\n                    params: params_array,\n                    body: body\n                }];\n            return body;\n        }\n        return null;\n    };\n\n    /**\n     * Returns the minimum number in an array\n     * @param {Array} arr\n     * @returns {Number} \n     */\n    var arrayMax = function (arr) {\n        return Math.max.apply(undefined, arr);\n    };\n\n    /**\n     * Returns the maximum number in an array\n     * @param {Array} arr\n     * @returns {Number} \n     */\n    var arrayMin = function (arr) {\n        return Math.min.apply(undefined, arr);\n    };\n\n    /**\n     * Clones array with clonable items\n     * @param {Array} arr\n     * @returns {Array}\n     */\n    var arrayClone = function (arr) {\n        var new_array = [], l = arr.length;\n        for (var i = 0; i < l; i++)\n            new_array[i] = arr[i].clone();\n        return new_array;\n    };\n\n    /**\n     * Fills numbers between array values\n     * @param {Numbers[]} arr\n     * @param {Integer} slices\n     */\n    var arrayAddSlices = function(arr, slices) {\n        slices = slices || 20;\n        var retval = [];\n        var c, delta, e;\n        retval.push(arr[0]); //push the beginning\n        for(var i=0; i<arr.length-1; i++) {\n            c = arr[i];\n            delta = arr[i+1]-c; //get the difference\n            e = delta/slices; //chop it up in the desired number of slices\n            for(var j=0; j<slices; j++) {\n                c += e; //add the mesh to the last slice\n                retval.push(c);\n            }\n        }\n\n        return retval;\n    };\n\n     /**\n     * Gets nth roots of a number\n     * @param {Symbol} symbol\n     * @returns {Vector}\n     */\n    var nroots = function(symbol) {\n        var a, b;\n\n        if(symbol.group === FN && symbol.fname === '') {\n            a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n            b = _.parse(symbol.power);\n        }\n        else if(symbol.group === P) {\n            a = _.parse(symbol.value);\n            b = _.parse(symbol.power);\n        }\n\n        if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {\n            var _roots = [];\n            \n            var parts = Symbol.toPolarFormArray(evaluate(symbol));\n            var r = parts[0];\n            \n            //var r = _.parse(a).abs().toString();\n\n            //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n            var x = _.arg(a);\n            var n = b.multiplier.den.toString();\n            var p = b.multiplier.num.toString();\n\n            var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\n\n            for(var i=0; i<n; i++) {\n                var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n                _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n            }\n            return Vector.fromArray(_roots);\n        }\n        else if(symbol.isConstant(true, true)) {\n            var sign = symbol.sign();\n            var x = evaluate(symbol.abs());\n            var root = _.sqrt(x);\n\n            var _roots = [root.clone(), root.negate()];\n\n            if(sign < 0)\n                _roots = _roots.map(function(x) {\n                    return _.multiply(x, Symbol.imaginary());\n                });\n                \n        }\n        else {\n            _roots = [_.parse(symbol)];\n        }\n\n        return Vector.fromArray(_roots);\n    };\n\n    /**\n     * Sorts and array given 2 parameters\n     * @param {String} a\n     * @param {String} b\n     */\n    var comboSort = function (a, b) {\n        var l = a.length,\n                combined = []; //the linker\n        for (var i = 0; i < a.length; i++) {\n            combined.push([a[i], b[i]]); //create the map\n        }\n\n        combined.sort(function (x, y) {\n            return x[0] - y[0];\n        });\n\n        var na = [], nb = [];\n\n        for (i = 0; i < l; i++) {\n            na.push(combined[i][0]);\n            nb.push(combined[i][1]);\n        }\n\n        return [na, nb];\n    };\n    /**\n     * TODO: Pick a more descriptive name and better description\n     * Breaks a function down into it's parts wrt to a variable, mainly coefficients\n     * Example a*x^2+b wrt x\n     * @param {Symbol} fn\n     * @param {String} wrt\n     * @param {bool} as_obj\n     */\n    var decompose_fn = function (fn, wrt, as_obj) {\n        wrt = String(wrt); //convert to string\n        var ax, a, x, b;\n        if (fn.group === CP) {\n            var t = _.expand(fn.clone()).stripVar(wrt);\n            ax = _.subtract(fn.clone(), t.clone());\n            b = t;\n        }\n        else\n            ax = fn.clone();\n        a = ax.stripVar(wrt);\n        x = _.divide(ax.clone(), a.clone());\n        b = b || new Symbol(0);\n        if (as_obj)\n            return {\n                a: a,\n                x: x,\n                ax: ax,\n                b: b\n            };\n        return [a, x, ax, b];\n    };\n    /**\n     * Rounds a number up to x decimal places\n     * @param {Number} x\n     * @param {Number} s\n     */\n    var nround = function (x, s) {\n        if(isInt(x)) {\n            if(x >= Number.MAX_VALUE)\n                return x.toString();\n            return Number(x);\n        }\n            \n        s = typeof s === 'undefined' ? 14 : s;\n        return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\n    };\n    \n    /**\n     * Is used for u-substitution. Gets a suitable u for substitution. If for\n     * instance a is used in the symbol then it keeps going down the line until\n     * one is found that's not in use. If all letters are taken then it\n     * starts appending numbers. \n     * IMPORTANT! It assumes that the substitution will be undone\n     * beore the user gets to interact with the object again.\n     * @param {Symbol} symbol\n     */\n    var getU = function (symbol) {\n        //start with u\n        var u = 'u', //start with u\n                v = u, //init with u\n                c = 0, //postfix number\n                vars = variables(symbol);\n        //make sure this variable isn't reserved and isn't in the variable list\n        while (!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))\n            v = u + c++;\n        //get an empty slot. It seems easier to just push but the\n        //problem is that we may have some which are created by clearU\n        for (var i = 0, l = RESERVED.length; i <= l; i++)\n            //reserved cannot equals false or 0 so we can safely check for a falsy type\n            if (!RESERVED[i]) {\n                RESERVED[i] = v; //reserve the variable\n                break;\n            }\n        return v;\n    };\n\n    /**\n     * Clears the u variable so it's no longer reserved\n     * @param {String} u\n     */\n    var clearU = function (u) {\n        var indx = RESERVED.indexOf(u);\n        if (indx !== -1)\n            RESERVED[indx] = undefined;\n    };\n\n    /**\n     * Loops through each item in object and calls function with item as param\n     * @param {Object|Array} obj\n     * @param {Function} fn \n     */\n    var each = function (obj, fn) {\n        if (isArray(obj)) {\n            var l = obj.length;\n            for (var i = 0; i < l; i++)\n                fn.call(obj, i);\n        }\n        else {\n            for (var x in obj)\n                if (obj.hasOwnProperty(x))\n                    fn.call(obj, x);\n        }\n    };\n\n    /**\n     * Checks to see if a number is an even number\n     * @param {Number} num\n     * @returns {boolean}\n     */\n    var even = function (num) {\n        return num % 2 === 0;\n    };\n\n    /**\n     * Checks to see if a fraction is divisible by 2\n     * @param {Number} num\n     * @returns {boolean}\n     */\n    var evenFraction = function (num) {\n        return 1 / (num % 1) % 2 === 0;\n    };\n\n    /**\n     * Strips duplicates out of an array\n     * @param {Array} arr\n     */\n    var arrayUnique = function (arr) {\n        var l = arr.length, a = [];\n        for (var i = 0; i < l; i++) {\n            var item = arr[i];\n            if (a.indexOf(item) === -1)\n                a.push(item);\n        }\n        return a;\n    };\n    \n    /**\n     * Removes duplicates from an array. Returns a new array\n     * @param {Array} arr\n     * @param {Function} condition\n     */\n    var removeDuplicates = function(arr, condition) {\n        var conditionType = typeof condition;\n\n        if(conditionType !== 'function' || conditionType === 'undefined') {\n            condition = function(a, b) {\n                return a === b;\n            };\n        }\n\n        var seen = [];\n\n        while(arr.length) {\n            var a = arr[0];\n            //only one element left so we're done\n            if(arr.length === 1) {\n                seen.push(a);\n                break;\n            }\n            var temp = [];\n            seen.push(a); //we already scanned these\n            for(var i=1; i<arr.length; i++) {\n                var b = arr[i];\n                //if the number is outside the specified tolerance\n                if(!condition(a, b))\n                    temp.push(b);\n            }\n            //start over with the remainder\n            arr = temp;\n        }\n\n        return seen;\n    };\n    \n    /**\n     * Reserves the names in an object so they cannot be used as function names\n     * @param {Object} obj\n     */\n    var reserveNames = function (obj) {\n        var add = function (item) {\n            if (RESERVED.indexOf(item) === -1)\n                RESERVED.push(item);\n        };\n\n        if (typeof obj === 'string')\n            add(obj);\n        else {\n            each(obj, function (x) {\n                add(x);\n            });\n        }\n    };\n\n    /**\n     * Removes an item from either an array or an object. If the object is an array, the index must be \n     * specified after the array. If it's an object then the key must be specified\n     * @param {Object|Array} obj\n     * @param {Integer} indexOrKey\n     */\n    var remove = function (obj, indexOrKey) {\n        var result;\n        if (isArray(obj)) {\n            result = obj.splice(indexOrKey, 1)[0];\n        }\n        else {\n            result = obj[indexOrKey];\n            delete obj[indexOrKey];\n        }\n        return result;\n    };\n\n    /**\n     * Creates a temporary block in which one of the global settings is temporarily modified while\n     * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\n     * answer for a period you would set PARSE2NUMBER to true in the block.\n     * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\n     * @param {String} setting - The setting being accessed\n     * @param {Function} f \n     * @param {boolean} opt - The value of the setting in the block\n     * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\n     */\n    var block = function (setting, f, opt, obj) {\n        var current_setting = Settings[setting];\n        Settings[setting] = opt === undefined ? true : !!opt;\n        var retval = f.call(obj);\n        Settings[setting] = current_setting;\n        return retval;\n    };\n\n    /**\n     * provide a mechanism for accessing functions directly. Not yet complete!!! \n     * Some functions will return undefined. This can maybe just remove the \n     * function object at some point when all functions are eventually \n     * housed in the global function object. Returns ALL parser available \n     * functions. Parser.functions may not contain all functions\n     */\n    var importFunctions = function () {\n        var o = {};\n        for (var x in _.functions)\n            o[x] = _.functions[x][0];\n        return o;\n    };\n\n    /**\n     * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\n     * @param {Array|object} obj\n     */\n    var arguments2Array = function (obj) {\n        return [].slice.call(obj);\n    };\n\n    /**\n     * Returns the coefficients of a symbol\n     * @param {Symbol} symbol\n     * @param {Symbol} wrt\n     */\n    var getCoeffs = function (symbol, wrt) {\n        var coeffs = [];\n        //we loop through the symbols and stick them in their respective \n        //containers e.g. y*x^2 goes to index 2\n        symbol.each(function (term) {\n            if (term.contains(wrt)) {\n                //we want only the coefficient which in this case will be everything but the variable\n                //e.g. a*b*x -> a*b if the variable to solve for is x\n                var coeff = term.stripVar(wrt),\n                        x = _.divide(term.clone(), coeff.clone()),\n                        p = x.power.toDecimal();\n            }\n            else {\n                coeff = term;\n                p = 0;\n            }\n            var e = coeffs[p];\n            //if it exists just add it to it\n            coeffs[p] = e ? _.add(e, coeff) : coeff;\n\n        }, true);\n\n        for (var i = 0; i < coeffs.length; i++)\n            if (!coeffs[i])\n                coeffs[i] = new Symbol(0);\n        //fill the holes\n        return coeffs;\n    };\n\n    /**\n     * As the name states. It forces evaluation of the expression \n     * @param {Symbol} symbol\n     * @param {Symbol} o\n     */\n    var evaluate = function (symbol, o) {\n        return block('PARSE2NUMBER', function () {\n            return _.parse(symbol, o);\n        }, true);\n    };\n\n    /**\n     * Converts an array to a vector. Consider moving this to Vector.fromArray\n     * @param {String[]|String|Symbol|Number|Number[]} x \n     */\n    var convertToVector = function (x) {\n        if (isArray(x)) {\n            var vector = new Vector([]);\n            for (var i = 0; i < x.length; i++)\n                vector.elements.push(convertToVector(x[i]));\n            return vector;\n        }\n        //Ensure that a nerdamer ready object is returned\n        if (!isSymbol(x))\n            return _.parse(x);\n        return x;\n    };\n\n    /**\n     * Generates prime numbers up to a specified number\n     * @param {Number} upto \n     */\n    var generatePrimes = function (upto) {\n        //get the last prime in the array\n        var last_prime = PRIMES[PRIMES.length - 1] || 2;\n        //no need to check if we've already encountered the number. Just check the cache.\n        for (var i = last_prime; i < upto; i++) {\n            if (isPrime(i))\n                PRIMES.push(i);\n        }\n    };\n    /**\n     * Checks to see if all arguments are numbers\n     * @param {object} args\n     */\n    var allNumbers = function (args) {\n        for (var i = 0; i < args.length; i++)\n            if (args[i].group !== N)\n                return false;\n        return true;\n    };\n    /*\n     * Checks if all arguments aren't just all number but if they\n     * are constants as well e.g. pi, e.\n     * @param {object} args \n     */\n    var allConstants = function (args) {\n        for (var i = 0; i < args.length; i++) {\n            if (args[i].isPi() || args[i].isE())\n                continue;\n            if (!args[i].isConstant(true))\n                return false;\n        }\n        return true;\n    };\n\n\n//Exceptions ===================================================================\n    //Is thrown for division by zero\n    var DivisionByZero = customError('DivisionByZero');\n    //Is throw if an error occured during parsing\n    var ParseError = customError('ParseError');\n    //Is thrown if the expression results in undefined\n    var UndefinedError = customError('UndefinedError');\n    //Is throw if a function exceeds x amount of iterations\n    var MaximumIterationsReached = customError('MaximumIterationsReached');\n    //Is thrown if the parser receives an incorrect type\n    var NerdamerTypeError = customError('NerdamerTypeError');\n    //Is thrown if bracket parity is not correct\n    var ParityError = customError('ParityError');\n    //Is thrown if an unexpectd or incorrect operator is encountered\n    var OperatorError = customError('OperatorError');\n    //Is thrown if an index is out of range.\n    var OutOfRangeError = customError('OutOfRangeError');\n    //Is thrown if dimensions are incorrect. Mostly for matrices\n    var DimensionError = customError('DimensionError');\n    //Is thrown if variable name violates naming rule\n    var InvalidVariableNameError = customError('InvalidVariableNameError');\n    //Is thrown if the limits of the library are exceeded for a function\n    //This can be that the function become unstable passed a value\n    var ValueLimitExceededError = customError('ValueLimitExceededError');\n    //Is throw if the value is an incorrect LH or RH value\n    var NerdamerValueError = customError('NerdamerValueError');\n    //Is throw if the value is an incorrect LH or RH value\n    var SolveError = customError('SolveError');\n\n    var exceptions = {\n        DivisionByZero: DivisionByZero,\n        ParseError: ParseError,\n        UndefinedError: UndefinedError,\n        MaximumIterationsReached: MaximumIterationsReached,\n        NerdamerTypeError: NerdamerTypeError,\n        ParityError: ParityError,\n        OperatorError: OperatorError,\n        OutOfRangeError: OutOfRangeError,\n        DimensionError: DimensionError,\n        InvalidVariableNameError: InvalidVariableNameError,\n        ValueLimitExceededError: ValueLimitExceededError,\n        NerdamerValueError: NerdamerValueError,\n        SolveError: SolveError\n    };\n//Big ========================================================================== \n    var Big = {\n        cos: function (x) {\n            return new Symbol(bigDec.cos(x.multiplier.toDecimal()));\n        },\n        sin: function (x) {\n            return new Symbol(bigDec.sin(x.multiplier.toDecimal()));\n        }\n    };\n//Math2 ======================================================================== \n    //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\n    //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the \n    //functions within are pretty self-explanatory.\n    //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\n    var Math2 = {\n        csc: function (x) {\n            return 1 / Math.sin(x);\n        },\n        sec: function (x) {\n            return 1 / Math.cos(x);\n        },\n        cot: function (x) {\n            return 1 / Math.tan(x);\n        },\n\t\tacsc: function(x) { return Math.asin(1/x); },\n        asec: function(x) { \n            return Math.acos(1/x); \n        },\n        acot: function(x) { \n            return (Math.PI / 2) - Math.atan(x);\n        },\n        // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\n        erf: function (x) {\n            var t = 1 / (1 + 0.5 * Math.abs(x));\n            var result = 1 - t * Math.exp(-x * x - 1.26551223 +\n                    t * (1.00002368 +\n                            t * (0.37409196 +\n                                    t * (0.09678418 +\n                                            t * (-0.18628806 +\n                                                    t * (0.27886807 +\n                                                            t * (-1.13520398 +\n                                                                    t * (1.48851587 +\n                                                                            t * (-0.82215223 +\n                                                                                    t * (0.17087277)))))))))\n                    );\n            return x >= 0 ? result : -result;\n        },\n        diff: function(f) {\n            var h = 0.001;\n            \n            var derivative = function(x) { \n                return (f(x + h) - f(x - h)) / (2 * h); \n            };\n            \n            return derivative;\n        },\n        median: function (...values) {\n            values.sort(function (a, b) {\n                return a - b;\n            });\n\n            var half = Math.floor(values.length / 2);\n\n            if (values.length % 2)\n                return values[half];\n\n            return (values[half - 1] + values[half]) / 2.0;\n        },\n        /*\n         * Reverses continued fraction calculation\n         * @param {obj} contd\n         * @returns {Number}\n         */\n        fromContinued: function (contd) {\n            var arr = contd.fractions.slice();\n            var e = 1 / arr.pop();\n            for (var i = 0, l = arr.length; i < l; i++) {\n                e = 1 / (arr.pop() + e);\n            }\n            return contd.sign * (contd.whole + e);\n        },\n        /*\n         * Calculates continued fractions\n         * @param {Number} n\n         * @param {Number} x The number of places\n         * @returns {Number}\n         */\n        continuedFraction: function (n, x) {\n            x = x || 20;\n            var sign = Math.sign(n); /*store the sign*/\n            var absn = Math.abs(n); /*get the absolute value of the number*/\n            var whole = Math.floor(absn); /*get the whole*/\n            var ni = absn - whole; /*subtract the whole*/\n            var c = 0; /*the counter to keep track of iterations*/\n            var done = false;\n            var epsilon = 1e-14;\n            var max = 1e7;\n            var e, w;\n            var retval = {\n                whole: whole,\n                sign: sign,\n                fractions: []\n            };\n            /*start calculating*/\n            while (!done && ni !== 0) {\n                /*invert and get the whole*/\n                e = 1 / ni;\n                w = Math.floor(e);\n                if (w > max) {\n                    /*this signals that we may have already gone too far*/\n                    var d = Math2.fromContinued(retval) - n;\n                    if (d <= Number.EPSILON)\n                        break;\n                }\n                /*add to result*/\n                retval.fractions.push(w);\n                /*move the ni to the decimal*/\n                ni = e - w;\n                /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\n                if (ni <= epsilon || c >= x - 1)\n                    done = true;\n                c++;\n            }\n            /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\n            var idx = retval.fractions.length - 1;\n            if (retval.fractions[idx] === 1) {\n                retval.fractions.pop();\n                /*increase the last one by one*/\n                retval.fractions[--idx]++;\n            }\n            return retval;\n        },\n        bigpow: function (n, p) {\n            if (!(n instanceof Frac))\n                n = Frac.create(n);\n            if (!(p instanceof Frac))\n                p = Frac.create(p);\n            var retval = new Frac(0);\n            if (p.isInteger()) {\n                retval.num = n.num.pow(p.toString());\n                retval.den = n.den.pow(p.toString());\n            }\n            else {\n                var num = Frac.create(Math.pow(n.num, p.num));\n                var den = Frac.create(Math.pow(n.den, p.num));\n\n                retval.num = Math2.nthroot(num, p.den.toString());\n                retval.den = Math2.nthroot(den, p.den);\n            }\n            return retval;\n        },\n        //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\n        gamma: function (z) {\n            var g = 7;\n            var C = [\n                0.99999999999980993,\n                676.5203681218851,\n                -1259.1392167224028,\n                771.32342877765313,\n                -176.61502916214059,\n                12.507343278686905,\n                -0.13857109526572012,\n                9.9843695780195716e-6,\n                1.5056327351493116e-7]\n                    ;\n\n            if (z < 0.5)\n                return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));\n            else {\n                z -= 1;\n\n                var x = C[0];\n                for (var i = 1; i < g + 2; i++)\n                    x += C[i] / (z + i);\n\n                var t = z + g + 0.5;\n                return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\n            }\n        },\n        //factorial\n        bigfactorial: function (x) {\n            var retval = new bigInt(1);\n            for (var i = 2; i <= x; i++)\n                retval = retval.times(i);\n            return new Frac(retval);\n        },\n        //https://en.wikipedia.org/wiki/Logarithm#Calculation\n        bigLog: function (x) {\n            varn            if (CACHE[x]) {\n                return Frac.quick.apply(null, CACHE[x].split('/'));\n            }\n            x = new Frac(x);\n            var n = 80;\n            var retval = new Frac(0);\n            var a = x.subtract(new Frac(1));\n            var b = x.add(new Frac(1));\n            for (var i = 0; i < n; i++) {\n                var t = new Frac(2 * i + 1);\n                var k = Math2.bigpow(a.divide(b), t);\n                var r = t.clone().invert().multiply(k);\n                retval = retval.add(r);\n\n            }\n            return retval.multiply(new Frac(2));\n        },\n        //the factorial function but using the big library instead\n        factorial: function (x) {\n            var is_int = x % 1 === 0;\n            \n            /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\n            if (is_int && x < 0)\n                return NaN;\n            \n            if(!is_int)\n                return Math2.gamma(x+1);\n            \n            var retval = 1;\n            for (var i = 2; i <= x; i++)\n                retval = retval * i;\n            return retval;\n        },\n        //double factorial\n        //http://mathworld.wolfram.com/DoubleFactorial.html\n        dfactorial: function (x) {\n            if (isInt(x)) {\n                var even = x % 2 === 0;\n                /* If x = even then n = x/2 else n = (x-1)/2*/\n                var n = even ? x / 2 : (x + 1) / 2;\n                /*the return value*/\n                var r = new Frac(1);\n                /*start the loop*/\n                if (even)\n                    for (var i = 1; i <= n; i++)\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)));\n                else\n                    for (var i = 1; i <= n; i++)\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\n            }\n            else {\n                /*Not yet extended to bigNum*/\n                r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\n            }\n\n            /*done*/\n            return r;\n        },\n        GCD: function () {\n            var args = arrayUnique([].slice.call(arguments)\n                    .map(function (x) {\n                        return Math.abs(x);\n                    })).sort(),\n                    a = Math.abs(args.shift()),\n                    n = args.length;\n\n            while (n-- > 0) {\n                var b = Math.abs(args.shift());\n                while (true) {\n                    a %= b;\n                    if (a === 0) {\n                        a = b;\n                        break;\n                    }\n                    b %= a;\n                    if (b === 0)\n                        break;\n                    ;\n                }\n            }\n            return a;\n        },\n        QGCD: function () {\n            var args = [].slice.call(arguments);\n            var a = args[0];\n            for (var i = 1; i < args.length; i++) {\n                var b = args[i];\n                var sign = a.isNegative() && b.isNegative() ? -1 : 1;\n                a = b.gcd(a);\n                if (sign < 0)\n                    a.negate();\n            }\n            return a;\n        },\n        LCM: function (a, b) {\n            return (a * b) / Math2.GCD(a, b);\n        },\n        //pow but with the handling of negative numbers\n        //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\n        pow: function (b, e) {\n            if (b < 0) {\n                if (Math.abs(e) < 1) {\n                    /*nth root of a negative number is imaginary when n is even*/\n                    if (1 / e % 2 === 0)\n                        return NaN;\n                    return -Math.pow(Math.abs(b), e);\n                }\n            }\n            return Math.pow(b, e);\n        },\n        factor: function (n) {\n            n = Number(n);\n            var sign = Math.sign(n); /*store the sign*/\n            /*move the number to absolute value*/\n            n = Math.abs(n);\n            var ifactors = Math2.ifactor(n);\n            var factors = new Symbol();\n            factors.symbols = {};\n            factors.group = CB;\n            for (var x in ifactors) {\n                var factor = new Symbol(1);\n                factor.group = P; /*cheat a little*/\n                factor.value = x;\n                factor.power = new Symbol(ifactors[x]);\n                factors.symbols[x] = factor;\n            }\n            factors.updateHash();\n            \n            if(n === 1) {\n                factors = new Symbol(n);\n            }\n            \n            /*put back the sign*/\n            if(sign < 0)\n                factors.negate();\n            \n            return factors;\n        },\n        /**\n         * Uses trial division\n         * @param {Integer} n - the number being factored\n         * @param {object} factors -  the factors object\n         * @returns {object}\n         */\n        sfactor: function (n, factors) {\n            factors = factors || {};\n            var r = Math.floor(Math.sqrt(n));\n            var lcprime = PRIMES[PRIMES.length - 1];\n            /*a one-time cost... Hopefully ... And don't bother for more than a million*/\n            /*takes too long*/\n            if (r > lcprime && n < 1e6)\n                generatePrimes(r);\n            var l = PRIMES.length;\n            for (var i = 0; i < l; i++) {\n                var prime = PRIMES[i];\n                /*trial division*/\n                while (n % prime === 0) {\n                    n = n / prime;\n                    factors[prime] = (factors[prime] || 0) + 1;\n                }\n            }\n            if (n > 1)\n                factors[n] = 1;\n            return factors;\n        },\n        /**\n         * Pollard's rho\n         * @param {Integer} n\n         * @returns {object}\n         */\n        ifactor: function (n) {\n            n = String(n);\n\n            if (n === '0')\n                return {'0': 1};\n            n = new bigInt(n); /*convert to bigInt for safety*/\n            var sign = n.sign ? -1 : 1;\n            n = n.abs();\n            var factors = {}; /*factor object being returned.*/\n            if (n.lt('65536')) { /*less than 2^16 just use trial division*/\n                factors = Math2.sfactor(n, factors);\n            }\n            else {\n                var add = function (e) {\n                    if (!e.isPrime()) {\n                        factors = Math2.sfactor(e, factors);\n                    }\n                    else\n                        factors[e] = (factors[e] || 0) + 1;\n                };\n\n                while (!n.abs().equals(1)) {\n                    if (n.isPrime()) {\n                        add(n);\n                        break;\n                    }\n                    else {\n                        function rho(c) {\n                            var xf = new bigInt(c),\n                                    cz = 2,\n                                    x = new bigInt(c),\n                                    factor = new bigInt(1);\n\n                            while (factor.equals(1)) {\n                                for (var i = 0; i <= cz && factor.equals(1); i++) {\n                                    x = x.pow(2).add(1).mod(n);\n                                    factor = bigInt.gcd(x.minus(xf).abs(), n);\n                                }\n\n                                cz = cz * 2;\n                                xf = x;\n                            }\n                            if (factor.equals(n)) {\n                                return rho(c + 1);\n                            }\n                            return factor;\n                        }\n                        var factor = rho(2);\n                        add(factor);\n                        /*divide out the factor*/\n                        n = n.divide(factor);\n                    }\n                }\n            }\n\n            /*put the sign back*/\n            if (sign === -1) {\n                var sm = arrayMin(keys(factors)); /*/get the smallest number*/\n                factors['-' + sm] = factors[sm];\n                delete factors[sm];\n            }\n\n            return factors;\n        },\n        //factors a number into rectangular box. If sides are primes that this will be\n        //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\n        boxfactor: function (n, max) {\n            max = max || 200; //stop after this number of iterations\n            var c, r,\n                    d = Math.floor((5 / 12) * n), //the divisor\n                    i = 0, //number of iterations\n                    safety = false;\n            while (true) {\n                c = Math.floor(n / d);\n                r = n % d;\n                if (r === 0)\n                    break; //we're done\n                if (safety)\n                    return [n, 1];\n                d = Math.max(r, d - r);\n                i++;\n                safety = i > max;\n            }\n            return [c, d, i];\n        },\n        fib: function (n) {\n            var sign = Math.sign(n);\n            n = Math.abs(n);\n            sign = even(n) ? sign : Math.abs(sign);\n            var a = 0, b = 1, f = 1;\n            for (var i = 2; i <= n; i++) {\n                f = a + b;\n                a = b;\n                b = f;\n            }\n            return f * sign;\n        },\n        mod: function (x, y) {\n            return x % y;\n        },\n        //http://mathworld.wolfram.com/IntegerPart.html\n        integer_part: function (x) {\n            var sign = Math.sign(x);\n            return sign * Math.floor(Math.abs(x));\n        },\n        simpson: function (f, a, b, step) {\n            var get_value = function (f, x, side) {\n                var v = f(x);\n                var d = 0.000000000001;\n                if (isNaN(v)) {\n                    v = f(side === 1 ? x + d : x - d);\n                }\n                return v;\n            };\n\n            step = step || 0.0001;\n            //calculate the number of intervals\n            var n = Math.abs(Math.floor((b - a) / step));\n            //simpson's rule requires an even number of intervals. If it's not then add 1\n            if (n % 2 !== 0)\n                n++;\n            //get the interval size\n            var dx = (b - a) / n;\n            //get x0\n            var retval = get_value(f, a, 1);\n\n            //get the middle part 4x1+2x2+4x3 ...\n            //but first set a flag to see if it's even or odd. \n            //The first one is odd so we start there\n            var even = false;\n            //get x1\n            var xi = a + dx;\n            //the coefficient\n            var c, k;\n            //https://en.wikipedia.org/wiki/Simpson%27s_rule\n            for (var i = 1; i < n; i++) {\n                c = even ? 2 : 4;\n                k = c * get_value(f, xi, 1);\n                retval += k;\n                //flip the even flag\n                even = !even;\n                //increment xi\n                xi += dx;\n            }\n\n            //add xn\n            return (retval + get_value(f, xi, 2)) * (dx / 3);\n\n        },\n        /**\n         * https://github.com/scijs/integrate-adaptive-simpson\n         * @param {Function} f - the function being integrated\n         * @param {Number} a - lower bound\n         * @param {Number} b - upper bound\n         * @param {Number} tol - step width\n         * @param {Number} maxdepth\n         * @returns {Number}\n         */\n        num_integrate: function (f, a, b, tol, maxdepth) {\n            if (maxdepth < 0)\n                throw new Error('max depth cannot be negative');\n\n            /* This algorithm adapted from pseudocode in:*/\n            /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\n            function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n                if (state.nanEncountered) {\n                    return NaN;\n                }\n                var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n                h = b - a;\n                f1 = f(a + h * 0.25);\n                f2 = f(b - h * 0.25);\n                /* Simple check for NaN:*/\n                if (isNaN(f1)) {\n                    state.nanEncountered = true;\n                    return;\n                }\n                /* Simple check for NaN:*/\n                if (isNaN(f2)) {\n                    state.nanEncountered = true;\n                    return;\n                }\n\n                sl = h * (fa + 4 * f1 + fm) / 12;\n                sr = h * (fm + 4 * f2 + fb) / 12;\n                s2 = sl + sr;\n                err = (s2 - V0) / 15;\n\n                if (state.maxDepthCount > 1000 * maxdepth) {\n                    return;\n                }\n\n\n                if (depth > maxdepth) {\n                    state.maxDepthCount++;\n                    return s2 + err;\n                }\n                else if (Math.abs(err) < tol) {\n                    return s2 + err;\n                }\n                else {\n                    m = a + h * 0.5;\n                    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n                    if (isNaN(V1)) {\n                        state.nanEncountered = true;\n                        return NaN;\n                    }\n                    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n                    if (isNaN(V2)) {\n                        state.nanEncountered = true;\n                        return NaN;\n                    }\n\n                    return V1 + V2;\n                }\n            }\n\n            function integrate(f, a, b, tol, maxdepth) {\n                var state = {\n                    maxDepthCount: 0,\n                    nanEncountered: false\n                };\n\n                if (tol === undefined) {\n                    tol = 1e-9;\n                }\n                if (maxdepth === undefined) {\n                    /*Issue #458 - This was lowered because of performance issues. */\n                    /*This was suspected from before but is now confirmed with this issue*/\n                    maxdepth = 45;\n                }\n\n                var fa = f(a);\n                var fm = f(0.5 * (a + b));\n                var fb = f(b);\n\n                var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n\n                var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n\n                if (state.maxDepthCount > 0) {\n                    warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n                }\n\n                if (state.nanEncountered) {\n                    throw new Error('Function does not converge over interval!');\n                }\n\n                return result;\n            }\n            var retval;\n\n            try {\n                retval = integrate(f, a, b, tol, maxdepth);\n            }\n            catch (e) {\n                /*fallback to non-adaptive*/\n                return Math2.simpson(f, a, b);\n            }\n            return nround(retval, 12);\n        },\n        //https://en.wikipedia.org/wiki/Trigonometric_integral\n        //CosineIntegral\n        Ci: function (x) {\n            var n = 20,\n                    /*roughly Euler–Mascheroni*/\n                    g = 0.5772156649015329, \n                    sum = 0;\n            for (var i = 1; i < n; i++) {\n                /*cache 2n*/\n                var n2 = 2 * i; \n                sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));\n            }\n            return Math.log(x) + g + sum;\n        },\n        /*SineIntegral*/\n        Si: function (x) {\n            var n = 20,\n                    sum = 0;\n            for (var i = 0; i < n; i++) {\n                var n2 = 2 * i;\n                sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));\n            }\n            return sum;\n        },\n        /*ExponentialIntegral*/\n        Ei: function (x) {\n            if (Number(x) === 0)\n                return -Infinity;\n            var n = 30,\n                    g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/\n                    sum = 0;\n            for (var i = 1; i < n; i++) {\n                sum += Math.pow(x, i) / (i * Math2.factorial(i));\n            }\n            return g + Math.abs(Math.log(x)) + sum;\n        },\n        /*Hyperbolic Sine Integral*/\n        /*http://mathworld.wolfram.com/Shi.html*/\n        Shi: function (x) {\n            var n = 30,\n                    sum = 0,\n                    k, t;\n            for (var i = 0; i < n; i++) {\n                k = 2 * i;\n                t = k + 1;\n                sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\n            }\n            return sum;\n        },\n        /*the cosine integral function*/\n        Chi: function (x) {\n            var dx, g, f;\n            dx = 0.001;\n            g = 0.5772156649015328606;\n            f = function (t) {\n                return (Math.cosh(t) - 1) / t;\n            };\n            return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\n        },\n        /*the log integral*/\n        Li: function (x) {\n            return Math2.Ei(Math2.bigLog(x));\n        },\n        /*the gamma incomplete function*/\n        gamma_incomplete: function (n, x) {\n            var t = n - 1,\n                    sum = 0,\n                    x = x || 0;\n            for (var i = 0; i < t; i++) {\n                sum += Math.pow(x, i) / Math2.factorial(i);\n            }\n            return Math2.factorial(t) * Math.exp(-x) * sum;\n        },\n        /*\n         * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\n         * if x > 0 then 1\n         * if x == 0 then 1/2\n         * if x < 0 then 0\n         */\n        step: function (x) {\n            if (x > 0)\n                return 1;\n            if (x < 0)\n                return 0;\n            return 0.5;\n        },\n        /*\n         * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/RectangleFunction.html\n         * if |x| > 1/2 then 0\n         * if |x| == 1/2 then 1/2\n         * if |x| < 1/2 then 1\n         */\n        rect: function (x) {\n            var x = Math.abs(x);\n            if (x === 0.5)\n                return x;\n            if (x > 0.5)\n                return 0;\n            return 1;\n        },\n        /*\n         * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/SincFunction.html\n         * if x == 0 then 1\n         * otherwise sin(x)/x\n         */\n        sinc: function (x) {\n            if (x.equals(0))\n                return 1;\n            return Math.sin(x) / x;\n        },\n        /*\n         * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/TriangleFunction.html\n         * if |x| >= 1 then 0\n         * if |x| < then 1-|x|\n         */\n        tri: function (x) {\n            x = Math.abs(x);\n            if (x >= 1)\n                return 0;\n            return 1 - x;\n        },\n        //https://en.wikipedia.org/wiki/Nth_root_algorithm\n        nthroot: function (A, n) {\n            /*make sure the input is of type Frac*/\n            if (!(A instanceof Frac))\n                A = new Frac(A.toString());\n            if (!(n instanceof Frac))\n                n = new Frac(n.toString());\n            if (n.equals(1))\n                return A;\n            /*begin algorithm*/\n            var xk = A.divide(new Frac(2)); /*x0*/\n            var e = new Frac(1e-15);\n            var dk, dk0, d0;\n            var a = n.clone().invert(),\n                    b = n.subtract(new Frac(1));\n            do {\n                var powb = Math2.bigpow(xk, b);\n                var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\n                dk = Frac.create(dk_dec);\n                if (d0)\n                    break;\n\n                xk = xk.add(dk);\n                /*check to see if there's no change from the last xk*/\n                var dk_dec = dk.toDecimal();\n                d0 = dk0 ? dk0 === dk_dec : false;\n                dk0 = dk_dec;\n            }\n            while (dk.abs().gte(e))\n\n            return xk;\n        },\n        /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\n        /*Just the square root function but big :)*/\n        sqrt: function (n) {\n            if (!(n instanceof Frac))\n                n = new Frac(n);\n            var xn, d, ld, same_delta;\n            var c = 0; /*counter*/\n            var done = false;\n            var delta = new Frac(1e-20);\n            xn = n.divide(new Frac(2));\n            var safety = 1000;\n            do {\n                /*break if we're not converging*/\n                if (c > safety)\n                    throw new Error('Unable to calculate square root for ' + n);\n                xn = xn.add(n.divide(xn)).divide(new Frac(2));\n                xn = new Frac(xn.decimal(30));\n                /*get the difference from the true square*/\n                d = n.subtract(xn.multiply(xn));\n                /*if the square of the calculated number is close enough to the number*/\n                /*we're getting the square root or the last delta was the same as the new delta*/\n                /*then we're done*/\n                same_delta = ld ? ld.equals(d) : false;\n                if (d.clone().abs().lessThan(delta) || same_delta)\n                    done = true;\n                /*store the calculated delta*/\n                ld = d;\n                c++; /*increase the counter*/\n            }\n            while (!done)\n\n            return xn;\n        }\n    };\n    //link the Math2 object to Settings.FUNCTION_MODULES\n    Settings.FUNCTION_MODULES.push(Math2);\n    reserveNames(Math2); //reserve the names in Math2\n\n\n//Polyfills ==================================================================== \n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\n    Math.sign = Math.sign || function (x) {\n        x = +x; // convert to a number\n        if (x === 0 || isNaN(x)) {\n            return x;\n        }\n        return x > 0 ? 1 : -1;\n    };\n\n    Math.cosh = Math.cosh || function (x) {\n        var y = Math.exp(x);\n        return (y + 1 / y) / 2;\n    };\n\n    Math.sech = Math.sech || function (x) {\n        return 1 / Math.cosh(x);\n    };\n\n    Math.csch = Math.csch || function (x) {\n        return 1 / Math.sinh(x);\n    };\n\n    Math.coth = Math.coth || function (x) {\n        return 1 / Math.tanh(x);\n    };\n\n    Math.sinh = Math.sinh || function (x) {\n        var y = Math.exp(x);\n        return (y - 1 / y) / 2;\n    };\n\n    Math.tanh = Math.tanh || function (x) {\n        if (x === Infinity) {\n            return 1;\n        }\n        else if (x === -Infinity) {\n            return -1;\n        }\n        else {\n            var y = Math.exp(2 * x);\n            return (y - 1) / (y + 1);\n        }\n    };\n\n    Math.asinh = Math.asinh || function (x) {\n        if (x === -Infinity) {\n            return x;\n        }\n        else {\n            return Math.log(x + Math.sqrt(x * x + 1));\n        }\n    };\n\n    Math.acosh = Math.acosh || function (x) {\n        return Math.log(x + Math.sqrt(x * x - 1));\n    };\n\n    Math.atanh = Math.atanh || function (x) {\n        return Math.log((1 + x) / (1 - x)) / 2;\n    };\n\n    Math.log10 = Math.log10 || function (x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n\n    Math.trunc = Math.trunc || function (x) {\n        if (isNaN(x)) {\n            return NaN;\n        }\n        if (x > 0) {\n            return Math.floor(x);\n        }\n        return Math.ceil(x);\n    };\n\n//Global functions ============================================================= \n    /**\n     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector. \n     * If all else fails it *assumes* the object has a toString method and will call that.\n     * \n     * @param {Object} obj\n     * @param {String} option get is as a hash \n     * @param {int} useGroup\n     * @returns {String}\n     */\n    function text(obj, option, useGroup, decp) {\n        var asHash = option === 'hash',\n            //whether to wrap numbers in brackets\n            wrapCondition = undefined,\n            opt = asHash ? undefined : option,\n            asDecimal = opt === 'decimal' || opt === 'decimals';\n    \n        if(asDecimal && typeof decp === 'undefined')\n            decp = 16;\n\n        function toString(obj) {\n            switch (option)\n            {\n                case 'decimals':\n                case 'decimal':\n                    wrapCondition = wrapCondition || function (str) {\n                        return false;\n                    };\n                    return obj.valueOf();\n                case 'recurring':\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf(\"'\") !== -1;\n                    };\n\n                    var str = obj.toString();\n                    //verify that the string is actually a fraction\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n                    if (frac.length === 0)\n                        return str;\n\n                    //split the fraction into the numerator and denominator\n                    var parts = frac[0].split('/');\n                    var negative = false;\n                    var m = Number(parts[0]);\n                    if (m < 0) {\n                        m = -m;\n                        negative = true;\n                    }\n                    var n = Number(parts[1]);\n                    if (!n)\n                        n = 1;\n\n                    //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\n                    var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);\n                    quotient = quotient.toString() + \".\";\n                    while (c && c < n) {\n                        c *= 10;\n                        quotient += \"0\";\n                    }\n                    var digits = \"\", passed = [], i = 0;\n                    while (true) {\n                        if (typeof passed[c] !== 'undefined') {\n                            var prefix = digits.slice(0, passed[c]),\n                                    cycle = digits.slice(passed[c]),\n                                    result = quotient + prefix + \"'\" + cycle + \"'\";\n                            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\n                        }\n                        var q = Math.floor(c / n), r = c - q * n;\n                        passed[c] = i;\n                        digits += q.toString();\n                        i += 1;\n                        c = 10 * r;\n                    }\n                case 'mixed':\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf('/') !== -1;\n                    };\n\n                    var str = obj.toString();\n                    //verify that the string is actually a fraction\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n                    if (frac.length === 0)\n                        return str;\n\n                    //split the fraction into the numerator and denominator\n                    var parts = frac[0].split('/');\n                    var numer = new bigInt(parts[0]);\n                    var denom = new bigInt(parts[1]);\n                    if (denom.equals(0))\n                        denom = new bigInt(1);\n\n                    //return the quotient plus the remainder\n                    var divmod = numer.divmod(denom);\n                    var quotient = divmod.quotient;\n                    var remainder = divmod.remainder;\n                    var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\n                    return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));\n                default:\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf('/') !== -1;\n                    };\n\n                    return obj.toString();\n            }\n        }\n\n        //if the object is a symbol\n        if (isSymbol(obj)) {\n            var multiplier = '',\n                    power = '',\n                    sign = '',\n                    group = obj.group || useGroup,\n                    value = obj.value;\n            //if the value is to be used as a hash then the power and multiplier need to be suppressed\n            if (!asHash) {\n                //use asDecimal to get the object back as a decimal\n                var om = toString(obj.multiplier);\n                if (om == '-1') {\n                    sign = '-';\n                    om = '1';\n                }\n                //only add the multiplier if it's not 1\n                if (om != '1')\n                    multiplier = om;\n                //use asDecimal to get the object back as a decimal\n                var p = obj.power ? toString(obj.power) : '';\n                //only add the multiplier \n                if (p != '1') {\n                    //is it a symbol\n                    if (isSymbol(p)) {\n                        power = text(p, opt);\n                    }\n                    else {\n                        power = p;\n                    }\n                }\n            }\n\n            switch (group) {\n                case N:\n                    multiplier = '';\n                    //round if requested\n                    var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\n\n                    //if it's numerical then all we need is the multiplier\n                    value = obj.multiplier == '-1' ? '1' : m;\n                    power = '';\n                    break;\n                case PL:\n                    value = obj.collectSymbols().map(function(x) {\n                        var txt = text(x, opt, useGroup, decp);\n                        if(txt == '0')\n                            txt = '';\n                        return txt;\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\n                    break;\n                case CP:\n                    value = obj.collectSymbols().map(function(x) {\n                        var txt = text(x, opt, useGroup, decp);\n                        if(txt == '0')\n                            txt = '';\n                        return txt;\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\n                    break;\n                case CB:\n                    value = obj.collectSymbols(function (symbol) {\n                        var g = symbol.group;\n                        //both groups will already be in brackets if their power is greater than 1\n                        //so skip it.\n                        if ((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {\n                            return inBrackets(text(symbol, opt));\n                        }\n                        return text(symbol, opt);\n                    }).join('*');\n                    break;\n                case EX:\n                    var pg = obj.previousGroup,\n                            pwg = obj.power.group;\n\n                    //PL are the exception. It's simpler to just collect and set the value\n                    if (pg === PL)\n                        value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\n                    if (!(pg === N || pg === S || pg === FN) && !asHash) {\n                        value = inBrackets(value);\n                    }\n\n                    if ((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\n                        power = inBrackets(power);\n                    }\n                    break;\n            }\n\n            if (group === FN) {\n                value = obj.fname + inBrackets(obj.args.map(function (symbol) {\n                    return text(symbol, opt);\n                }).join(','));\n            }\n            //TODO: Needs to be more efficient. Maybe. \n            if (group === FN && obj.fname in CUSTOM_OPERATORS) {\n                var a = text(obj.args[0]);\n                var b = text(obj.args[1]);\n                if (obj.args[0].isComposite()) //preserve the brackets\n                    a = inBrackets(a);\n                if (obj.args[1].isComposite()) //preserve the brackets\n                    b = inBrackets(b);\n                value = a + CUSTOM_OPERATORS[obj.fname] + b;\n            }\n            //wrap the power since / is less than ^\n            //TODO: introduce method call isSimple\n            if (power && group !== EX && wrapCondition(power)) {\n                power = inBrackets(power);\n            }\n\n            //the following groups are held together by plus or minus. They can be raised to a power or multiplied\n            //by a multiplier and have to be in brackets to preserve the order of precedence\n            if (((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))\n                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))\n                    || !asHash && group === P && value == -1\n                    || obj.fname === PARENTHESIS) {\n\n                value = inBrackets(value);\n            }\n            \n            if(decp && (option === 'decimal' || option === 'decimals' && multiplier))\n                multiplier = nround(multiplier, decp)\n            \n            //add the sign back\n            var c = sign + multiplier;\n            \n            if (multiplier && wrapCondition(multiplier))\n                c = inBrackets(c);\n\n            if (power < 0)\n                power = inBrackets(power);\n            \n            //add the multiplication back\n            if (multiplier)\n                c = c + '*';\n            \n            if (power)\n                power = Settings.POWER_OPERATOR + power;\n\n            //this needs serious rethinking. Must fix\n            if (group === EX && value.charAt(0) === '-')\n                value = inBrackets(value);\n\n            var cv = c + value;\n\n            if (obj.parens)\n                cv = inBrackets(cv);\n\n            return cv + power;\n        }\n        else if (isVector(obj)) {\n            var l = obj.elements.length,\n                    c = [];\n            for (var i = 0; i < l; i++)\n                c.push(obj.elements[i].text(option));\n            return '[' + c.join(',') + ']';\n        }\n        else {\n            try {\n                return obj.toString();\n            }\n            catch (e) {\n                return '';\n            }\n        }\n    }\n    /**\n     * Calculates prime factors for a number\n     * @param {int} num\n     * @returns {Array}\n     */\n\n    function primeFactors(num) {\n        if (isPrime(num))\n            return [num];\n        var l = num, i = 1, factors = [],\n                epsilon = 2.2204460492503130808472633361816E-16;\n        while (i < l) {\n            var quotient = num / i;\n            var whole = Math.floor(quotient);\n            var remainder = quotient - whole;\n            if (remainder <= epsilon && i > 1) {\n                if (PRIMES.indexOf(i) !== -1)\n                    PRIMES[i]=i;\n                factors.push(i);\n                l = whole;\n            }\n            i++;\n        }\n        \n        return factors.sort(function (a, b) {\n            return a - b;\n        });\n    };\n\n//Expression ===================================================================   \n    /** \n     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and \n     * provides the user with some useful functions. If you want to provide the user with extra\n     * library functions then add them to this class's prototype.\n     * @param {Symbol} symbol\n     * @returns {Expression} wraps around the Symbol class\n     */\n    function Expression(symbol) {\n        //we don't want arrays wrapped\n        this.symbol = symbol;\n    }\n    /**\n     * Returns stored expression at index. For first index use 1 not 0.\n     * @param {bool} asType  \n     * @param {Integer} expression_number \n     */\n    Expression.getExpression = function (expression_number, asType) {\n        if (expression_number === 'last' || !expression_number)\n            expression_number = EXPRESSIONS.length;\n        if (expression_number === 'first')\n            expression_number = 1;\n        var index = expression_number - 1,\n                expression = EXPRESSIONS[index],\n                retval = expression ? new Expression(expression) : expression;\n        return retval;\n    };\n    Expression.prototype = {\n        /**\n         * Returns the text representation of the expression\n         * @param {String} opt - option of formatting numbers\n         * @param {Number} n The number of significant figures\n         * @returns {String}\n         */\n        text: function (opt, n) {\n            n = n || 19; \n            opt = opt || 'decimals';\n            if (this.symbol.text_)\n                return this.symbol.text_(opt);\n            \n            return text(this.symbol, opt, undefined, n);\n        },\n        /**\n         * Returns the latex representation of the expression\n         * @param {String} option - option for formatting numbers\n         * @returns {String}\n         */\n        latex: function (option) {\n            if (this.symbol.latex)\n                return this.symbol.latex(option);\n            return LaTeX.latex(this.symbol, option);\n        },\n        valueOf: function () {\n            return this.symbol.valueOf();\n        },\n\n        /**\n         * Evaluates the expression and tries to reduce it to a number if possible.\n         * If an argument is given in the form of %{integer} it will evaluate that expression.\n         * Other than that it will just use it's own text and reparse\n         * @returns {Expression}\n         */\n        evaluate: function () {\n            var first_arg = arguments[0], expression, idx = 1;\n            //Enable getting of expressions using the % so for example %1 should get the first expression\n            if (typeof first_arg === 'string') {\n                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\n            }\n            else if (first_arg instanceof Expression || isSymbol(first_arg)) {\n                expression = first_arg.text();\n            }\n            else {\n                expression = this.symbol.text();\n                idx--;\n            }\n\n            var subs = arguments[idx] || {};\n\n            return new Expression(block('PARSE2NUMBER', function () {\n                return _.parse(expression, subs);\n            }, true));\n        },\n        /**\n         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of \n         * the default alphabetical order\n         * @param vars {Array}\n         */\n        buildFunction: function (vars) {\n            return Build.build(this.symbol, vars);\n        },\n        /**\n         * Checks to see if the expression is just a plain old number\n         * @returns {boolean}\n         */\n        isNumber: function () {\n            return isNumericSymbol(this.symbol);\n        },\n        /**\n         * Checks to see if the expression is infinity\n         * @returns {boolean}\n         */\n        isInfinity: function () {\n            return Math.abs(this.symbol.multiplier) === Infinity;\n        },\n        /**\n         * Returns all the variables in the expression\n         * @returns {Array}\n         */\n        variables: function () {\n            return variables(this.symbol);\n        },\n\n        toString: function () {\n            try {\n                if (isArray(this.symbol))\n                    return '[' + this.symbol.toString() + ']';\n                return this.symbol.toString();\n            }\n            catch (e) {\n                return '';\n            }\n        },\n        //forces the symbol to be returned as a decimal\n        toDecimal: function (prec) {\n            Settings.precision = prec;\n            var dec = text(this.symbol, 'decimals');\n            Settings.precision = undefined;\n            return dec;\n        },\n        //checks to see if the expression is a fraction\n        isFraction: function () {\n            return isFraction(this.symbol);\n        },\n        //checks to see if the symbol is a multivariate polynomial\n        isPolynomial: function () {\n            return this.symbol.isPoly();\n        },\n        //performs a substitution\n        sub: function (symbol, for_symbol) {\n            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\n        },\n        operation: function (otype, symbol) {\n            if (isExpression(symbol))\n                symbol = symbol.symbol;\n            else if (!isSymbol(symbol))\n                symbol = _.parse(symbol);\n            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\n        },\n        add: function (symbol) {\n            return this.operation('add', symbol);\n        },\n        subtract: function (symbol) {\n            return this.operation('subtract', symbol);\n        },\n        multiply: function (symbol) {\n            return this.operation('multiply', symbol);\n        },\n        divide: function (symbol) {\n            return this.operation('divide', symbol);\n        },\n        pow: function (symbol) {\n            return this.operation('pow', symbol);\n        },\n        expand: function () {\n            return new Expression(_.expand(this.symbol));\n        },\n        each: function (callback, i) {\n            if (this.symbol.each)\n                this.symbol.each(callback, i);\n            else if (isArray(this.symbol)) {\n                for (var i = 0; i < this.symbol.length; i++)\n                    callback.call(this.symbol, this.symbol[i], i);\n            }\n            else\n                callback.call(this.symbol);\n        },\n        eq: function (value) {\n            if (!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = _.subtract(this.symbol.clone(), value);\n                return d.equals(0);\n            }\n            catch (e) {\n                return false;\n            }\n            ;\n        },\n        lt: function (value) {\n            if (!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\n                return d.lessThan(0);\n            }\n            catch (e) {\n                return false;\n            }\n            ;\n        },\n        gt: function (value) {\n            if (!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\n                return d.greaterThan(0);\n            }\n            catch (e) {\n                return false;\n            }\n            ;\n        },\n        gte: function (value) {\n            return this.gt(value) || this.eq(value);\n        },\n        lte: function (value) {\n            return this.lt(value) || this.eq(value);\n        },\n\n        numerator: function () {\n            return new Expression(this.symbol.getNum());\n        },\n        denominator: function () {\n            return new Expression(this.symbol.getDenom());\n        },\n        hasFunction: function(f) {\n            return this.symbol.containsFunction(f);\n        },\n        contains: function(variable) {\n            return this.symbol.contains(variable);\n        }\n    };\n    //Aliases\n    Expression.prototype.toTeX = Expression.prototype.latex;\n\n//Scientific ===================================================================  \n    function Scientific(num) {\n        if (!(this instanceof Scientific))\n            return new Scientific(num);\n\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n\n        //remove the sign\n        if (num.startsWith('-')) {\n            this.sign = -1;\n            //remove the sign\n            num = num.substr(1, num.length);\n        } else {\n            this.sign = 1;\n        }\n\n        if (Scientific.isScientific(num)) {\n            this.fromScientific(num);\n        } else {\n            this.convert(num);\n        }\n        return this;\n    }\n\n    Scientific.prototype = {\n        fromScientific: function (num) {\n            var parts = String(num).toLowerCase().split('e');\n            this.coeff = parts[0];\n            this.exponent = parts[1];\n\n            return this;\n        },\n        convert: function (num) {\n            //get wholes and decimals\n            var parts = num.split('.');\n            //make zero go away\n            var w = parts[0] || '';\n            var d = parts[1] || '';\n            //convert zero to blank strings\n            w = Scientific.removeLeadingZeroes(w);\n            d = Scientific.removeTrailingZeroes(d);\n            //find the location of the decimal place which is right after the wholes\n            var dot_location = w.length;\n            //add them together so we can move the dot\n            var n = w + d;\n            //find the next number\n            var zeroes = Scientific.leadingZeroes(n).length;\n            //set the exponent\n            this.exponent = dot_location - (zeroes + 1);\n            //set the coeff but first remove leading zeroes\n            var coeff = Scientific.removeLeadingZeroes(n);\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\n\n            return this;\n        },\n        round: function (num) {\n            var n = this.copy();\n\n            num = Number(num); //cast to number for safety\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n            //we can round based on this\n            if (num === 0)\n                n.coeff = n.coeff.charAt(0);\n            else {\n                //get up to n-1 digits\n                var rounded = this.coeff.substring(0, num + 1);\n                //get the next two\n                var next_two = this.coeff.substring(num + 1, num + 3);\n                //the extra digit\n                var ed = next_two.charAt(0);\n\n                if (next_two.charAt(1) > 4)\n                    ed++;\n\n                n.coeff = rounded + ed;\n            }\n\n            return n;\n        },\n        copy: function () {\n            var n = new Scientific(0);\n            n.coeff = this.coeff;\n            n.exponent = this.exponent;\n            n.sign = this.sign;\n            return n;\n        },\n        toString: function (n) {\n            var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, n);\n            return (this.sign === -1 ? '-' : '') + coeff + 'e' + this.exponent;\n        }\n    };\n\n    Scientific.isScientific = function (num) {\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n    };\n    Scientific.leadingZeroes = function (num) {\n        var match = num.match(/^(0*).*$/);\n        return match ? match[1] : '';\n    };\n    Scientific.removeLeadingZeroes = function (num) {\n        var match = num.match(/^0*(.*)$/);\n        return match ? match[1] : '';\n    };\n\n    Scientific.removeTrailingZeroes = function (num) {\n        var match = num.match(/0*$/);\n        return match ? num.substring(0, num.length - match[0].length) : '';\n    };\n    Scientific.round = function (c, n) {\n        var coeff = nround(c, n);\n        var m = String(coeff).split('.').pop();\n        var d = n - m.length;\n        //if we're asking for more significant figures\n        if (d > 0) {\n            coeff = coeff + (new Array(d + 1).join(0));\n        }\n        return coeff;\n    };\n\n//Scientific ===================================================================\n    /*\n     * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\n     * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\n     */\n\n    function Scientific(num) {\n        if(!(this instanceof Scientific))\n            return new Scientific(num);\n\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n\n        //remove the sign\n        if(num.startsWith('-')) {\n            this.sign = -1;\n            //remove the sign\n            num = num.substr(1, num.length);\n        }\n        else {\n            this.sign = 1;\n        }\n\n        if(Scientific.isScientific(num)) {\n            this.fromScientific(num);\n        }\n        else {\n            this.convert(num);\n        }\n        return this;\n    }\n\n    Scientific.prototype = {\n        fromScientific: function(num) {\n            var parts = String(num).toLowerCase().split('e');\n            this.coeff = parts[0];\n            this.exponent = parts[1];\n\n            return this;\n        },\n        convert: function(num) {\n            //get wholes and decimals\n            var parts = num.split('.');\n            //make zero go away\n            var w = parts[0] || ''; \n            var d = parts[1] || '';\n            //convert zero to blank strings\n            w = Scientific.removeLeadingZeroes(w);\n            d = Scientific.removeTrailingZeroes(d);\n            //find the location of the decimal place which is right after the wholes\n            var dot_location = w.length;\n            //add them together so we can move the dot\n            var n = w+d;\n            //find the next number\n            var zeroes = Scientific.leadingZeroes(n).length;\n            //set the exponent\n            this.exponent = dot_location-(zeroes+1);\n            //set the coeff but first remove leading zeroes\n            var coeff = Scientific.removeLeadingZeroes(n);\n            this.coeff = coeff.charAt(0)+'.'+(coeff.substr(1, coeff.length) || '0');\n\n            return this;\n        },\n        round: function(num) {\n            var n = this.copy();\n\n            num = Number(num); //cast to number for safety\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n            //we can round based on this\n            if(num === 0)\n                n.coeff = n.coeff.charAt(0);\n            else {\n                //get up to n-1 digits\n                var rounded = this.coeff.substring(0, num+1);\n                //get the next two\n                var next_two = this.coeff.substring(num+1, num+3);\n                //the extra digit\n                var ed = next_two.charAt(0);\n\n                if(next_two.charAt(1) > 4)\n                    ed++;\n\n                n.coeff = rounded+ed;\n            }\n\n            return n;\n        },\n        copy: function() {\n            var n = new Scientific(0);\n            n.coeff = this.coeff;\n            n.exponent = this.exponent;\n            n.sign = this.sign;\n            return n;\n        },\n        toString: function(n) {\n            var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, n);\n            return (this.sign === -1 ? '-' : '' )+coeff+'e'+this.exponent;\n        }\n    };\n\n    Scientific.isScientific = function(num) {\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n    };\n    Scientific.leadingZeroes = function(num) {\n        var match = num.match(/^(0*).*$/);\n        return match ? match[1] : '';\n    }; \n    Scientific.removeLeadingZeroes = function(num) {\n      var match = num.match(/^0*(.*)$/);\n      return match ? match[1] : '';\n    };\n\n    Scientific.removeTrailingZeroes = function(num) {\n      var match = num.match(/0*$/);\n      return match ? num.substring(0, num.length-match[0].length) : '';\n    };\n\n\n//Frac =========================================================================    \n    function Frac(n) {\n        if (n instanceof Frac)\n            return n;\n        if (n === undefined)\n            return this;\n        try {\n            if (isInt(n)) {\n                try {\n                    this.num = bigInt(n);\n                    this.den = bigInt(1);\n                }\n                catch (e) {\n                    return Frac.simple(n);\n                }\n            }\n            else {\n                var frac = Fraction.convert(n);\n                this.num = new bigInt(frac[0]);\n                this.den = new bigInt(frac[1]);\n            }\n        }\n        catch (e) {\n            return Frac.simple(n);\n        }\n\n    }\n    //safe to use with negative numbers or other types\n    Frac.create = function (n) {\n        if (n instanceof Frac)\n            return n;\n        n = n.toString();\n        var is_neg = n.charAt(0) === '-'; //check if it's negative\n        if (is_neg)\n            n = n.substr(1, n.length - 1); //remove the sign\n        var frac = new Frac(n);\n        //put the sign back\n        if (is_neg)\n            frac.negate();\n        return frac;\n    };\n    Frac.isFrac = function (o) {\n        return (o instanceof Frac);\n    };\n    Frac.quick = function (n, d) {\n        var frac = new Frac();\n        frac.num = new bigInt(n);\n        frac.den = new bigInt(d);\n        return frac;\n    };\n    Frac.simple = function (n) {\n        var nstr = String(scientificToDecimal(n)),\n                m_dc = nstr.split('.'),\n                num = m_dc.join(''),\n                den = 1,\n                l = (m_dc[1] || '').length;\n        for (var i = 0; i < l; i++)\n            den += '0';\n        var frac = Frac.quick(num, den);\n        return frac.simplify();\n    };\n    Frac.prototype = {\n        multiply: function (m) {\n            if (this.isOne()) {\n                return m.clone();\n            }\n            if (m.isOne()) {\n                return this.clone();\n            }\n\n            var c = this.clone();\n            c.num = c.num.multiply(m.num);\n            c.den = c.den.multiply(m.den);\n\n            return c.simplify();\n        },\n        divide: function (m) {\n            if (m.equals(0))\n                throw new DivisionByZero('Division by zero not allowed!');\n            return this.clone().multiply(m.clone().invert()).simplify();\n        },\n        subtract: function (m) {\n            return this.clone().add(m.clone().neg());\n        },\n        neg: function () {\n            this.num = this.num.multiply(-1);\n            return this;\n        },\n        add: function (m) {\n            var n1 = this.den, n2 = m.den, c = this.clone();\n            var a = c.num, b = m.num;\n            if (n1.equals(n2)) {\n                c.num = a.add(b);\n            }\n            else {\n                c.num = a.multiply(n2).add(b.multiply(n1));\n                c.den = n1.multiply(n2);\n            }\n\n            return c.simplify();\n        },\n        mod: function (m) {\n            var a = this.clone(),\n                    b = m.clone();\n            //make their denominators even and return the mod of their numerators\n            a.num = a.num.multiply(b.den);\n            a.den = a.den.multiply(b.den);\n            b.num = b.num.multiply(this.den);\n            b.den = b.den.multiply(this.den);\n            a.num = a.num.mod(b.num);\n            return a.simplify();\n        },\n        simplify: function () {\n            var gcd = bigInt.gcd(this.num, this.den);\n\n            this.num = this.num.divide(gcd);\n            this.den = this.den.divide(gcd);\n            return this;\n        },\n        clone: function () {\n            var m = new Frac();\n            m.num = new bigInt(this.num);\n            m.den = new bigInt(this.den);\n            return m;\n        },\n        decimal: function (prec) {\n            var sign = this.num.isNegative() ? '-' : '';\n            if (this.num.equals(this.den)) {\n                return '1';\n            }\n            //go plus one for rounding\n            prec = prec || Settings.PRECISION;\n            prec++;\n            var narr = [],\n                    n = this.num.abs(),\n                    d = this.den;\n            for (var i = 0; i < prec; i++) {\n                var w = n.divide(d), //divide out whole\n                        r = n.subtract(w.multiply(d)); //get remainder\n\n                narr.push(w);\n                if (r.equals(0))\n                    break;\n                n = r.times(10); //shift one dec place\n            }\n            var whole = narr.shift();\n            if (narr.length === 0) {\n                return sign + whole.toString();\n            }\n\n            if (i === prec) {\n                var lt = [];\n                //get the last two so we can round it\n                for (var i = 0; i < 2; i++)\n                    lt.unshift(narr.pop());\n                //put the last digit back by rounding the last two\n                narr.push(Math.round(lt.join('.')));\n            }\n\n            var dec = whole.toString() + '.' + narr.join('');\n            return sign + dec;\n        },\n        toDecimal: function (prec) {\n            if (prec || Settings.PRECISION) {\n                return this.decimal(prec);\n            }\n            else \n                return this.num / this.den;\n        },\n        qcompare: function (n) {\n            return [this.num.multiply(n.den), n.num.multiply(this.den)];\n        },\n        equals: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].equals(q[1]);\n        },\n        absEquals: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].abs().equals(q[1]);\n        },\n        //lazy check to be fixed. Sufficient for now but will cause future problems\n        greaterThan: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].gt(q[1]);\n        },\n        gte: function (n) {\n            return this.greaterThan(n) || this.equals(n);\n        },\n        lte: function (n) {\n            return this.lessThan(n) || this.equals(n);\n        },\n        lessThan: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].lt(q[1]);\n        },\n        isInteger: function () {\n            return this.den.equals(1);\n        },\n        negate: function () {\n            this.num = this.num.multiply(-1);\n            return this;\n        },\n        invert: function () {\n            var t = this.den;\n            //why invert 0/1? It'll become 1/0 and that's a lie.\n            if (!this.num.equals(0)) {\n                var isnegative = this.num.isNegative();\n                this.den = this.num.abs();\n                this.num = t;\n                if (isnegative)\n                    this.num = this.num.multiply(-1);\n            }\n\n            return this;\n        },\n        isOne: function () {\n            return this.num.equals(1) && this.den.equals(1);\n        },\n        sign: function () {\n            return this.num.isNegative() ? -1 : 1;\n        },\n        abs: function () {\n            this.num = this.num.abs();\n            return this;\n        },\n        gcd: function (f) {\n            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\n        },\n        toString: function () {\n            return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\n        },\n        valueOf: function () {\n//            if(this.num == 24) throw new Error(999)\n            if (Settings.USE_BIG)\n                return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\n            return this.num / this.den;\n        },\n        isNegative: function () {\n            return this.toDecimal() < 0;\n        }\n    };\n\n//Symbol =======================================================================\n    /**\n     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group. \n     * All symbols except for \"numbers (group N)\" have a power. \n     * @class Primary data type for the Parser. \n     * @param {String} obj \n     * @returns {Symbol}\n     */\n    function Symbol(obj) {\n        var isInfinity = obj === 'Infinity';\n        //this enables the class to be instantiated without the new operator\n        if (!(this instanceof Symbol)) {\n            return new Symbol(obj);\n        }\n        ;\n        //define numeric symbols\n        if (/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj)) {\n            this.group = N;\n            this.value = CONST_HASH;\n            this.multiplier = new Frac(obj);\n        }\n        //define symbolic symbols\n        else {\n            this.group = S;\n            validateName(obj);\n            this.value = obj;\n            this.multiplier = new Frac(1);\n            this.imaginary = obj === Settings.IMAGINARY;\n            this.isInfinity = isInfinity;\n        }\n\n        //As of 6.0.0 we switched to infinite precision so all objects have a power\n        //Although this is still redundant in constants, it simplifies the logic in\n        //other parts so we'll keep it\n        this.power = new Frac(1);\n\n        // Added to silence the strict warning.\n        return this;\n    }\n    /**\n     * Returns vanilla imaginary symbol\n     * @returns {Symbol}\n     */\n    Symbol.imaginary = function () {\n        var s = new Symbol(Settings.IMAGINARY);\n        s.imaginary = true;\n        return s;\n    };\n    /**\n     * Return nerdamer's representation of Infinity\n     * @param {int} negative -1 to return negative infinity \n     * @returns {Symbol} \n     */\n    Symbol.infinity = function (negative) {\n        var v = new Symbol('Infinity');\n        if (negative === -1)\n            v.negate();\n        return v;\n    };\n    Symbol.shell = function (group, value) {\n        var symbol = new Symbol(value);\n        symbol.group = group;\n        symbol.symbols = {};\n        symbol.length = 0;\n        return symbol;\n    };\n    //sqrt(x) -> x^(1/2)\n    Symbol.unwrapSQRT = function (symbol, all) {\n        var p = symbol.power;\n        if (symbol.fname === SQRT && (symbol.isLinear() || all)) {\n            var t = symbol.args[0].clone();\n            t.power = t.power.multiply(new Frac(1 / 2));\n            t.multiplier = t.multiplier.multiply(symbol.multiplier);\n            symbol = t;\n            if (all)\n                symbol.power = p.multiply(new Frac(1 / 2));\n        }\n\n        return symbol;\n    };\n    Symbol.hyp = function (a, b) {\n        a = a || new Symbol(0);\n        b = b || new Symbol(0);\n        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\n    };\n    //converts to polar form array\n    Symbol.toPolarFormArray = function (symbol) {\n        var re, im, r, theta;\n        re = symbol.realpart();\n        im = symbol.imagpart();\n        r = Symbol.hyp(re, im);\n        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\n        return [r, theta];\n    };\n    //removes parentheses\n    Symbol.unwrapPARENS = function (symbol) {\n        if (symbol.fname === '') {\n            var r = symbol.args[0];\n            r.power = r.power.multiply(symbol.power);\n            r.multiplier = r.multiplier.multiply(symbol.multiplier);\n            if (symbol.fname === '')\n                return Symbol.unwrapPARENS(r);\n            return r;\n        }\n        return symbol;\n    };\n    //quickly creates a Symbol\n    Symbol.create = function (value, power) {\n        power = power === undefined ? 1 : power;\n        return _.parse('(' + value + ')^(' + power + ')');\n    };\n    Symbol.prototype = {\n        isSimple: function () {\n            return this.power.equals(1) && this.multiplier.equals(1);\n        },\n        //returns a clone.\n        powSimp: function () {\n            if (this.group === CB) {\n                var powers = [],\n                        sign = this.multiplier.sign();\n                this.each(function (x) {\n                    var p = x.power;\n                    //why waste time if I can't do anything anyway\n                    if (isSymbol(p) || p.equals(1))\n                        return this.clone();\n                    powers.push(p);\n                });\n                var min = new Frac(arrayMin(powers));\n\n                //handle the coefficient\n                //handle the multiplier\n                var sign = this.multiplier.sign(),\n                        m = this.multiplier.clone().abs(),\n                        mfactors = Math2.ifactor(m);\n                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\n                //we can then reduce it to 2*3*5*(15)^2 \n                var out_ = new Frac(1);\n                var in_ = new Frac(1);\n\n                for (var x in mfactors) {\n                    var n = new Frac(mfactors[x]);\n                    if (!n.lessThan(min)) {\n                        n = n.divide(min).subtract(new Frac(1));\n                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\n                    }\n\n                    out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\n                }\n                var t = new Symbol(in_);\n                this.each(function (x) {\n                    x = x.clone();\n                    x.power = x.power.divide(min);\n                    t = _.multiply(t, x);\n                });\n\n                var xt = _.symfunction(PARENTHESIS, [t]);\n                xt.power = min;\n                xt.multiplier = sign < 0 ? out_.negate() : out_;\n\n                return xt;\n            }\n            return this.clone();\n        },\n        /**\n         * Checks to see if two functions are of equal value\n         * @param {Symbol} symbol\n         */\n        equals: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.value === symbol.value && this.power.equals(symbol.power)\n                    && this.multiplier.equals(symbol.multiplier)\n                    && this.group === symbol.group;\n        },\n        abs: function() {\n            var e = this.clone();\n            e.multiplier.abs();\n            return e;\n        },\n        // Greater than\n        gt: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n        },\n        // Greater than\n        gte: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.equals(symbol) ||\n                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n        },\n        // Less than\n        lt: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n        },\n        // Less than\n        lte: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.equals(symbol) ||\n                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n        },\n        /**\n         * Because nerdamer doesn't group symbols by polynomials but \n         * rather a custom grouping method, this has to be\n         * reinserted in order to make use of most algorithms. This function\n         * checks if the symbol meets the criteria of a polynomial.\n         * @param {bool} multivariate\n         * @returns {boolean}\n         */\n        isPoly: function (multivariate) {\n            var g = this.group,\n                    p = this.power;\n            //the power must be a integer so fail if it's not\n            if (!isInt(p) || p < 0)\n                return false;\n            //constants and first orders\n            if (g === N || g === S || this.isConstant(true))\n                return true;\n            var vars = variables(this);\n            if (g === CB && vars.length === 1) {\n                //the variable is assumed the only one that was found\n                var v = vars[0];\n                //if no variable then guess what!?!? We're done!!! We have a polynomial.\n                if (!v)\n                    return true;\n                for (var x in this.symbols) {\n                    var sym = this.symbols[x];\n                    //sqrt(x)\n                    if (sym.group === FN && !sym.args[0].isConstant())\n                        return false;\n                    if (!sym.contains(v) && !sym.isConstant(true))\n                        return false;\n                }\n                return true;\n            }\n            //PL groups. These only fail if a power is not an int\n            //this should handle cases such as x^2*t\n            if (this.isComposite() || g === CB && multivariate) {\n                //fail if we're not checking for multivariate polynomials\n                if (!multivariate && vars.length > 1)\n                    return false;\n                //loop though the symbols and check if they qualify\n                for (var x in this.symbols) {\n                    //we've already the symbols if we're not checking for multivariates at this point\n                    //so we check the sub-symbols\n                    if (!this.symbols[x].isPoly(multivariate))\n                        return false;\n                }\n                return true;\n            }\n            else\n                return false;\n\n            /*\n             //all tests must have passed so we must be dealing with a polynomial\n             return true;\n             */\n        },\n        //removes the requested variable from the symbol and returns the remainder\n        stripVar: function (x, exclude_x) {\n            var retval;\n            if ((this.group === PL || this.group === S) && this.value === x)\n                retval = new Symbol(exclude_x ? 0 : this.multiplier);\n            else if (this.group === CB && this.isLinear()) {\n                retval = new Symbol(1);\n                this.each(function (s) {\n                    if (!s.contains(x, true))\n                        retval = _.multiply(retval, s.clone());\n                });\n                retval.multiplier = retval.multiplier.multiply(this.multiplier);\n            }\n            else if (this.group === CP && !this.isLinear()) {\n                retval = new Symbol(this.multiplier);\n            }\n            else if (this.group === CP && this.isLinear()) {\n                retval = new Symbol(0);\n                this.each(function (s) {\n                    if (!s.contains(x)) {\n                        var t = s.clone();\n                        t.multiplier = t.multiplier.multiply(this.multiplier);\n                        retval = _.add(retval, t);\n                    }\n                });\n                //BIG TODO!!! It doesn't make much sense\n                if (retval.equals(0))\n                    retval = new Symbol(this.multiplier);\n            }\n            else if (this.group === EX && this.power.contains(x, true)) {\n                retval = new Symbol(this.multiplier);\n            }\n            else if (this.group === FN && this.contains(x)) {\n                retval = new Symbol(this.multiplier);\n            }\n            else\n                //wth? This should technically be the multiplier. \n                //Unfortunately this method wasn't very well thought out :`(.   \n                //should be: retval = new Symbol(this.multiplier);\n                //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\n                //this will break a bunch of unit tests so be ready to for the long haul\n                retval = this.clone();\n\n\n            return retval;\n        },\n        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a]. \n        toArray: function (v, arr) {\n            arr = arr || {\n                arr: [],\n                add: function (x, idx) {\n                    var e = this.arr[idx];\n                    this.arr[idx] = e ? _.add(e, x) : x;\n                }\n            };\n            var g = this.group;\n\n            if (g === S && this.contains(v)) {\n                arr.add(new Symbol(this.multiplier), this.power);\n            }\n            else if (g === CB) {\n                var a = this.stripVar(v),\n                        x = _.divide(this.clone(), a.clone());\n                var p = x.isConstant() ? 0 : x.power;\n                arr.add(a, p);\n            }\n            else if (g === PL && this.value === v) {\n                this.each(function (x, p) {\n                    arr.add(x.stripVar(v), p);\n                });\n            }\n            else if (g === CP) {\n                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\n                //each case is handled above\n                this.each(function (x) {\n                    x.toArray(v, arr);\n                });\n            }\n            else if (this.contains(v)) {\n                throw new NerdamerTypeError('Cannot convert to array! Exiting');\n            }\n            else {\n                arr.add(this.clone(), 0); //it's just a constant wrt to v\n            }\n            //fill the holes\n            arr = arr.arr; //keep only the array since we don't need the object anymore\n            for (var i = 0; i < arr.length; i++)\n                if (!arr[i])\n                    arr[i] = new Symbol(0);\n            return arr;\n        },\n        //checks to see if a symbol contans a function\n        hasFunc: function (v) {\n            var fn_group = this.group === FN || this.group === EX;\n            if (fn_group && !v || fn_group && this.contains(v))\n                return true;\n            if (this.symbols) {\n                for (var x in this.symbols) {\n                    if (this.symbols[x].hasFunc(v))\n                        return true;\n                }\n            }\n            return false;\n        },\n        sub: function (a, b) {\n            a = !isSymbol(a) ? _.parse(a) : a.clone();\n            b = !isSymbol(b) ? _.parse(b) : b.clone();\n            if (a.group === N || a.group === P)\n                err('Cannot substitute a number. Must be a variable');\n            var same_pow = false,\n                    a_is_unit_multiplier = a.multiplier.equals(1),\n                    m = this.multiplier.clone(),\n                    retval;\n            /* \n             * In order to make the substitution the bases have to first match take\n             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\n             * In both cases the first condition is that the bases match so we begin there\n             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\n             */\n            if (this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\n                //we cleared the first hurdle but a subsitution may not be possible just yet\n                if (a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\n                    if (a.isLinear()) {\n                        retval = b;\n                    }\n                    else if (a.power.equals(this.power)) {\n                        retval = b;\n                        same_pow = true;\n                    }\n                    if (a.multiplier.equals(this.multiplier))\n                        m = new Frac(1);\n                }\n            }\n            //the next thing is to handle CB\n            else if (this.group === CB || this.previousGroup === CB) {\n                retval = new Symbol(1);\n                this.each(function (x) {\n                    retval = _.multiply(retval, x.sub(a, b));\n                });\n            }\n            else if (this.isComposite()) {\n                if (a.isComposite() && this.isComposite() && this.isLinear() && a.isLinear()) {\n                    var find = function (stack, needle) {\n                        for (var x in stack.symbols) {\n                            var sym = stack.symbols[x];\n                            //if the symbol equals the needle or it's within the sub-symbols we're done\n                            if (sym.isComposite() && find(sym, needle) || sym.equals(needle))\n                                return true;\n                        }\n                        return false;\n                    };\n                    //go fish\n                    for (var x in a.symbols) {\n                        if (!find(this, a.symbols[x]))\n                            return this.clone();\n                    }\n                    retval = _.add(_.subtract(this.clone(), a), b);\n                }\n                else {\n                    retval = new Symbol(0);\n                    this.each(function (x) {\n                        retval = _.add(retval, x.sub(a, b));\n                    });\n                }\n            }\n            else if (this.group === EX) {\n                // the parsed value could be a function so parse and sub\n                retval = _.parse(this.value).sub(a, b);\n            }\n            else if (this.group === FN) {\n                var nargs = [];\n                for (var i = 0; i < this.args.length; i++) {\n                    var arg = this.args[i];\n                    if (!isSymbol(arg))\n                        arg = _.parse(arg);\n                    nargs.push(arg.sub(a, b));\n                }\n                retval = _.symfunction(this.fname, nargs);\n            }\n            //if we did manage a substitution\n            if (retval) {\n                if (!same_pow) {\n                    //substitute the power\n                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\n                    //now raise the symbol to that power\n                    retval = _.pow(retval, p);\n                }\n\n                //transfer the multiplier\n                retval.multiplier = retval.multiplier.multiply(m);\n                //done\n                return retval;\n            }\n            //if all else fails\n            return this.clone();\n        },\n        isMonomial: function () {\n            if (this.group === S)\n                return true;\n            if (this.group === CB) {\n                for (var x in this.symbols)\n                    if (this.symbols[x].group !== S)\n                        return false;\n            }\n            else\n                return false;\n            return true;\n        },\n        isPi: function () {\n            return this.group === S && this.value === 'pi';\n        },\n        sign: function () {\n            return this.multiplier.sign();\n        },\n        isE: function () {\n            return this.value === 'e';\n        },\n        isSQRT: function () {\n            return this.fname === SQRT;\n        },\n        isConstant: function (check_all, check_symbols) {\n            if(check_symbols && this.group === CB) {\n                for(var x in this.symbols) {\n                    if(this.symbols[x].isConstant(true))\n                        return true;\n                }\n            }\n            \n            if (check_all === 'all' && (this.isPi() || this.isE()))\n                return true;\n            \n            if (check_all && this.group === FN) {\n                for (var i = 0; i < this.args.length; i++) {\n                    if (!this.args[i].isConstant(check_all))\n                        return false;\n                }\n                return true;\n            }\n            \n            if(check_all)\n                return isNumericSymbol(this);\n            return this.value === CONST_HASH;\n        },\n        //the symbols is imaginary if \n        //1. n*i\n        //2. a+b*i\n        //3. a*i\n        isImaginary: function () {\n            if (this.imaginary)\n                return true;\n            else if (this.symbols) {\n                for (var x in this.symbols)\n                    if (this.symbols[x].isImaginary())\n                        return true;\n            }\n            return false;\n        },\n        /**\n         * Returns the real part of a symbol\n         * @returns {Symbol}\n         */\n        realpart: function () {\n            if (this.isConstant()) {\n                return this.clone();\n            }\n            else if (this.imaginary)\n                return new Symbol(0);\n            else if (this.isComposite()) {\n                var retval = new Symbol(0);\n                this.each(function (x) {\n                    retval = _.add(retval, x.realpart());\n                });\n                return retval;\n            }\n            else if (this.isImaginary())\n                return new Symbol(0);\n            return this.clone();\n        },\n        /*\n         * Return imaginary part of a symbol\n         * @returns {Symbol}\n         */\n        imagpart: function () {\n            if (this.group === S && this.isImaginary())\n                return new Symbol(this.multiplier);\n            if (this.isComposite()) {\n                var retval = new Symbol(0);\n                this.each(function (x) {\n                    retval = _.add(retval, x.imagpart());\n                });\n                return retval;\n            }\n            if (this.group === CB)\n                return this.stripVar(Settings.IMAGINARY);\n            return new Symbol(0);\n        },\n        isInteger: function () {\n            return this.isConstant() && this.multiplier.isInteger();\n        },\n        isLinear: function (wrt) {\n            if (wrt) {\n                if (this.isConstant())\n                    return true;\n                if (this.group === S) {\n                    if (this.value === wrt)\n                        return this.power.equals(1);\n                    else\n                        return true;\n                }\n\n                if (this.isComposite() && this.power.equals(1)) {\n                    for (var x in this.symbols) {\n                        if (!this.symbols[x].isLinear(wrt))\n                            return false;\n                    }\n                    return true;\n                }\n\n                if (this.group === CB && this.symbols[wrt])\n                    return this.symbols[wrt].isLinear(wrt);\n                return false;\n            }\n            else\n                return this.power.equals(1);\n        },\n        /**\n         * Checks to see if a symbol has a function by a specified name or within a specified list\n         * @param {String|String[]} names\n         * @returns {Boolean}\n         */\n        containsFunction: function (names) {\n            if (typeof names === 'string')\n                names = [names];\n            if (this.group === FN && names.indexOf(this.fname) !== -1)\n                return true;\n            if (this.symbols) {\n                for (var x in this.symbols) {\n                    if (this.symbols[x].containsFunction(names))\n                        return true;\n                }\n            }\n            return false;\n        },\n        multiplyPower: function (p2) {\n            //leave out 1\n            if (this.group === N && this.multiplier.equals(1))\n                return this;\n\n            var p1 = this.power;\n\n            if (this.group !== EX && p2.group === N) {\n                var p = p2.multiplier;\n                if (this.group === N && !p.isInteger()) {\n                    this.convert(P);\n                }\n\n                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\n\n                if (this.group === P && isInt(this.power)) {\n                    //bring it back to an N\n                    this.value = Math.pow(this.value, this.power);\n                    this.toLinear();\n                    this.convert(N);\n                }\n            }\n            else {\n                if (this.group !== EX) {\n                    p1 = new Symbol(p1);\n                    this.convert(EX);\n                }\n                this.power = _.multiply(p1, p2);\n            }\n\n            return this;\n        },\n        setPower: function (p, retainSign) {\n            //leave out 1\n            if (this.group === N && this.multiplier.equals(1))\n                return this;\n            if (this.group === EX && !isSymbol(p)) {\n                this.group = this.previousGroup;\n                delete this.previousGroup;\n                if (this.group === N) {\n                    this.multiplier = new Frac(this.value);\n                    this.value = CONST_HASH;\n                }\n                else\n                    this.power = p;\n            }\n            else {\n                var isSymbolic = false;\n                if (isSymbol(p)) {\n                    if (p.group === N) {\n                        //p should be the multiplier instead\n                        p = p.multiplier;\n\n                    }\n                    else {\n                        isSymbolic = true;\n                    }\n                }\n                var group = isSymbolic ? EX : P;\n                this.power = p;\n                if (this.group === N && group)\n                    this.convert(group, retainSign);\n            }\n\n            return this;\n        },\n        /**\n         * Checks to see if symbol is located in the denominator\n         * @returns {boolean}\n         */\n        isInverse: function () {\n            if (this.group === EX)\n                return (this.power.multiplier.lessThan(0));\n            return this.power < 0;\n        },\n        /**\n         * Make a duplicate of a symbol by copying a predefined list of items. \n         * The name 'copy' would probably be a more appropriate name.\n         * to a new symbol\n         * @param {Symbol} c \n         * @returns {Symbol}\n         */\n        clone: function (c) {\n            var clone = c || new Symbol(0),\n                    //list of properties excluding power as this may be a symbol and would also need to be a clone.\n                    properties = [\n                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\n                    l = properties.length, i;\n            if (this.symbols) {\n                clone.symbols = {};\n                for (var x in this.symbols) {\n                    clone.symbols[x] = this.symbols[x].clone();\n                }\n            }\n\n            for (i = 0; i < l; i++) {\n                if (this[properties[i]] !== undefined) {\n                    clone[properties[i]] = this[properties[i]];\n                }\n            }\n\n            clone.power = this.power.clone();\n            clone.multiplier = this.multiplier.clone();\n            //add back the flag to track if this symbol is a conversion symbol\n            if (this.isConversion)\n                clone.isConversion = this.isConversion;\n\n            if (this.isUnit)\n                clone.isUnit = this.isUnit;\n\n            return clone;\n        },\n        /**\n         * Converts a symbol multiplier to one.\n         * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\n         * @returns {Symbol}\n         */\n        toUnitMultiplier: function (keepSign) {\n            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\n            this.multiplier.den = new bigInt(1);\n            return this;\n        },\n        /**\n         * Converts a Symbol's power to one.\n         * @returns {Symbol}\n         */\n        toLinear: function () {\n            this.setPower(new Frac(1));\n            return this;\n        },\n        /**\n         * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\n         * @param {Function} fn\n         * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well \n         */\n        each: function (fn, deep) {\n            if (!this.symbols) {\n                fn.call(this, this, this.value);\n            }\n            else {\n                for (var x in this.symbols) {\n                    var sym = this.symbols[x];\n                    if (sym.group === PL && deep) {\n                        for (var y in sym.symbols) {\n                            fn.call(x, sym.symbols[y], y);\n                        }\n                    }\n                    else\n                        fn.call(this, sym, x);\n                }\n            }\n        },\n        /**\n         * A numeric value to be returned for Javascript. It will try to \n         * return a number as far a possible but in case of a pure symbolic\n         * symbol it will just return its text representation\n         * @returns {String|Number}\n         */\n        valueOf: function () {\n            if (this.group === N)\n                return this.multiplier.valueOf();\n            else if (this.power === 0) {\n                return 1;\n            }\n            else if (this.multiplier === 0) {\n                return 0;\n            }\n            else {\n                return text(this, 'decimals');\n            }\n        },\n        /**\n         * Checks to see if a symbols has a particular variable within it.\n         * Pass in true as second argument to include the power of exponentials\n         * which aren't check by default.\n         * @example var s = _.parse('x+y+z'); s.contains('y');\n         * //returns true\n         * @param {any} variable \n         * @param {boolean} all \n         * @returns {boolean}\n         */\n        contains: function (variable, all) {\n            //contains expects a string\n            variable = String(variable);\n            var g = this.group;\n            if (this.value === variable)\n                return true;\n            if (this.symbols) {\n                for (var x in this.symbols) {\n                    if (this.symbols[x].contains(variable, all))\n                        return true;\n                }\n            }\n            if (g === FN || this.previousGroup === FN) {\n                for (var i = 0; i < this.args.length; i++) {\n                    if (this.args[i].contains(variable, all))\n                        return true;\n                }\n            }\n\n            if (g === EX) {\n                //exit only if it does\n                if (all && this.power.contains(variable, all)) {\n                    return true;\n                }\n                if (this.value === variable)\n                    return true;\n\n            }\n\n            return this.value === variable;\n        },\n        /**\n         * Negates a symbols\n         * @returns {boolean}\n         */\n        negate: function () {\n            this.multiplier.negate();\n            if (this.group === CP || this.group === PL)\n                this.distributeMultiplier();\n            return this;\n        },\n        /**\n         * Inverts a symbol\n         * @param {boolean} power_only\n         * @param {boolean} all\n         * @returns {boolean}\n         */\n        invert: function (power_only, all) {\n            //invert the multiplier\n            if (!power_only)\n                this.multiplier = this.multiplier.invert();\n            //invert the rest\n            if (isSymbol(this.power)) {\n                this.power.negate();\n            }\n            else if (this.group === CB && all) {\n                this.each(function (x) {\n                    return x.invert();\n                });\n            }\n            else {\n                if (this.power && this.group !== N)\n                    this.power.negate();\n            }\n            return this;\n        },\n        /**\n         * Symbols of group CP or PL may have the multiplier being carried by \n         * the top level symbol at any given time e.g. 2*(x+y+z). This is \n         * convenient in many cases, however in some cases the multiplier needs\n         * to be carried individually e.g. 2*x+2*y+2*z.\n         * This method distributes the multiplier over the entire symbol\n         * @param {boolean} all\n         * @returns {Symbol}\n         */\n        distributeMultiplier: function (all) {\n            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\n            if (this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\n                for (var x in this.symbols) {\n                    var s = this.symbols[x];\n                    s.multiplier = s.multiplier.multiply(this.multiplier);\n                    s.distributeMultiplier();\n                }\n                this.toUnitMultiplier();\n            }\n\n            return this;\n        },\n        /**\n         * This method expands the exponent over the entire symbol just like\n         * distributeMultiplier\n         * @returns {Symbol}\n         */\n        distributeExponent: function () {\n            if (!this.power.equals(1)) {\n                var p = this.power;\n                for (var x in this.symbols) {\n                    var s = this.symbols[x];\n                    if (s.group === EX) {\n                        s.power = _.multiply(s.power, new Symbol(p));\n                    }\n                    else {\n                        this.symbols[x].power = this.symbols[x].power.multiply(p);\n                    }\n                }\n                this.toLinear();\n            }\n            return this;\n        },\n        /**\n         * This method will attempt to up-convert or down-convert one symbol\n         * from one group to another. Not all symbols are convertible from one \n         * group to another however. In that case the symbol will remain \n         * unchanged.\n         * @param {int} group\n         * @param {string} imaginary \n         */\n        convert: function (group, imaginary) {\n            if (group > FN) {\n                //make a clone of this symbol;\n                var cp = this.clone();\n\n                //attach a symbols object and upgrade the group\n                this.symbols = {};\n\n                if (group === CB) {\n                    //symbol of group CB hold symbols bound together through multiplication\n                    //because of commutativity this multiplier can technically be anywhere within the group\n                    //to keep track of it however it's easier to always have the top level carry it\n                    cp.toUnitMultiplier();\n                }\n                else {\n                    //reset the symbol\n                    this.toUnitMultiplier();\n                }\n\n                if (this.group === FN) {\n                    cp.args = this.args;\n                    delete this.args;\n                    delete this.fname;\n                }\n\n                //the symbol may originate from the symbol i but this property no longer holds true\n                //after copying\n                if (this.isImgSymbol)\n                    delete this.isImgSymbol;\n\n                this.toLinear();\n                //attach a clone of this symbol to the symbols object using its proper key\n                this.symbols[cp.keyForGroup(group)] = cp;\n                this.group = group;\n                //objects by default don't have a length property. However, in order to keep track of the number\n                //of sub-symbols we have to impliment our own.\n                this.length = 1;\n            }\n            else if (group === EX) {\n                //1^x is just one so check and make sure\n                if (!(this.group === N && this.multiplier.equals(1))) {\n                    if (this.group !== EX)\n                        this.previousGroup = this.group;\n                    if (this.group === N) {\n                        this.value = this.multiplier.num.toString();\n                        this.toUnitMultiplier();\n                    }\n                    //update the hash to reflect the accurate hash\n                    else\n                        this.value = text(this, 'hash');\n\n                    this.group = EX;\n                }\n            }\n            else if (group === N) {\n                var m = this.multiplier.toDecimal();\n                if (this.symbols)\n                    this.symbols = undefined;\n                new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\n            }\n            else if (group === P && this.group === N) {\n                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\n                this.toUnitMultiplier(!imaginary);\n                this.group = P;\n            }\n            return this;\n        },\n        /**\n         * This method is one of the principal methods to make it all possible.\n         * It performs cleanup and prep operations whenever a symbols is \n         * inserted. If the symbols results in a 1 in a CB (multiplication) \n         * group for instance it will remove the redundant symbol. Similarly\n         * in a symbol of group PL or CP (symbols glued by multiplication) it\n         * will remove any dangling zeroes from the symbol. It will also \n         * up-convert or down-convert a symbol if it detects that it's \n         * incorrectly grouped. It should be noted that this method is not\n         * called directly but rather by the 'attach' method for addition groups\n         * and the 'combine' method for multiplication groups.\n         * @param {Symbol} symbol\n         * @param {String} action\n         */\n        insert: function (symbol, action) {\n            //this check can be removed but saves a lot of aggravation when trying to hunt down\n            //a bug. If left, you will instantly know that the error can only be between 2 symbols.\n            if (!isSymbol(symbol))\n                err('Object ' + symbol + ' is not of type Symbol!');\n            if (this.symbols) {\n                var group = this.group;\n                if (group > FN) {\n                    var key = symbol.keyForGroup(group);\n                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\n                    if (action === 'add') {\n                        var hash = key;\n                        if (existing) {\n                            //add them together using the parser\n                            this.symbols[hash] = _.add(existing, symbol);\n                            //if the addition resulted in a zero multiplier remove it\n                            if (this.symbols[hash].multiplier.equals(0)) {\n                                delete this.symbols[hash];\n                                this.length--;\n\n                                if (this.length === 0) {\n                                    this.convert(N);\n                                    this.multiplier = new Frac(0);\n                                }\n                            }\n                        }\n                        else {\n                            this.symbols[key] = symbol;\n                            this.length++;\n                        }\n                    }\n                    else {\n                        //check if this is of group P and unwrap before inserting\n                        if (symbol.group === P && isInt(symbol.power)) {\n                            symbol.convert(N);\n                        }\n\n                        //transfer the multiplier to the upper symbol but only if the symbol numeric\n                        if (symbol.group !== EX) {\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                            symbol.toUnitMultiplier();\n                        }\n                        else {\n                            symbol.parens = symbol.multiplier.lessThan(0);\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\n                            symbol.toUnitMultiplier(true);\n                        }\n\n                        if (existing) {\n                            //remove because the symbol may have changed\n                            symbol = _.multiply(remove(this.symbols, key), symbol);\n                            if (symbol.isConstant()) {\n                                this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\n                            }\n\n                            this.length--;\n                            //clean up\n                        }\n\n                        //don't insert the symbol if it's 1\n                        if (!symbol.isOne(true)) {\n                            this.symbols[key] = symbol;\n                            this.length++;\n                        }\n                        else if (symbol.multiplier.lessThan(0)) {\n                            this.negate(); //put back the sign\n                        }\n                    }\n\n                    //clean up\n                    if (this.length === 0)\n                        this.convert(N);\n                    //update the hash\n                    if (this.group === CP || this.group === CB) {\n                        this.updateHash();\n                    }\n                }\n            }\n\n            return this;\n        },\n        //the insert method for addition\n        attach: function (symbol) {\n            if (isArray(symbol)) {\n                for (var i = 0; i < symbol.length; i++)\n                    this.insert(symbol[i], 'add');\n                return this;\n            }\n            return this.insert(symbol, 'add');\n        },\n        //the insert method for multiplication\n        combine: function (symbol) {\n            if (isArray(symbol)) {\n                for (var i = 0; i < symbol.length; i++)\n                    this.insert(symbol[i], 'multiply');\n                return this;\n            }\n            return this.insert(symbol, 'multiply');\n        },\n        /**\n         * This method should be called after any major \"surgery\" on a symbol.\n         * It updates the hash of the symbol for example if the fname of a \n         * function has changed it will update the hash of the symbol.\n         */\n        updateHash: function () {\n            if (this.group === N)\n                return;\n\n            if (this.group === FN) {\n                var contents = '',\n                        args = this.args,\n                        is_parens = this.fname === PARENTHESIS;\n                for (var i = 0; i < args.length; i++)\n                    contents += (i === 0 ? '' : ',') + text(args[i]);\n                var fn_name = is_parens ? '' : this.fname;\n                this.value = fn_name + (is_parens ? contents : inBrackets(contents));\n            }\n            else if (!(this.group === S || this.group === PL)) {\n                this.value = text(this, 'hash');\n            }\n        },\n        /**\n         * this function defines how every group in stored within a group of \n         * higher order think of it as the switchboard for the library. It \n         * defines the hashes for symbols. \n         * @param {int} group\n         */\n        keyForGroup: function (group) {\n            var g = this.group;\n            var key;\n\n            if (g === N) {\n                key = this.value;\n            }\n            else if (g === S || g === P) {\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = this.value;\n            }\n            else if (g === FN) {\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = text(this, 'hash');\n            }\n            else if (g === PL) {\n                //if the order is reversed then we'll assume multiplication\n                //TODO: possible future dilemma\n                if (group === CB)\n                    key = text(this, 'hash');\n                else if (group === CP) {\n                    if (this.power.equals(1))\n                        key = this.value;\n                    else\n                        key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\n                }\n                else if (group === PL)\n                    key = this.power.toString();\n                else\n                    key = this.value;\n                return key;\n            }\n            else if (g === CP) {\n                if (group === CP) {\n                    key = text(this, 'hash');\n                }\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = this.value;\n            }\n            else if (g === CB) {\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = text(this, 'hash');\n            }\n            else if (g === EX) {\n                if (group === PL)\n                    key = text(this.power);\n                else\n                    key = text(this, 'hash');\n            }\n\n            return key;\n        },\n        /** \n         * Symbols are typically stored in an object which works fine for most\n         * cases but presents a problem when the order of the symbols makes\n         * a difference. This function simply collects all the symbols and \n         * returns them as an array. If a function is supplied then that \n         * function is called on every symbol contained within the object.\n         * @param {Function} fn\n         * @param {Object} opt\n         * @param {Function} sort_fn\n         * @@param {Boolean} expand_symbol \n         * @returns {Array}\n         */\n        collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\n            var collected = [];\n            if (!this.symbols)\n                collected.push(this);\n            else {\n                for (var x in this.symbols) {\n                    var symbol = this.symbols[x];\n                    if (expand_symbol && (symbol.group === PL || symbol.group === CP)) {\n                        collected = collected.concat(symbol.collectSymbols());\n                    }\n                    else\n                        collected.push(fn ? fn(symbol, opt) : symbol);\n                }\n            }\n            if (sort_fn === null)\n                sort_fn = undefined; //WTF Firefox? Seriously?\n\n            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency\n        },\n        /**\n         * Returns the latex representation of the symbol\n         * @param {String} option\n         * @returns {String}\n         */\n        latex: function (option) {\n            return LaTeX.latex(this, option);\n        },\n        /**\n         * Returns the text representation of a symbol\n         * @param {String} option\n         * @returns {String}\n         */\n        text: function (option) {\n            return text(this, option);\n        },\n        /**\n         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\n         */\n        isOne: function (abs) {\n            var f = abs ? 'absEquals' : 'equals';\n            if (this.group === N)\n                return this.multiplier[f](1);\n            else\n                return this.power.equals(0);\n        },\n        isComposite: function () {\n            var g = this.group,\n                    pg = this.previousGroup;\n            return g === CP || g === PL || pg === PL || pg === CP;\n        },\n        isCombination: function () {\n            var g = this.group,\n                    pg = this.previousGroup;\n            return g === CB || pg === CB;\n        },\n        lessThan: function (n) {\n            return this.multiplier.lessThan(n);\n        },\n        greaterThan: function (n) {\n            return this.multiplier.greaterThan(n);\n        },\n        /**\n         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\n         * with other classes the symbol is either the denominator or not. \n         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\n         * denominator and has to be found by looking at the actual symbols themselves.\n         */\n        getDenom: function () {\n            var retval, symbol;\n            symbol = this.clone();\n            //e.g. 1/(x*(x+1))\n            if (this.group === CB && this.power.lessThan(0))\n                symbol = _.expand(symbol);\n\n            //if the symbol already is the denominator... DONE!!!\n            if (symbol.power.lessThan(0)) {\n                var d = _.parse(symbol.multiplier.den);\n                retval = symbol.toUnitMultiplier();\n                retval.power.negate();\n                retval = _.multiply(d, retval); //put back the coeff\n            }\n            else if (symbol.group === CB) {\n                retval = _.parse(symbol.multiplier.den);\n                for (var x in symbol.symbols)\n                    if (symbol.symbols[x].power < 0)\n                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());\n            }\n            else\n                retval = _.parse(symbol.multiplier.den);\n            return retval;\n        },\n        getNum: function () {\n            var retval, symbol;\n            symbol = this.clone();\n            //e.g. 1/(x*(x+1))\n            if (symbol.group === CB && symbol.power.lessThan(0))\n                symbol = _.expand(symbol);\n            //if the symbol already is the denominator... DONE!!!\n            if (symbol.power.greaterThan(0) && symbol.group !== CB) {\n                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\n            }\n            else if (symbol.group === CB) {\n                retval = _.parse(symbol.multiplier.num);\n                symbol.each(function (x) {\n                    if (x.power > 0 || x.group === EX && x.power.multiplier > 0) {\n                        retval = _.multiply(retval, x.clone());\n                    }\n                });\n            }\n            else {\n                retval = _.parse(symbol.multiplier.num);\n            }\n            return retval;\n        },\n        toString: function () {\n            return this.text();\n        }\n    };\n\n//Parser =======================================================================     \n    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    function Parser() {\n        //Point to the local parser instead of the global one\n        var _ = this;\n        var bin = {};\n        var preprocessors = {names: [], actions: []};\n\n//Parser.classes ===============================================================\n        function Slice(upper, lower) {\n            this.start = upper;\n            this.end = lower;\n        }\n        ;\n        Slice.prototype.isConstant = function () {\n            return this.start.isConstant() && this.end.isConstant();\n        };\n        Slice.prototype.text = function () {\n            return text(this.start) + ':' + text(this.end);\n        };\n\n        /**\n         * Class used to collect arguments for functions\n         * @returns {Parser.Collection}\n         */\n        function Collection() {\n            this.elements = [];\n        }\n        Collection.prototype.append = function (e) {\n            this.elements.push(e);\n        };\n        Collection.prototype.getItems = function () {\n            return this.elements;\n        };\n        Collection.prototype.toString = function () {\n            return _.pretty_print(this.elements);\n        };\n        Collection.create = function (e) {\n            var collection = new Collection();\n            if (e)\n                collection.append(e);\n            return collection;\n        };\n\n        function Token(node, node_type, column) {\n            this.type = node_type;\n            this.value = node;\n            if (column !== undefined)\n                this.column = column + 1;\n            if (node_type === Token.OPERATOR) {\n                //copy everything over from the operator\n                var operator = operators[node];\n                for (var x in operator)\n                    this[x] = operator[x];\n\n            }\n            else if (node_type === Token.FUNCTION) {\n                this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\n                this.leftAssoc = false;\n            }\n        }\n        Token.prototype.toString = function () {\n            return this.value;\n        };\n        Token.prototype.toString = function () {\n            if (this.is_prefix)\n                return '`' + this.value;\n            return this.value;\n        };\n        //some constants\n        Token.OPERATOR = 'OPERATOR';\n        Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\n        Token.FUNCTION = 'FUNCTION';\n        Token.UNIT = 'UNIT';\n        Token.KEYWORD = 'KEYWORD';\n        Token.MAX_PRECEDENCE = 999;\n        //create link to classes\n        this.classes = {\n            Collection: Collection,\n            Slice: Slice,\n            Token: Token\n        };\n//Parser.modules ===============================================================\n        //object for functions which handle complex number\n        var complex = {\n            prec: undefined,\n            cos: function (r, i) {\n                var re, im;\n                re = _.parse(Math.cos(r) * Math.cosh(i));\n                im = _.parse(Math.sin(r) * Math.sinh(i));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sin: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sin(r) * Math.cosh(i));\n                im = _.parse(Math.cos(r) * Math.sinh(i));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            tan: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n                im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sec: function (r, i) {\n                var t = this.removeDen(this.cos(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            csc: function (r, i) {\n                var t = this.removeDen(this.sin(r, i));\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            cot: function (r, i) {\n                var t = this.removeDen(this.tan(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            acos: function (r, i) {\n                var symbol, sq, a, b, c;\n                symbol = this.fromArray([r, i]);\n                sq = _.expand(_.pow(symbol.clone(), new Symbol(2))); //z*z\n                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\n                b = _.expand(_.add(symbol.clone(), a));\n                c = log(b);\n                return _.expand(_.multiply(Symbol.imaginary().negate(), c));\n            },\n            asin: function (r, i) {\n                return _.subtract(_.parse('pi/2'), this.acos(r, i));\n            },\n            atan: function (r, i) {\n                var a, b, c, symbol;\n                symbol = complex.fromArray([r, i]);\n                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\n                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\n                c = log(_.expand(_.add(new Symbol(1), a.clone())));\n                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\n            },\n            asec: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.acos.apply(this, d);\n            },\n            acsc: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.asin.apply(this, d);\n            },\n            acot: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.atan.apply(this, d);\n            },\n            //Hyperbolic trig\n            cosh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.cosh(r) * Math.cos(i));\n                im = _.parse(Math.sinh(r) * Math.sin(i));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sinh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sinh(r) * Math.cos(i));\n                im = _.parse(Math.cosh(r) * Math.sin(i));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            tanh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n                im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sech: function (r, i) {\n                var t = this.removeDen(this.cosh(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            csch: function (r, i) {\n                var t = this.removeDen(this.sinh(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            coth: function (r, i) {\n                var t = this.removeDen(this.tanh(r, i));\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            acosh: function (r, i) {\n                var a, b, z;\n                z = this.fromArray([r, i]);\n                a = sqrt(_.add(z.clone(), new Symbol(1)));\n                b = sqrt(_.subtract(z.clone(), new Symbol(1)));\n                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\n            },\n            asinh: function (r, i) {\n                var a, z;\n                z = this.fromArray([r, i]);\n                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\n                return _.expand(log(_.add(z, a)));\n            },\n            atanh: function (r, i) {\n                var a, b, z;\n                z = this.fromArray([r, i]);\n                a = log(_.add(z.clone(), new Symbol(1)));\n                b = log(_.subtract(new Symbol(1), z));\n                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\n            },\n            asech: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.acosh.apply(this, t);\n            },\n            acsch: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.asinh.apply(this, t);\n            },\n            acoth: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.atanh.apply(this, t);\n            },\n            sqrt: function (symbol) {\n                var re, im, h, a, d;\n                re = symbol.realpart();\n                im = symbol.imagpart();\n                h = Symbol.hyp(re, im);\n                a = _.add(re.clone(), h);\n                d = sqrt(_.multiply(new Symbol(2), a.clone()));\n                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\n            },\n            log: function (r, i) {\n                var re, im;\n                re = log(Symbol.hyp(r, i));\n                im = _.parse(Math.atan2(i, r));\n                return _.add(re, _.multiply(Symbol.imaginary(), im));\n            },\n            removeDen: function (symbol) {\n                var den, r, i, re, im;\n                if (isArray(symbol)) {\n                    r = symbol[0];\n                    i = symbol[1];\n                }\n                else {\n                    r = symbol.realpart();\n                    i = symbol.imagpart();\n                }\n\n                den = Math.pow(r, 2) + Math.pow(i, 2);\n                re = _.parse(r / den);\n                im = _.parse(i / den);\n                return [re, im];\n            },\n            fromArray: function (arr) {\n                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\n            },\n            evaluate: function (symbol, f) {\n                var re, im, sign;\n\n                sign = symbol.power.sign();\n                //remove it from under the denominator\n                symbol.power = symbol.power.abs();\n                //expand\n                if (symbol.power.greaterThan(1))\n                    symbol = _.expand(symbol);\n                //remove the denominator\n                if (sign < 0) {\n                    var d = this.removeDen(symbol);\n                    re = d[0];\n                    im = d[1];\n                }\n                else {\n                    re = symbol.realpart();\n                    im = symbol.imagpart();\n                }\n\n                if (re.isConstant('all') && im.isConstant('all'))\n                    return this[f].call(this, re, im);\n                return _.symfunction(f, [symbol]);\n            }\n        };\n        //object for functions which handle trig\n        var trig = this.trig = {\n            //container for trigonometric function\n            cos: function (symbol) {\n                if (symbol.equals('pi') && symbol.multiplier.den.equals(2))\n                    return new Symbol(0);\n\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.equals(new Symbol(Settings.PI / 2)))\n                        return new Symbol(0);\n                    if (symbol.isConstant()) {\n                        return new Symbol(Math.cos(symbol.valueOf()));\n                    }\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'cos');\n                    }\n                }\n                if (symbol.equals(0))\n                    return new Symbol(1);\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return for 1 or -1 for multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(even(m) ? 1 : -1);\n                    }\n                    else {\n                        var n = Number(m.num), d = Number(m.den);\n                        if (d === 2)\n                            retval = new Symbol(0);\n                        else if (d === 3) {\n                            retval = _.parse('1/2');\n                            c = true;\n                        }\n                        else if (d === 4) {\n                            retval = _.parse('1/sqrt(2)');\n                            c = true;\n                        }\n                        else if (d === 6) {\n                            retval = _.parse('sqrt(3)/2');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('cos', [symbol]);\n                    }\n                }\n\n                if (c && (q === 2 || q === 3))\n                    retval.negate();\n\n                if (!retval)\n                    retval = _.symfunction('cos', [symbol]);\n\n                return retval;\n            },\n            sin: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant()) {\n                        return new Symbol(Math.sin(symbol.valueOf()));\n                    }\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'sin');\n                }\n\n                if (symbol.equals(0))\n                    return new Symbol(0);\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        sign = symbol.multiplier.sign(),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n                if (symbol.equals('pi'))\n                    retval = new Symbol(0);\n                else if (symbol.isPi() && symbol.isLinear()) {\n                    //return for 0 for multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(0);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if (d == 3) {\n                            retval = _.parse('sqrt(3)/2');\n                            c = true\n                        }\n                        else if (d == 4) {\n                            retval = _.parse('1/sqrt(2)');\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('1/2');\n                            c = true;\n                        }\n                        else\n                            retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n                    }\n                }\n\n                if (!retval)\n                    retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n\n                if (c && (q === 3 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            tan: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.tan(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'tan');\n                }\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier;\n\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return 0 for all multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(0);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2)\n                            throw new UndefinedError('tan is undefined for ' + symbol.toString());\n                        else if (d == 3) {\n                            retval = _.parse('sqrt(3)');\n                            c = true;\n                        }\n                        else if (d == 4) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('1/sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('tan', [symbol]);\n                    }\n                }\n\n                if (!retval)\n                    retval = _.symfunction('tan', [symbol]);\n\n                if (c && (q === 2 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            sec: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math2.sec(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'sec');\n                    return _.parse(format('1/cos({0})', symbol));\n                }\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return for 1 or -1 for multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(even(m) ? 1 : -1);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2)\n                            throw new UndefinedError('sec is undefined for ' + symbol.toString());\n                        else if (d == 3) {\n                            retval = new Symbol(2);\n                            c = true;\n                        }\n                        else if (d == 4) {\n                            retval = _.parse('sqrt(2)');\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('2/sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('sec', [symbol]);\n                    }\n                }\n\n                if (c && (q === 2 || q === 3))\n                    retval.negate();\n\n                if (!retval)\n                    retval = _.symfunction('sec', [symbol]);\n\n                return retval;\n            },\n            csc: function(symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant())\n                        return new Symbol(Math2.csc(symbol.valueOf()));\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'csc');\n                    return _.parse(format('1/sin({0})', symbol));\n                }\n\n                var retval,\n                    c = false,\n                    q = getQuadrant(symbol.multiplier.toDecimal()),\n                    sign = symbol.multiplier.sign(),\n                    m = symbol.multiplier.abs();\n\n                symbol.multiplier = m;\n\n                if(symbol.isPi() && symbol.isLinear()) {\n                    //return for 0 for multiples of pi\n                    if(isInt(m)) {\n                        throw new UndefinedError('csc is undefined for '+symbol.toString());\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if(d == 2) {\n                            retval = new Symbol(1); c = true;\n                        }\n                        else if(d == 3) {\n                            retval = _.parse('2/sqrt(3)'); c = true\n                        }\n                        else if(d == 4) {\n                            retval = _.parse('sqrt(2)'); c = true;\n                        }\n                        else if(d == 6) {\n                            retval = new Symbol(2); c = true;\n                        }\n                        else \n                            retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n                    }\n                }\n\n                if(!retval) retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n\n                if(c && (q === 3 || q === 4)) retval.negate();\n\n                return retval;\n            },\n            cot: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math2.cot(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'cot');\n                    return _.parse(format('1/tan({0})', symbol));\n                }\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier;\n\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return 0 for all multiples of pi\n                    if (isInt(m)) {\n                        throw new UndefinedError('cot is undefined for ' + symbol.toString());\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2)\n                            retval = new Symbol(0);\n                        else if (d == 3) {\n                            retval = _.parse('1/sqrt(3)');\n                            c = true;\n                        }\n                        else if (d == 4) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('cot', [symbol]);\n                    }\n                }\n\n                if (!retval)\n                    retval = _.symfunction('cot', [symbol]);\n\n                if (c && (q === 2 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            acos: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.acos(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acos');\n                }\n                return _.symfunction('acos', arguments);\n            },\n            asin: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.asin(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'asin');\n                }\n                return _.symfunction('asin', arguments);\n            },\n            atan: function (symbol) {\n                var retval;\n                if (symbol.equals(0))\n                    retval = new Symbol(0);\n                else if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.atan(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'atan');\n                    return _.symfunction('atan', arguments);\n                }\n                else if (symbol.equals(-1))\n                    retval = _.parse('-pi/4');\n                else\n                    retval = _.symfunction('atan', arguments);\n                return retval;\n            },\n            asec: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.acos(symbol.invert().valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'asec');\n                }\n                return _.symfunction('asec', arguments);\n            },\n            acsc: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.asin(symbol.invert().valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acsc');\n                }\n                return _.symfunction('acsc', arguments);\n            },\n            acot: function(symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\n                    }\n\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acot');\n                }\n                return _.symfunction('acot', arguments);\n            },\n            atan2: function (a, b) {\n                if (a.equals(0) && b.equals(0))\n                    throw new UndefinedError('atan2 is undefined for 0, 0');\n\n                if (Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\n                    return new Symbol(Math.atan2(a, b));\n                }\n                return _.symfunction('atan2', arguments);\n            }\n        };\n        //object for functions which handle hyperbolic trig\n        var trigh = this.trigh = {\n            //container for hyperbolic trig function\n            cosh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.cosh(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'cosh');\n                    }\n                }\n\n                return retval = _.symfunction('cosh', arguments);\n            },\n            sinh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.sinh(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'sinh');\n                    }\n                }\n\n                return retval = _.symfunction('sinh', arguments);\n            },\n            tanh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.tanh(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'tanh');\n                    }\n                }\n\n                return retval = _.symfunction('tanh', arguments);\n            },\n            sech: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant()) {\n                        return new Symbol(Math.sech(symbol.valueOf()));\n                    }\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'sech');\n                    }\n                    return _.parse(format('1/cosh({0})', symbol));\n                }\n\n                return retval = _.symfunction('sech', arguments);\n            },\n            csch: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.csch(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'csch');\n                    }\n                    return _.parse(format('1/sinh({0})', symbol));\n                }\n\n                return retval = _.symfunction('csch', arguments);\n            },\n            coth: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.coth(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'coth');\n                    }\n                    return _.parse(format('1/tanh({0})', symbol));\n                }\n\n                return retval = _.symfunction('coth', arguments);\n            },\n            acosh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acosh');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG+'(({0})+sqrt(({0})^2-1))', symbol.toString())));\n                else\n                    retval = _.symfunction('acosh', arguments);\n                return retval;\n            },\n            asinh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'asinh');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG+'(({0})+sqrt(({0})^2+1))', symbol.toString())));\n                else\n                    retval = _.symfunction('asinh', arguments);\n                return retval;\n            },\n            atanh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'atanh');\n                else if (Settings.PARSE2NUMBER) {\n                    retval = evaluate(_.parse(format('(1/2)*'+Settings.LOG+'((1+({0}))/(1-({0})))', symbol.toString())));\n                }\n                else\n                    retval = _.symfunction('atanh', arguments);\n                return retval;\n            },\n            asech: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'asech');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));\n                else\n                    retval = _.symfunction('asech', arguments);\n                return retval;\n            },\n            acsch: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acsch');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG+'((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));\n                else\n                    retval = _.symfunction('acsch', arguments);\n                return retval;\n            },\n            acoth: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acoth');\n                else if (Settings.PARSE2NUMBER) {\n                    if (symbol.equals(1))\n                        retval = Symbol.infinity();\n                    else\n                        retval = evaluate(\n                                _.divide(\n                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),\n                                        new Symbol(2)));\n                }\n                else\n                    retval = _.symfunction('acoth', arguments);\n                return retval;\n            }\n        };\n        //list of supported units\n        this.units = {};\n        //list all the supported operators\n        var operators = {\n            '\\\\': {\n                precedence: 8,\n                operator: '\\\\',\n                action: 'slash',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; //bypass the slash\n                }\n            },\n            '!!': {\n                precedence: 7,\n                operator: '!!',\n                action: 'dfactorial',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                operation: function (e) {\n                    return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\n                }\n            },\n            '!': {\n                precedence: 7,\n                operator: '!',\n                action: 'factorial',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                operation: function (e) {\n                    return factorial(e); //wrap it in a factorial function\n                }\n            },\n            '^': {\n                precedence: 6,\n                operator: '^',\n                action: 'pow',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            },\n            '**': {\n                precedence: 6,\n                operator: '**',\n                action: 'pow',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            },\n            '%': {\n                precedence: 4,\n                operator: '%',\n                action: 'percent',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                overloaded: true,\n                overloadAction: 'mod',\n\t\toverloadLeftAssoc: false,\n                operation: function (x) {\n                    return _.divide(x, new Symbol(100));\n                }\n            },\n            '*': {\n                precedence: 4,\n                operator: '*',\n                action: 'multiply',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '/': {\n                precedence: 4,\n                operator: '/',\n                action: 'divide',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '+': {\n                precedence: 3,\n                operator: '+',\n                action: 'add',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x;\n                }\n            },\n            'plus': {\n                precedence: 3,\n                operator: 'plus',\n                action: 'add',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x;\n                }\n            },\n            '-': {\n                precedence: 3,\n                operator: '-',\n                action: 'subtract',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x.negate();\n                }\n            },\n            '=': {\n                precedence: 2,\n                operator: '=',\n                action: 'equals',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '==': {\n                precedence: 1,\n                operator: '==',\n                action: 'eq',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '<': {\n                precedence: 1,\n                operator: '<',\n                action: 'lt',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '<=': {\n                precedence: 1,\n                operator: '<=',\n                action: 'lte',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '>': {\n                precedence: 1,\n                operator: '>',\n                action: 'gt',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '=>': {\n                precedence: 1,\n                operator: '=>',\n                action: 'gte',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            ',': {\n                precedence: 0,\n                operator: ',',\n                action: 'comma',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            ':': {\n                precedence: 0,\n                operator: ',',\n                action: 'assign',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false,\n                vectorFn: 'slice'\n            },\n            ':=': {\n                precedence: 0,\n                operator: ',',\n                action: 'function_assign',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            }\n        };\n        //brackets\n        var brackets = {\n            '(': {\n                type: 'round',\n                id: 1,\n                is_open: true,\n                is_close: false\n            },\n            ')': {\n                type: 'round',\n                id: 2,\n                is_open: false,\n                is_close: true\n            },\n            '[': {\n                type: 'square',\n                id: 3,\n                is_open: true,\n                is_close: false,\n                maps_to: 'vector'\n            },\n            ']': {\n                type: 'square',\n                id: 4,\n                is_open: false,\n                is_close: true\n            },\n            '{': {\n                type: 'curly',\n                id: 5,\n                is_open: true,\n                is_close: false,\n                maps_to: 'Set'\n            },\n            '}': {\n                type: 'curly',\n                id: 6,\n                is_open: false,\n                is_close: true\n            }\n        };\n        // Supported functions.\n        // Format: function_name: [mapped_function, number_of_parameters]\n        var functions = this.functions = {\n            'cos': [trig.cos, 1],\n            'sin': [trig.sin, 1],\n            'tan': [trig.tan, 1],\n            'sec': [trig.sec, 1],\n            'csc': [trig.csc, 1],\n            'cot': [trig.cot, 1],\n            'acos': [trig.acos, 1],\n            'asin': [trig.asin, 1],\n            'atan': [trig.atan, 1],\n            'arccos': [trig.acos, 1],\n            'arcsin': [trig.asin, 1],\n            'arctan': [trig.atan, 1],\n            'asec': [trig.asec, 1],\n            'acsc': [trig.acsc, 1],\n            'acot': [trig.acot, 1],\n            'atan2': [trig.atan2, 2],\n            'acoth': [trigh.acoth, 1],\n            'asech': [trigh.asech, 1],\n            'acsch': [trigh.acsch, 1],\n            'sinh': [trigh.sinh, 1],\n            'cosh': [trigh.cosh, 1],\n            'tanh': [trigh.tanh, 1],\n            'asinh': [trigh.asinh, 1],\n            'sech': [trigh.sech, 1],\n            'csch': [trigh.csch, 1],\n            'coth': [trigh.coth, 1],\n            'acosh': [trigh.acosh, 1],\n            'atanh': [trigh.atanh, 1],\n            'log10': [, 1],\n            'exp': [exp, 1],\n            'radians': [radians, 1],\n            'degrees': [degrees, 1],\n            'min': [min, -1],\n            'max': [max, -1],\n            'erf': [, 1],\n            'floor': [, 1],\n            'ceil': [, 1],\n            'trunc': [, 1],\n            'Si': [, 1],\n            'step': [, 1],\n            'rect': [, 1],\n            'sinc': [sinc, 1],\n            'tri': [, 1],\n            'sign': [sign, 1],\n            'Ci': [, 1],\n            'Ei': [, 1],\n            'Shi': [, 1],\n            'Chi': [, 1],\n            'Li': [, 1],\n            'fib': [, 1],\n            'fact': [factorial, 1],\n            'factorial': [factorial, 1],\n            'continued_fraction': [continued_fraction, [1, 2]],\n            'dfactorial': [, 1],\n            'gamma_incomplete': [, [1, 2]],\n            'round': [round, [1, 2]],\n            'scientific': [scientific, [1, 2]],\n            'mod': [mod, 2],\n            'pfactor': [pfactor, 1],\n            'vector': [vector, -1],\n            'matrix': [matrix, -1],\n            'Set': [set, -1],\n            'imatrix': [imatrix, -1],\n            'parens': [parens, -1],\n            'sqrt': [sqrt, 1],\n            'nthroot': [nthroot, 2],\n            'log': [log, [1, 2]],\n            'expand': [expand, 1],\n            'abs': [abs, 1],\n            'invert': [invert, 1],\n            'determinant': [determinant, 1],\n            'size': [size, 1],\n            'transpose': [transpose, 1],\n            'dot': [dot, 2],\n            'cross': [cross, 2],\n            'vecget': [vecget, 2],\n            'vecset': [vecset, 3],\n            'vectrim': [vectrim, [1, 2]],\n            'matget': [matget, 3],\n            'matset': [matset, 4],\n            'matgetrow': [matgetrow, 2],\n            'matsetrow': [matsetrow, 3],\n            'matgetcol': [matgetcol, 2],\n            'matsetcol': [matsetcol, 3],\n            'IF': [IF, 3],\n            'is_in': [is_in, 2],\n            //imaginary support\n            'realpart': [realpart, 1],\n            'imagpart': [imagpart, 1],\n            'conjugate': [conjugate, 1],\n            'arg': [arg, 1],\n            'polarform': [polarform, 1],\n            'rectform': [rectform, 1],\n            'sort': [sort, [1, 2]],\n            'integer_part': [, 1],\n            'union': [union, 2],\n            'contains': [contains, 2],\n            'intersection': [intersection, 2],\n            'difference': [difference, 2],\n            'intersects': [intersects, 2],\n            'is_subset': [is_subset, 2],\n            //system support\n            'print': [print, -1]\n        };\n\n        //error handler\n        this.error = err;\n        //this function is used to comb through the function modules and find a function given its name\n        var findFunction = function (fname) {\n            var fmodules = Settings.FUNCTION_MODULES,\n                    l = fmodules.length;\n            for (var i = 0; i < l; i++) {\n                var fmodule = fmodules[i];\n                if (fname in fmodule)\n                    return fmodule[fname];\n            }\n            err('The function ' + fname + ' is undefined!');\n        };\n\n        /**\n         * This method gives the ability to override operators with new methods.\n         * @param {String} which\n         * @param {Function} with_what\n         */\n        this.override = function (which, with_what) {\n            if (!bin[which])\n                bin[which] = [];\n            bin[which].push(this[which]);\n            this[which] = with_what;\n        };\n\n        /**\n         * Restores a previously overridden operator\n         * @param {String} what\n         */\n        this.restore = function (what) {\n            if (this[what])\n                this[what] = bin[what].pop();\n        };\n\n        /**\n         * This method is supposed to behave similarly to the override method but it does not override\n         * the existing function rather it only extends it\n         * @param {String} what\n         * @param {Function} with_what\n         * @param {boolean} force_call\n         */\n        this.extend = function (what, with_what, force_call) {\n            var _ = this,\n                    extended = this[what];\n            if (typeof extended === 'function' && typeof with_what === 'function') {\n                var f = this[what];\n                this[what] = function (a, b) {\n                    if (isSymbol(a) && isSymbol(b) && !force_call)\n                        return f.call(_, a, b);\n                    else\n                        return with_what.call(_, a, b, f);\n                };\n            }\n        };\n\n        /**\n         * Generates library's representation of a function. It's a fancy way of saying a symbol with \n         * a few extras. The most important thing is that that it gives a fname and \n         * an args property to the symbols in addition to changing its group to FN\n         * @param {String} fn_name\n         * @param {Array} params\n         * @returns {Symbol}\n         */\n        this.symfunction = function (fn_name, params) {\n            //call the proper function and return the result;\n            var f = new Symbol(fn_name);\n            f.group = FN;\n            if (typeof params === 'object')\n                params = [].slice.call(params);//ensure an array\n            f.args = params;\n            f.fname = fn_name === PARENTHESIS ? '' : fn_name;\n            f.updateHash();\n            return f;\n        };\n\n        /**\n         * An internal function call for the Parser. This will either trigger a real \n         * function call if it can do so or just return a symbolic representation of the \n         * function using symfunction.\n         * @param {String} fn_name\n         * @param {Array} args\n         * @param {int} allowed_args\n         * @returns {Symbol}\n         */\n        this.callfunction = function (fn_name, args, allowed_args) {\n            var fn_settings = functions[fn_name];\n\n            if (!fn_settings)\n                err('Nerdamer currently does not support the function ' + fn_name);\n\n            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments\n                    fn = fn_settings[0], //get the mapped function\n                    retval;\n            //We want to be able to call apply on the arguments or create a symfunction. Both require\n            //an array so make sure to wrap the argument in an array.\n            if (!(args instanceof Array))\n                args = args !== undefined ? [args] : [];\n\n            if (num_allowed_args !== -1) {\n                var is_array = isArray(num_allowed_args),\n                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,\n                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,\n                        num_args = args.length;\n\n                var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\n\n                if (num_args < min_args)\n                    err(format(error_msg, 'minimum', min_args, num_args));\n                if (num_args > max_args)\n                    err(format(error_msg, 'maximum', max_args, num_args));\n            }\n\n            /*\n             * The following are very important to the how nerdamer constructs functions!\n             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\n             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\n             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\n             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\n             *     they are expecting a symbolic output.\n             */\n            //check if arguments are all numers\n            var numericArgs = allNumbers(args);\n            //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\n            if (Settings.USE_BIG && numericArgs) {\n                retval = Big[fn_name].apply(undefined, args);\n            }\n            else {\n                if (!fn) {\n                    //Remember assumption 1. No function defined so it MUST be numeric in nature\n                    fn = findFunction(fn_name);\n                    if (Settings.PARSE2NUMBER && numericArgs)\n                        retval = bigConvert(fn.apply(fn, args));\n                    else\n                        retval = _.symfunction(fn_name, args);\n                }\n                else {\n                    //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\n                    retval = fn.apply(fn_settings[2], args);\n                }\n            }\n\n            return retval;\n        };\n        /**\n         * Build a regex based on the operators currently loaded. These operators are to be ignored when \n         * substituting spaces for multiplication\n         */\n        this.operator_filter_regex = (function () {\n            //we only want the operators which are singular since those are the ones\n            //that nerdamer uses anyway\n            var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\n                if (x.length === 1)\n                    return x;\n            }).join('\\\\');\n            //create a regex which captures all spaces between characters except those\n            //have an operator on one end\n            return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\n        })();\n\n        /**\n         * Replaces nerdamer.setOperator\n         * @param {object} operator\n         * @param {boolean} shift         \n         */\n        this.setOperator = function (operator, action, shift) {\n            var name = operator.operator; //take the name to be the symbol\n            operators[name] = operator;\n            if(action)\n                this[operator.action] = action;\n            //make the parser aware of the operator\n            _[name] = operator.operation;\n            //make the action available to the parser if infix\n            if (!operator.action &&!(operator.prefix || operator.postif)) {\n                operator.action = name;\n            }\n            //if this operator is exclusive then all successive operators should be shifted\n            if (shift === 'over' || shift === 'under') {\n                var precedence = operator.precedence;\n\n                for (var x in operators) {\n                    var o = operators[x];\n                    var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\n                    if (condition)\n                        o.precedence++;\n                }\n                ;\n            }\n        };\n        \n        /**\n         * Gets an opererator by its symbol\n         * @param {String} operator\n         * @returns {Object}\n         */\n        this.getOperator = function(operator) {\n            return operators[operator];\n        };\n        \n        this.aliasOperator = function(o, n) {\n            var t = {};\n            var operator = operators[o];\n            //copy everything over to the new operator\n            for(var x in operator) {\n                t[x] = operator[x];\n            }\n            //update the symbol\n            t.operator = n;\n            \n            this.setOperator(t);\n        };\n        \n        /**\n         * Returns the list of operators. Caution! Can break parser!\n         * @returns {object}\n         */\n        this.getOperators = function () {\n            //will replace this with some cloning action in the future\n            return operators;\n        };\n\n        this.getBrackets = function () {\n            return brackets;\n        };\n        /*\n         * Preforms preprocessing on the string. Useful for making early modification before \n         * sending to the parser\n         * @param {String} e\n         */\n        var prepare_expression = function (e) {\n            /*\n             * Since variables cannot start with a number, the assumption is made that when this occurs the\n             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for \n             * a side-by-side close and open parenthesis\n             */\n            e = String(e);\n            //apply preprocessors\n            for (var i = 0; i < preprocessors.actions.length; i++)\n                e = preprocessors.actions[i].call(this, e);\n\n            /* //NO LONGER NEEDED SINCE IMPLIED MULTIPLICATION IS NOW HANDLED LATER IN TOKENIZER\n            var match;\n            //add support for spaces between variables\n            while (true) {\n                match = _.operator_filter_regex.exec(e);\n                if (!match)\n                    break;\n                try {\n                    var a = match[1],\n                            b = match[2];\n                    validateName(a);\n                    validateName(b);\n                    e = e.replace(match[0], a + '*' + b);\n                }\n                catch (e) {\n                    break;\n                }\n            }\n            */\n            \n            //e = e.split(' ').join('');//strip empty spaces\n            //replace multiple spaces with one space\n            e = e.replace(/\\s+/g, ' ');\n            \n            //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\n            if(/e/gi.test(e)) {\n                e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) { \n                    return scientificToDecimal(x);\n                });\n            }\n            //replace scientific numbers\n            \n            //allow omission of multiplication after coefficients\n            e = e.replace(/([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi, function () {\n                var str = arguments[4],\n                        group1 = arguments[1],\n                        group2 = arguments[2],\n                        start = arguments[3],\n                        first = str.charAt(start),\n                        before = '',\n                        d = '*';\n                if (!first.match(/[\\+\\-\\/\\*]/))\n                    before = str.charAt(start - 1);\n                if (before.match(/[a-z]/i))\n                    d = '';\n                return group1 + d + group2;\n            })\n            .replace(/([a-z0-9_]+)/gi, function (match, a) {\n                if (Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\n                    if (!isNaN(a))\n                        return a;\n                    return a.split('').join('*');\n                }\n                return a;\n            })\n            //allow omission of multiplication sign between brackets\n            .replace(/\\)\\(/g, ')*(') || '0';\n            //replace x(x+a) with x*(x+a)\n            while (true) {\n                var e_org = e; //store the original\n                e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\n                    var g1 = a || c,\n                            g2 = b || d;\n                    if (g1 in functions) //create a passthrough for functions\n                        return g1 + g2;\n                    return g1 + '*' + g2;\n                });\n                //if the original equals the replace we're done\n                if (e_org === e)\n                    break;\n            }\n            return e;\n        };\n        //delay setting of constants until Settings is ready\n        this.initConstants = function () {\n            this.CONSTANTS = {\n                E: new Symbol(Settings.E),\n                PI: new Symbol(Settings.PI)\n            };\n        };\n        /*\n         * Debugging method used to better visualize vector and arrays\n         * @param {object} o\n         * @returns {String}\n         */\n        this.pretty_print = function (o) {\n            if (Array.isArray(o)) {\n                var s = o.map(x => _.pretty_print(x)).join(', ');\n                if (o.type === 'vector')\n                    return 'vector<' + s + '>';\n                return '(' + s + ')';\n            }\n            return o.toString();\n        };\n        this.peekers = {\n            pre_operator: [],\n            post_operator: [],\n            pre_function: [],\n            post_function: []\n        };\n        \n        this.callPeekers = function(name) {\n            var peekers = this.peekers[name];\n            //remove the first items and stringify\n            var args = arguments2Array(arguments).slice(1).map(stringify);\n            //call each one of the peekers\n            for(var i=0; i<peekers.length; i++) {\n                peekers[i].apply(null, args);\n            }\n        };\n        /*\n         * Tokenizes the string\n         * @param {String} e\n         * @returns {Token[]}\n         */\n        this.tokenize = function (e) {\n            //cast to String\n            e = String(e);\n            //remove multiple white spaces and spaces at beginning and end of string\n            e = e.trim().replace(/\\s+/g, ' ');\n            //remove spaces before and after brackets\n            for (var x in brackets) {\n                var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\n                e = e.replace(regex, x);\n            }\n\n            var col = 0; //the column position\n            var L = e.length; //expression length\n            var lpos = 0; //marks beginning of next token\n            var tokens = []; //the tokens container\n            var scopes = [tokens]; //initiate with the tokens as the highest scope\n            var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\n            var depth = 0;\n            var open_brackets = [];\n            var has_space = false; //marks if an open space character was found\n            var SPACE = ' ';\n            var EMPTY_STRING = '';\n            var COMMA = ',';\n            var MINUS = '-';\n            var MULT = '*';\n            //Possible source of bug. Review\n            /*\n             //gets the next space\n             var next_space = function(from) {\n             for(var i=from; i<L; i++) {\n             if(e.charAt(i) === ' ')\n             return i;\n             }\n             \n             return L; //assume the end of the string instead\n             };\n             */\n            /**\n             * Adds a scope to tokens\n             * @param {String} scope_type \n             * @param {int} column \n             * @returns {undefined}\n             */\n            var addScope = function (scope_type, column) {\n                var new_scope = []; //create a new scope\n                if (scope_type !== undefined) {\n                    new_scope.type = scope_type;\n                }\n                new_scope.column = column; //mark the column of the scope\n                scopes.push(new_scope); //add it to the list of scopes\n                target.push(new_scope); //add it to the tokens list since now it's a scope\n                target = new_scope; //point to it\n                depth++; //go down one in scope\n            };\n            /**\n             * Goes up in scope by one\n             * @returns {undefined}\n             */\n            var goUp = function () {\n                scopes.pop(); //remove the scope from the scopes stack\n                target = scopes[--depth]; //point the above scope\n            };\n            /**\n             * Extracts all the operators from the expression string starting at postion start_at\n             * @param {int} start_at\n             * @returns {String}\n             */\n            var get_operator_str = function (start_at) {\n                start_at = start_at !== undefined ? start_at : col;\n                //mark the end of the operator as the start since we're just going\n                //to be walking along the string\n                var end = start_at + 1;\n                //just keep moving along\n                while (e.charAt(end++) in operators) {\n                }\n                //remember that we started at one position ahead. The beginning operator is what triggered\n                //this function to be called in the first place. String.CharAt is zero based so we now\n                //have to correct two places. The initial increment + the extra++ at the end of end during\n                //the last iteration.\n                return e.substring(start_at, end - 1);\n            };\n            /**\n             * Breaks operator up in to several different operators as defined in operators\n             * @param {String} operator_str\n             * @returns {String[]}\n             */\n            var chunkify = function (operator_str) {\n                var start = col - operator_str.length; //start of operator\n                var _operators = [];\n                var operator = operator_str.charAt(0);\n                //grab the largest possible chunks but start at 2 since we already know\n                //that the first character is an operator\n\n                for (var i = 1, L = operator_str.length; i < L; i++) {\n                    var ch = operator_str.charAt(i);\n                    var o = operator + ch;\n                    //since the operator now is undefined then the last operator \n                    //was the largest possible combination.\n                    if (!(o in operators)) {\n                        _operators.push(new Token(operator, Token.OPERATOR, start + i));\n                        operator = ch;\n                    }\n                    else\n                        operator = o;//now the operator is the larger chunk\n                }\n                //add the last operator\n                _operators.push(new Token(operator, Token.OPERATOR, start + i));\n                return _operators;\n            };\n\n            /**\n             * Is used to add a token to the tokens array. Makes sure that no empty token is added\n             * @param {int} at\n             * @param {String} token\n             * @returns {undefined}\n             */\n            var add_token = function (at, token) {\n                //grab the token if we're not supplied one\n                if (token === undefined)\n                    token = e.substring(lpos, at);\n                //only add it if it's not an empty string\n                if (token in _.units)\n                    target.push(new Token(token, Token.UNIT, lpos));\n                else if (token !== '')\n                    target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\n            };\n            /**\n             * Adds a function to the output\n             * @param {String} f\n             * @returns {undefined}\n             */\n            var add_function = function (f) {\n                target.push(new Token(f, Token.FUNCTION, lpos));\n            };\n            /**\n             * Tokens are found between operators so this marks the location of where the last token was found\n             * @param {int} position\n             * @returns {undefined}\n             */\n            var set_last_position = function (position) {\n                lpos = position + 1;\n            };\n            /**\n             * When a operator is found and added, especially a combo operator, then the column location\n             * has to be adjusted to the end of the operator\n             * @returns {undefined}\n             */\n            var adjust_column_position = function () {\n                lpos = lpos + operator_str.length - 2;\n                col = lpos - 1;\n            };\n            for (; col < L; col++) {\n                var ch = e.charAt(col);\n                if (ch in operators) {\n                    add_token(col);\n                    //is the last token numeric?\n                    var last_token_is_numeric = target[0] && isNumber(target[0]); \n                    //is this character multiplication?\n                    var is_multiplication = last_token_is_numeric && ch === MULT;\n                    //if we're in a new scope then go up by one but if the space \n                    //is right befor an operator then it makes no sense to go up in scope\n                    //consider sin -x. The last position = current position at the minus sign\n                    //this means that we're going for sin(x) -x which is wrong\n                    //Ignore comma since comma is still part of the existing scope.\n                    if (has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\n                        has_space = false;\n                        goUp();\n                    }\n                    //mark the last position that a \n                    set_last_position(col + 1);\n                    var operator_str = get_operator_str(col);\n\n                    adjust_column_position();\n                    target.push.apply(target, chunkify(operator_str));\n                }\n                else if (ch in brackets) {\n                    var bracket = brackets[ch];\n\n                    if (bracket.is_open) {\n                        //mark the bracket\n                        open_brackets.push([bracket, lpos]);\n                        var f = e.substring(lpos, col);\n                        if (f in functions) {\n                            add_function(f);\n                        }\n                        else if (f !== '') {\n                            //assume multiplication\n                            //TODO: Add the multiplication to stack\n                            target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\n                        }\n                        //go down one in scope\n                        addScope(bracket.maps_to, col);\n                    }\n                    else if (bracket.is_close) {\n                        //get the matching bracket\n                        var pair = open_brackets.pop();\n                        //throw errors accordingly\n                        //missing open bracket\n                        if (!pair)\n                            throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\n                        //incorrect pair\n                        else if (pair[0].id !== bracket.id - 1)\n                            throw new ParityError('Parity error');\n\n                        add_token(col);\n                        goUp();\n                    }\n                    set_last_position(col);\n                }\n                else if (ch === SPACE) {\n                    var prev = e.substring(lpos, col); //look back\n                    var nxt = e.charAt(col+1); //look forward\n                    if (has_space) {\n\n                        if (prev in operators) {\n                            target.push(new Token(prev, Token.OPERATOR, col));\n                        }\n                        else {\n                            add_token(undefined, prev);\n                            //we're at the closing space\n                            goUp(); //go up in scope if we're at a space\n                            \n                            //assume multiplication if it's not an operator except for minus\n                            var is_operator = nxt in operators;\n\n                            if((is_operator && operators[nxt].value === MINUS) || !is_operator) {\n                                target.push(new Token(MULT, Token.OPERATOR, col));\n                            }\n                        }\n                        has_space = false; //remove the space\n                    }\n                    else {\n                        //we're at the closing space\n                        //check if it's a function\n                        var f = e.substring(lpos, col);\n\n                        if (f in functions) {\n                            //there's no need to go up in scope if the next character is an operator\n                            has_space = true; //mark that a space was found\n                            add_function(f);\n                            addScope();\n                        }\n                        else if (f in operators) {\n                            target.push(new Token(f, Token.OPERATOR, col));\n                        }\n                        else {\n                            add_token(undefined, f);\n                            //peek ahead to the next character\n                            var nxt = e.charAt(col+1);\n\n                            //If it's a number then add the multiplication operator to the stack but make sure that the next character\n                            //is not an operator\n                            \n                            if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))\n                                target.push(new Token(MULT, Token.OPERATOR, col));\n                        }\n                        //Possible source of bug. Review\n                        /*\n                         //space can mean multiplication so add the symbol if the is encountered\n                         if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\n                         var next = e.charAt(col+1);\n                         var next_is_operator = next in operators;\n                         var ns = next_space(col+1);\n                         var next_word = e.substring(col+1, ns);\n                         //the next can either be a prefix operator or no operator\n                         if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\n                         target.push(new Token('*', Token.OPERATOR, col));\n                         }\n                         */\n                    }\n                    set_last_position(col); //mark this location    \n                }\n            }\n            //check that all brackets were closed\n            if (open_brackets.length) {\n                var b = open_brackets.pop();\n                throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\n            }\n            //add the last token\n            add_token(col);\n\n            return tokens;\n        };\n        /*\n         * Puts token array in Reverse Polish Notation\n         * @param {Token[]} tokens\n         * @returns {Token[]}\n         */\n        this.toRPN = function (tokens) {\n            var fn = tokens.type;\n            var l = tokens.length, i;\n            var output = [];\n            var stack = [];\n            var prefixes = [];\n            var collapse = function (target, destination) {\n                while (target.length)\n                    destination.push(target.pop());\n            };\n            //mark all the prefixes and add them to the stack\n            for (i = 0; i < l; i++) {\n                var token = tokens[i];\n                if (token.type !== Token.OPERATOR)\n                    break;\n                if (!token.prefix)\n                    throw new OperatorError('Not a prefix operator');\n                token.is_prefix = true;\n                stack.push(token);\n            }\n            //begin with remaining tokens\n            for (; i < l; i++) {\n                var e = tokens[i];\n                if (e.type === Token.OPERATOR) {\n                    var operator = e;\n\t\t    \n\t\t    //create the option for the operator being overloaded\n                    if (operator.overloaded) {\n                        var next = tokens[i + 1];\n                        //if it's followed by a number or variable then we assume it's not a postfix operator\n                        if (next && next.type === Token.VARIABLE_OR_LITERAL) {\n                            operator.postfix = false;\n                            //override the original function with the overload function\n                            operator.action = operator.overloadAction;\n\t\t\t    operator.leftAssoc = operator.overloadLeftAssoc;\n                        }\n                    }\n\t\t\t\n                    //if the stack is not empty\n                    while (stack.length) {\n                        var last = stack[stack.length - 1];\n                        //if (there is an operator at the top of the operator stack with greater precedence)\n                        //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\n                        //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\n                        if (!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))\n                            break;\n                        output.push(stack.pop());\n                    }\n                    \n                    //change the behavior of the operator if it's a vector and we've been asked to do so\n                    if ((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)\n                        operator.action = operator.vectorFn;\n\n\n                    //if the operator is a postfix operator then we're ready to go since it belongs\n                    //to the preceding token. However the output cannot be empty. It must have either\n                    //an operator or a variable/literal\n                    if (operator.postfix) {\n                        var previous = tokens[i - 1];\n                        if (!previous)\n                            throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);\n                        else if (previous.type === Token.OPERATOR) {\n                            //a postfix can only be followed by a postfix\n                            if (!previous.postfix)\n                                throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\n                        }\n                    }\n                    else {\n                        //we must be at an infix so point the operator this\n                        do {\n                            //the first one is an infix operator all others have to be prefix operators so jump to the end\n                            var next = tokens[i + 1]; //take a look ahead\n                            var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\n                            if (next_is_operator) {\n                                //if it's not a prefix operator then it not in the right place\n                                if (!next.prefix) {\n                                    throw new OperatorError('A prefix operator was expected at ' + next.column);\n                                }\n                                //mark it as a confirmed prefix\n                                next.is_prefix = true;\n                                //add it to the prefixes\n                                prefixes.push(next);\n                                i++;\n                            }\n                        }\n                        while (next_is_operator)\n                    }\n\n                    //if it's a prefix it should be on a special stack called prefixes\n                    //we do this to hold on to prefixes because of left associative operators.\n                    //they belong to the variable/literal but if placed on either the stack\n                    //or output there's no way of knowing this. I might be wrong so I welcome \n                    //any discussion about this.\n\n                    if (operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\n                        prefixes.push(operator);\n                    else\n                        stack.push(operator);\n                    //move the prefixes to the stack\n                    while (prefixes.length) {\n                        if (operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\n                            stack.push(prefixes.pop());\n                        else\n                            break;\n                    }\n                }\n                else if (e.type === Token.VARIABLE_OR_LITERAL) {\n                    //move prefixes to stack at beginning of scope\n                    if (output.length === 0)\n                        collapse(prefixes, stack);\n                    //done with token\n                    output.push(e);\n                    var last_on_stack = stack[stack.length - 1];\n                    //then move all the prefixes to the output\n                    if (!last_on_stack || !last_on_stack.leftAssoc)\n                        collapse(prefixes, output);\n                }\n                else if (e.type === Token.FUNCTION) {\n                    stack.push(e);\n                }\n                else if (e.type === Token.UNIT) {\n                    //if it's a unit it belongs on the stack since it's tied to the previous token\n                    output.push(e);\n                }\n                //if it's an additonal scope then put that into RPN form\n                if (Array.isArray(e)) {\n                    output.push(this.toRPN(e));\n                    if (e.type)\n                        output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\n\n                }\n            }\n            //collapse the remainder of the stack and prefixes to output\n            collapse(stack, output);\n            collapse(prefixes, output);\n\n            return output;\n        };\n        /*\n         * Parses the tokens  \n         * @param {Tokens[]} rpn\n         * @param {object} substitutions\n         * @returns {Symbol}\n         */\n        this.parseRPN = function (rpn, substitutions) {\n            try {\n                //default substitutions\n                substitutions = substitutions || {};\n                //prepare the substitutions.\n                //we first parse them out as-is\n                for (var x in substitutions)\n                    substitutions[x] = _.parse(substitutions[x], {});\n                //Although technically constants,\n                //pi and e are only available when evaluating the expression so add to the subs.\n                //Doing this avoids rounding errors \n                //link e and pi\n                if (Settings.PARSE2NUMBER) {\n                    //use the value provided if the individual for some strange reason prefers this.\n                    //one reason could be to sub e but not pi or vice versa\n                    if (!('e' in substitutions))\n                        substitutions.e = new Symbol(Settings.E);\n                    if ((!('pi' in substitutions)))\n                        substitutions.pi = new Symbol(Settings.PI);\n                }\n\n                var Q = [];\n                for (var i = 0, l = rpn.length; i < l; i++) {\n                    var e = rpn[i]; \n\n                    //Arrays indicate a new scope so parse that out\n                    if (Array.isArray(e)) {\n                        e = this.parseRPN(e, substitutions);\n                    }\n\n                    if(e) {\n                        if (e.type === Token.OPERATOR) {\n                            if (e.is_prefix || e.postfix)\n                                //resolve the operation assocated with the prefix\n                                Q.push(e.operation(Q.pop()));\n                            else {\n                                var b = Q.pop();\n                                var a = Q.pop();\n                                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\n                                if (typeof a === 'undefined')\n                                    throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\n\n                                var is_comma = e.action === 'comma';\n                                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\n                                if(a instanceof Set && !is_comma)\n                                    a = Vector.fromSet(a);\n\n                                if(b instanceof Set && !is_comma)\n                                    b = Vector.fromSet(b);\n\n                                //call all the pre-operators \n                                this.callPeekers('pre_operator', a, b, e);\n                                \n                                var ans = _[e.action](a, b);\n                                \n                                //call all the pre-operators\n                                this.callPeekers('post_operator', ans, a, b, e);\n                                \n                                Q.push(ans);\n                            }\n                        }\n                        else if (e.type === Token.FUNCTION) {\n                            var args = Q.pop();\n                            var parent = args.parent; //make a note of the parent\n                            if (!(args instanceof Collection))\n                                args = Collection.create(args);\n                            //the return value may be a vector. If it is then we check\n                            //Q to see if there's another vector on the stack. If it is then\n                            //we check if has elements. If it does then we know that we're dealing\n                            //with an \"getter\" object and return the requested values\n\n                            //call the function. This is the _.callfunction method in nerdamer\n                            //call the function. This is the _.callfunction method in nerdamer\n                            var fn_name = e.value;\n                            var fn_args = args.getItems();\n                            \n                            //call the pre-function peekers\n                            this.callPeekers('pre_function', fn_name, fn_args);\n                            \n                            var ret = _.callfunction(fn_name, fn_args);                             \n                            \n                            //call the post-function peekers\n                            this.callPeekers('post_function', ret, fn_name, fn_args);\n                            \n                            var last = Q[Q.length - 1];\n                            var next = rpn[i + 1];\n                            var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\n\n                            if (!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\n                                //remove the item from the queue\n                                var item = Q.pop();\n\n                                var getter = ret.elements[0];\n                                //check if it's symbolic. If so put it back and add the item to the stack\n                                if (!getter.isConstant()) {\n                                    item.getter = getter;\n                                    Q.push(item);\n                                    Q.push(ret);\n                                }\n                                else if (getter instanceof Slice) {\n                                    //if it's a Slice return the slice\n                                    Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\n                                }\n                                else {\n                                    var index = Number(getter);\n                                    var il = item.elements.length;\n                                    //support for negative indices\n                                    if (index < 0)\n                                        index = il + index;\n                                    //it it's still out of bounds\n                                    if (index < 0 || index >= il) //index should no longer be negative since it's been reset above\n                                        //range error\n                                        throw new OutOfRangeError('Index out of range ' + (e.column + 1));\n                                    \n                                    var element = item.elements[index];\n                                    //cyclic but we need to mark this for future reference\n                                    item.getter = index;\n                                    element.parent = item; \n                                    \n                                    Q.push(element);\n                                }\n                            }\n                            else {\n                                //extend the parent reference\n                                if(parent)\n                                    ret.parent = parent;\n                                Q.push(ret);\n                            }\n\n                        }\n                        else {\n                            var subbed;\n                            var v = e.value;\n\n                            if (v in Settings.ALIASES)\n                                e = _.parse(Settings.ALIASES[e]);\n                            //wrap it in a symbol if need be\n                            else if (e.type === Token.VARIABLE_OR_LITERAL)\n                                e = new Symbol(v);\n                            else if (e.type === Token.UNIT) {\n                                e = new Symbol(v);\n                                e.isUnit = true;\n                            }\n\n                            //make substitutions\n                            //Always constants first. This avoids the being overridden\n                            if (v in _.CONSTANTS) {\n                                subbed = e;\n                                e = new Symbol(_.CONSTANTS[v]);\n                            }\n                            //next substitutions. This allows declared variable to be overridden\n                            //check if the values match to avoid erasing the multiplier. \n                            //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\n                            else if (v in substitutions && v !== substitutions[v].value) {\n                                subbed = e;\n                                e = substitutions[v].clone();\n                            }\n                            //next declare variables\n                            else if (v in VARS) {\n                                subbed = e;\n                                e = VARS[v].clone();\n                            }\n                            //make notation of what it was before\n                            if (subbed)\n                                e.subbed = subbed;\n\n                            Q.push(e);\n                        }\n                    }\n                }\n\n                return Q[0];\n            }\n            catch(error) {\n                throw new ParseError(error.message+': '+e.column);\n            }\n        };\n        /**\n         * This is the method that triggers the parsing of the string. It generates a parse tree but processes \n         * it right away. The operator functions are called when their respective operators are reached. For instance\n         * + with cause this.add to be called with the left and right hand values. It works by walking along each \n         * character of the string and placing the operators on the stack and values on the output. When an operator\n         * having a lower order than the last is reached then the stack is processed from the last operator on the \n         * stack.\n         * @param {String} token\n         */\n\n        function Node(token) {\n            this.type = token.type;\n            this.value = token.value;\n            //the incoming token may already be a Node type\n            this.left = token.left;\n            this.right = token.right;\n        }\n\n        Node.prototype.toString = function () {\n            var left = this.left ? this.left.toString() + '---' : '';\n            var right = this.right ? '---' + this.right.toString() : '';\n            return left + '(' + this.value + ')' + right;\n        };\n\n        Node.prototype.toHTML = function (depth, indent) {\n            depth = depth || 0;\n            indent = typeof indent === 'undefined' ? 4 : indent;\n            var tab = function (n) {\n                return ' '.repeat(indent * n);\n            };\n            var html = '';\n            var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\n            var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\n            var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\n            if (left || right) {\n                html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\n            }\n            html += '';\n            return html;\n        };\n\n        this.tree = function (tokens) {\n            var Q = [];\n            for (var i = 0; i < tokens.length; i++) {\n                var e = tokens[i];\n                //Arrays indicate a new scope so parse that out\n                if (Array.isArray(e)) {\n                    e = this.tree(e);\n                    //if it's a comma then it's just arguments\n                    Q.push(e);\n                    continue;\n                }\n                if (e.type === Token.OPERATOR) {\n                    if (e.is_prefix || e.postfix) {\n                        //prefixes go to the left, postfix to the right\n                        var location = e.is_prefix ? 'left' : 'right';\n                        var last = Q.pop();\n                        e = new Node(e);\n                        e[location] = last;\n                        Q.push(e);\n                    }\n                    else {\n                        e = new Node(e);\n                        e.right = Q.pop();\n                        e.left = Q.pop();\n                        Q.push(e);\n                    }\n                }\n                else if (e.type === Token.FUNCTION) {\n                    e = new Node(e);\n                    var args = Q.pop();\n                    e.right = args;\n                    if (e.value === 'object') {\n                        //check if Q has a value\n                        var last = Q[Q.length - 1];\n                        if (last) {\n                            while (last.right) {\n                                last = last.right;\n                            }\n                            last.right = e;\n                            continue;\n                        }\n                    }\n\n                    Q.push(e);\n                }\n                else {\n                    Q.push(new Node(e));\n                }\n            }\n\n            return Q[0];\n        };\n        this.parse = function (e, substitutions) {\n            e = prepare_expression(e);\n            substitutions = substitutions || {};\n            //three passes but easier to debug\n            var tokens = this.tokenize(e);\n            var rpn = this.toRPN(tokens);\n            return this.parseRPN(rpn, substitutions);\n        };\n        /**\n         * TODO: Switch to Parser.tokenize for this method\n         * Reads a string into an array of Symbols and operators\n         * @param {String} expression_string\n         * @returns {Array}\n         */\n        this.toObject = function (expression_string) {\n            var objectify = function (tokens) {\n                var output = [];\n                for (var i = 0, l = tokens.length; i < l; i++) {\n                    var token = tokens[i];\n                    var v = token.value;\n                    if (token.type === Token.VARIABLE_OR_LITERAL) {\n                        output.push(new Symbol(v));\n                    }\n                    else if (token.type === Token.FUNCTION) {\n                        //jump ahead since the next object are the arguments\n                        i++;\n                        //create a symbolic function and stick it on output\n                        var f = _.symfunction(v, objectify(tokens[i]));\n                        f.isConversion = true;\n                        output.push(f);\n                    }\n                    else if (token.type === Token.OPERATOR) {\n                        output.push(v);\n                    }\n                    else {\n                        output.push(objectify(token));\n                    }\n                }\n\n                return output;\n            };\n            return objectify(_.tokenize(expression_string));\n        };\n        //helper method for toTeX\n        var chunkAtCommas = function (arr) {\n            var j, k = 0, chunks = [[]];\n            for (var j = 0, l = arr.length; j < l; j++) {\n                if (arr[j] === ',') {\n                    k++;\n                    chunks[k] = [];\n                }\n                else {\n                    chunks[k].push(arr[j]);\n                }\n            }\n            return chunks;\n        };\n        //helper method for toTeX\n        var rem_brackets = function (str) {\n            return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\n                if (a)\n                    return a;\n                return str;\n            });\n        };\n        /*\n         * Convert expression or object to LaTeX\n         * @param {String} expression_or_obj\n         * @param {object} opt\n         * @returns {String}\n         */\n        this.toTeX = function (expression_or_obj, opt) {\n            opt = opt || {};\n            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\n                    TeX = [],\n                    cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\n\n            if (isArray(obj)) {\n                var nobj = [], a, b;\n                //first handle ^\n                for (var i = 0; i < obj.length; i++) {\n                    a = obj[i];\n\n                    if (obj[i + 1] === '^') {\n                        b = obj[i + 2];\n                        nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\n                        i += 2;\n                    }\n                    else\n                        nobj.push(a);\n                }\n                obj = nobj;\n            }\n\n            for (var i = 0, l = obj.length; i < l; i++) {\n                var e = obj[i];\n                //convert * to cdot\n                if (e === '*') {\n                    e = cdot;\n                }\n\n                if (isSymbol(e)) {\n                    if (e.group === FN) {\n                        var fname = e.fname, f;\n\n                        if (fname === SQRT)\n                            f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\n                        else if (fname === ABS)\n                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');\n                        else if (fname === PARENTHESIS)\n                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');\n                        else if (fname === Settings.LOG10) {\n                            f = '\\\\'+Settings.LOG10_LATEX+'\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\n                        }\n                        else if (fname === 'integrate') {\n                            /* Retrive [Expression, x] */\n                            var chunks = chunkAtCommas(e.args);\n                            /* Build TeX */\n                            var expr = LaTeX.braces(this.toTeX(chunks[0])),\n                                    dx = this.toTeX(chunks[1]);\n                            f = '\\\\int ' + expr + '\\\\, d' + dx;\n                        }\n                        else if (fname === 'defint') {\n                            var chunks = chunkAtCommas(e.args),\n                                    expr = LaTeX.braces(this.toTeX(chunks[0])),\n                                    dx = this.toTeX(chunks[3]),\n                                    lb = this.toTeX(chunks[1]),\n                                    ub = this.toTeX(chunks[2]);\n                            f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\n\n                        }\n                        else if (fname === 'diff') {\n                            var chunks = chunkAtCommas(e.args);\n                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));\n                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\n                            if (chunks.length === 1) {\n                                var vars = [];\n                                for (j = 0; j < chunks[0].length; j++) {\n                                    if (chunks[0][j].group === 3) {\n                                        vars.push(chunks[0][j].value);\n                                    }\n                                }\n                                vars.sort();\n                                dx = vars.length > 0 ? ('\\\\frac{d}{d ' + vars[0] + '}') : '\\\\frac{d}{d x}';\n                            }\n                            /* If two arguments, we have expression and variable, we assume n = 1 */\n                            else if (chunks.length === 2) {\n                                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\n                            }\n                            /* If we have more than 2 arguments, we assume we've got everything */\n                            else {\n                                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\n                            }\n\n                            f = dx + '\\\\left(' + expr + '\\\\right)';\n\n                        }\n                        else if (fname === 'sum' || fname === 'product') {\n                            // Split e.args into 4 parts based on locations of , symbols.\n                            var argSplit = [[], [], [], []], j = 0, i;\n                            for (i = 0; i < e.args.length; i++) {\n                                if (e.args[i] === ',') {\n                                    j++;\n                                    continue;\n                                }\n                                argSplit[j].push(e.args[i]);\n                            }\n                            // Then build TeX string.\n                            f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\n                            f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\n                        }\n                        else if (fname === 'limit') {\n                            var args = chunkAtCommas(e.args).map(function (x) {\n                                if (Array.isArray(x))\n                                    return _.toTeX(x.join(''));\n                                return _.toTeX(String(x));\n                            });\n                            f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\n                        }\n                        else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL)\n                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\n                        else {\n                            f = LaTeX.latex(e);\n                            //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\n                        }\n\n                        TeX.push(f);\n                    }\n                    else\n                        TeX.push(LaTeX.latex(e));\n                }\n                else if (isArray(e)) {\n                    TeX.push(LaTeX.brackets(this.toTeX(e)));\n                }\n                else {\n                    if (e === '/')\n                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));\n                    else\n                        TeX.push(e);\n                }\n            }\n\n            return TeX.join(' ');\n        };\n\n//Parser.functions ==============================================================\n        /* Although parens is not a \"real\" function it is important in some cases when the \n         * symbol must carry parenthesis. Once set you don't have to worry about it anymore\n         * as the parser will get rid of it at the first opportunity\n         */\n        function parens(symbol) {\n            if (Settings.PARSE2NUMBER) {\n                return symbol;\n            }\n            return _.symfunction('parens', [symbol]);\n        }\n\n        function abs(symbol) {\n            if (symbol.multiplier.lessThan(0))\n                symbol.multiplier.negate();\n            if (symbol.isImaginary()) {\n                var re = symbol.realpart();\n                var im = symbol.imagpart();\n                if (re.isConstant() && im.isConstant())\n                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\n            }\n            else if (isNumericSymbol(symbol) || even(symbol.power)) {\n                return symbol;\n            }\n            if (symbol.isComposite()) {\n                var ms = [];\n                symbol.each(function (x) {\n                    ms.push(x.multiplier);\n                });\n                var gcd = Math2.QGCD.apply(null, ms);\n                if (gcd.lessThan(0)) {\n                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\n                    symbol.distributeMultiplier();\n                }\n            }\n            return _.symfunction(ABS, [symbol]);\n        }\n        /**\n         * The factorial function\n         * @param {Symbol} symbol\n         * @return {Symbol}\n         */\n        function factorial(symbol) {\n            var retval;\n            if (isVector(symbol)) {\n                var V = new Vector();\n                symbol.each(function (x, i) {\n                    //i start at one.\n                    V.set(i - 1, factorial(x));\n                });\n                return V;\n            }\n            if (isMatrix(symbol)) {\n                var M = new Matrix();\n                symbol.each(function (x, i, j) {\n                    //i start at one.\n                    M.set(i, j, factorial(x));\n                });\n                return M;\n            }\n            if (Settings.PARSE2NUMBER && symbol.isConstant()) {\n                if (isInt(symbol)) {\n                    retval = Math2.bigfactorial(symbol);\n                }\n                else {\n                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\n                }\n\n                retval = bigConvert(retval);\n                return retval;\n            }\n            else if (symbol.isConstant()) {\n                var den = symbol.getDenom();\n                if (den.equals(2)) {\n                    var num = symbol.getNum();\n                    var a, b, c, n;\n\n                    if (!symbol.multiplier.isNegative()) {\n                        n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\n                        a = Math2.bigfactorial(new Frac(2).multiply(n));\n                        b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n                    }\n                    else {\n                        n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\n                        a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n                        b = Math2.bigfactorial(new Frac(2).multiply(n));\n                    }\n                    c = a.divide(b);\n                    return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\n                }\n            }\n            return _.symfunction(FACTORIAL, [symbol]);\n        }\n        ;\n        /**\n         * Returns the continued fraction of a number\n         * @param {Symbol} symbol\n         * @param {Symbol} n\n         * @returns {Symbol}\n         */\n        function continued_fraction(symbol, n) {\n            var _symbol = evaluate(symbol);\n            if (_symbol.isConstant()) {\n                var cf = Math2.continuedFraction(_symbol, n);\n                //convert the fractions array to a new Vector\n                var fractions = Vector.fromArray(cf.fractions.map(function (x) {\n                    return new Symbol(x);\n                }));\n                return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\n            }\n            return _.symfunction('continued_fraction', arguments);\n        }\n        ;\n        /**\n         * The mod function\n         * @param {Symbol} symbol1\n         * @param {Symbol} symbol2\n         * @returns {Symbol}\n         */\n        function mod(symbol1, symbol2) {\n            if (symbol1.isConstant() && symbol2.isConstant()) {\n                var retval = new Symbol(1);\n                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\n                return retval;\n            }\n            //try to see if division has remainder of zero\n            var r = _.divide(symbol1.clone(), symbol2.clone());\n            if (isInt(r))\n                return new Symbol(0);\n            return _.symfunction('mod', [symbol1, symbol2]);\n        }\n        /**\n         * A branghing function\n         * @param {Boolean} condition\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        function IF(condition, a, b) {\n            if (typeof condition !== 'boolean')\n                if (isNumericSymbol(condition))\n                    condition = !!Number(condition);\n            if (condition)\n                return a;\n            return b;\n        }\n        /**\n         * \n         * @param {Matrix|Vector|Set|Collection} obj\n         * @param {Symbol} item\n         * @returns {Boolean}\n         */\n        function is_in(obj, item) {\n            if(isMatrix(obj)) {\n                for(var i=0, l=obj.rows(); i<l; i++) {\n                    for(var j=0, l2=obj.cols(); j<l2; j++) {\n                        var element = obj.elements[i][j];\n                        if(element.equals(item))\n                            return new Symbol(1);\n                    }\n                }\n            }\n            else if(obj.elements) {\n                for(var i=0, l=obj.elements.length; i<l; i++) {\n                    if(obj.elements[i].equals(item))\n                        return new Symbol(1);\n                }\n            }\n            \n            return new Symbol(0);\n        }\n        \n        /**\n         * A symbolic extension for sinc\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function sinc(symbol) {\n            if (Settings.PARSE2NUMBER) {\n                if (symbol.isConstant()) {\n                    return new Symbol(Math2.sinc(symbol));\n                }\n                return _.parse(format('sin({0})/({0})', symbol));\n            }\n            return _.symfunction('sinc', [symbol]);\n        }\n\n        /**\n         * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\n         * Thanks @ Happypig375\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function exp(symbol) {\n            return _.parse(format('e^({0})', symbol));\n        }\n        \n        /**\n         * Converts value degrees to radians\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function radians(symbol) {\n            return _.parse(format('({0})*pi/180', symbol));\n        }\n        \n        /**\n         * Converts value from radians to degrees\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function degrees(symbol) {\n            return _.parse(format('({0})*180/pi', symbol));\n        }\n        \n        function nroots(symbol) {\n            var a, b;\n            if(symbol.group === FN && symbol.fname === '') {\n                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n                b = _.parse(symbol.power);\n            }\n            else if(symbol.group === P) {\n                a = _.parse(symbol.value);\n                b = _.parse(symbol.power);\n            }\n            \n            if(a && b && a.group === N && b.group === N) {\n                var _roots = [];\n                var parts = Symbol.toPolarFormArray(symbol);\n                var r = _.parse(a).abs().toString();\n                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n                var x = arg(a).toString();\n                var n = b.multiplier.den.toString();\n                var p = b.multiplier.num.toString();\n                \n                var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\n                for(var i=0; i<n; i++) {\n                    var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n                }\n                return Vector.fromArray(_roots);\n            }\n            else if(symbol.isConstant(true)) {\n                var sign = symbol.sign();\n                var x = evaluate(symbol.abs());\n                var root = _.sqrt(x);\n                \n                var _roots = [root.clone(), root.negate()];\n                \n                if(sign < 0)\n                    _roots = _roots.map(function(x) {\n                        return _.multiply(x, Symbol.imaginary());\n                    });\n            }\n            else {\n                _roots = [_.parse(symbol)];\n            }\n            \n            return Vector.fromArray(_roots);\n        }\n        \n        /**\n         * The square root function\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function sqrt(symbol) {\n            if (symbol.fname === '' && symbol.power.equals(1))\n                symbol = symbol.args[0];\n\n            var is_negative = symbol.multiplier.sign() < 0;\n\n            if (Settings.PARSE2NUMBER) {\n                if (symbol.isConstant() && !is_negative) {\n                    return new Symbol(Math.sqrt(symbol.multiplier.toDecimal()));\n                }\n                else if (symbol.isImaginary()) {\n                    return complex.sqrt(symbol);\n                }\n            }\n\n            var img, retval,\n                    isConstant = symbol.isConstant();\n\n            if (symbol.group === CB && symbol.isLinear()) {\n                var m = sqrt(Symbol(symbol.multiplier));\n                for (var s in symbol.symbols) {\n                    var x = symbol.symbols[s];\n                    m = _.multiply(m, sqrt(x));\n                }\n\n                retval = m;\n            }\n            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\n            else if (symbol.fname === SQRT) {\n                var s = symbol.args[0];\n                var ms = symbol.multiplier;\n                s.setPower(symbol.power.multiply(new Frac(0.25)));\n                retval = s;\n                //grab the multiplier\n                if (!ms.equals(1))\n                    retval = _.multiply(sqrt(_.parse(ms)), retval);\n            }\n            //if the symbol is a fraction then we don't keep can unwrap it. For instance\n            //no need to keep sqrt(x^(1/3))\n            else if (!symbol.power.isInteger()) {\n                symbol.setPower(symbol.power.multiply(new Frac(0.5)));\n                retval = symbol;\n            }\n            else {\n                //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\n                //to sqrt(a)*sqrt(b)^1 for better simplification\n                //the sign of the power\n                var sign = symbol.power.sign();\n                //remove the sign\n                symbol.power = symbol.power.abs();\n\n                //if the symbols is imagary then we place in the imaginary part. We'll return it \n                //as a product\n                if (isConstant && symbol.multiplier.lessThan(0)) {\n                    img = Symbol.imaginary();\n                    symbol.multiplier = symbol.multiplier.abs();\n                }\n\n                var q = symbol.multiplier.toDecimal(),\n                        qa = Math.abs(q),\n                        t = Math.sqrt(qa);\n\n                var m;\n                //it's a perfect square so take the square\n                if (isInt(t)) {\n                    m = new Symbol(t);\n                }\n                else if (isInt(q)) {\n                    var factors = Math2.ifactor(q);\n                    var tw = 1;\n                    for (var x in factors) {\n                        var n = factors[x],\n                                nn = (n - (n % 2)); //get out the whole numbers\n                        if (nn) { //if there is a whole number ...\n                            var w = Math.pow(x, nn);\n                            tw *= Math.pow(x, nn / 2); //add to total wholes\n                            q /= w; //reduce the number by the wholes\n                        }\n                    }\n                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\n                }\n                else {\n                    //reduce the numerator and denominator using prime factorization\n                    var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\n                    var r = [new Symbol(1), new Symbol(1)];\n                    var sq = [new Symbol(1), new Symbol(1)];\n                    for (var i = 0; i < 2; i++) {\n                        var n = c[i];\n                        //get the prime factors and loop through each. \n                        pfactor(n).each(function (x) {\n                            x = Symbol.unwrapPARENS(x);\n                            var b = x.clone().toLinear();\n                            var p = Number(x.power);\n                            //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\n                            var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\n                            var w = (p - rem) / 2; //get the whole numbers of n/2\n                            r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\n                            sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\n                        });\n                    }\n                    m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\n                }\n\n\n                //strip the multiplier since we already took the sqrt\n                symbol = symbol.toUnitMultiplier(true);\n                //if the symbol is one just return one and not the sqrt function\n                if (symbol.isOne()) {\n                    retval = symbol;\n                }\n                else if (even(symbol.power.toString())) {\n                    //just raise it to the 1/2\n                    retval = _.pow(symbol.clone(), new Symbol(0.5));\n                }\n                else {\n                    retval = _.symfunction(SQRT, [symbol]);\n                }\n\n                //put back the sign that was removed earlier\n                if (sign < 0)\n                    retval.power.negate();\n\n                if (m)\n                    retval = _.multiply(m, retval);\n\n                if (img)\n                    retval = _.multiply(img, retval);\n            }\n\n            if (is_negative && Settings.PARSE2NUMBER)\n                return _.parse(retval);\n            return retval;\n        }\n        \n        function scientific(symbol, sigfigs) {\n            //Just set the flag and keep it moving. Symbol.toString will deal with how to \n            //display this\n            symbol.scientific = sigfigs || 10;\n            return symbol;\n        }\n\n        /**\n         * \n         * @param {Symbol} num - the number being raised\n         * @param {Symbol} p - the exponent\n         * @param {type} prec - the precision wanted\n         * @param {bool} asbig - true if a bigDecimal is wanted\n         * @returns {Symbol}\n         */\n        //TODO: this method needs serious optimization\n        function nthroot(num, p, prec, asbig) {\n            if (typeof asbig === 'undefined')\n                asbig = true;\n            prec = prec || 25;\n            if (!isSymbol(p))\n                p = _.parse(p);\n            if (isInt(num) && p.isConstant()) {\n                var sign = num.sign(),\n                        x;\n                num = abs(num); //remove the sign\n                var idx = num + '-' + p;\n                if (idx in Settings.CACHE.roots) {\n                    x = new bigInt(Settings.CACHE.roots[idx]);\n                    if (!even(p))\n                        x = x.multiply(sign);\n                }\n                else {\n                    if (num < 18446744073709551616) //2^64\n                        x = Frac.create(Math.pow(num, 1 / p));\n                    else\n                        x = Math2.nthroot(num, p);\n                }\n                if (isInt(x) || Settings.PARSE2NUMBER) {\n                    if (asbig)\n                        return new Symbol(x);\n                    return new Symbol(x.toDecimal(prec));\n                }\n            }\n\n            if (Number(p) === 2)\n                return _.sqrt(num);\n\n            return _.symfunction('nthroot', arguments);\n        }\n\n        function pfactor(symbol) {\n            //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\n            //More Big Number issues >:(\n            if (symbol.greaterThan(9.999999999998891e+41))\n                return symbol;\n            //Fix issue #298\n            if (symbol.equals(Math.PI))\n                return new Symbol(Math.PI);\n            //evaluate the symbol to merge constants\n            symbol = evaluate(symbol.clone());\n\n\n            if (symbol.isConstant()) {\n                var retval = new Symbol(1);\n                var m = symbol.toString();\n                if (isInt(m)) {\n                    var factors = Math2.ifactor(m);\n                    for (var factor in factors) {\n                        var p = factors[factor];\n                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\n                    }\n                }\n                else {\n                    var n = pfactor(new Symbol(symbol.multiplier.num));\n                    var d = pfactor(new Symbol(symbol.multiplier.den));\n                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\n                }\n            }\n            else\n                retval = _.symfunction('pfactor', arguments);\n            return retval;\n        }\n\n        /**\n         * Get's the real part of a complex number. Return number if real\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function realpart(symbol) {\n            return symbol.realpart();\n        }\n\n        /**\n         * Get's the imaginary part of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function imagpart(symbol) {\n            return symbol.imagpart();\n        }\n\n        /**\n         * Computes the conjugate of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function conjugate(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\n        }\n\n        /**\n         * Returns the arugment of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function arg(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            if (re.isConstant() && im.isConstant())\n                return new Symbol(Math.atan2(im, re));\n            return _.symfunction('atan2', [im, re]);\n        }\n\n        /**\n         * Returns the arugment of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function arg(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            if (re.isConstant() && im.isConstant()) {\n                if(im.equals(0) && re.equals(-1)) {\n                    return _.parse('pi');\n                }\n                else if(im.equals(1) && re.equals(0)) {\n                    return _.parse('pi/2');\n                }\n                else if(im.equals(1) && re.equals(1)) {\n                    return _.parse('pi/4');\n                }\n                return new Symbol(Math.atan2(im, re));\n            }\n            return _.symfunction('atan2', [im, re]);\n        }\n\n        /**\n         * Returns the polarform of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function polarform(symbol) {\n            var p, r, e, theta;\n            p = Symbol.toPolarFormArray(symbol);\n            theta = p[1];\n            r = p[0];\n            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\n            return _.multiply(r, e);\n        }\n\n        /**\n         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function rectform(symbol) {\n            //TODO: e^((i*pi)/4)\n            var original = symbol.clone();\n            try {\n                var f, p, q, s, h, d, n;\n                f = decompose_fn(symbol, 'e', true);\n                p = _.divide(f.x.power, Symbol.imaginary());\n                q = evaluate(trig.tan(p));\n                s = _.pow(f.a, new Symbol(2));\n                d = q.getDenom(true);\n                n = q.getNum();\n                h = Symbol.hyp(n, d);\n                //check \n                if (h.equals(f.a)) {\n                    return _.add(d, _.multiply(Symbol.imaginary(), n));\n                }\n                else {\n                    return original;\n                }\n            }\n            catch (e) {\n                return original;\n            }\n        }\n\n        function symMinMax(f, args) {\n            args.map(function (x) {\n                x.numVal = evaluate(x).multiplier;\n            });\n            var l, a, b, a_val, b_val;\n            while (true) {\n                l = args.length;\n                if (l < 2)\n                    return args[0];\n                a = args.pop();\n                b = args[l - 2];\n                if (f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\n                    args.pop();\n                    args.push(a);\n                }\n            }\n        }\n\n        /**\n         * Returns maximum of a set of numbers\n         * @returns {Symbol}\n         */\n        function max() {\n            var args = [].slice.call(arguments);\n            if (allSame(args))\n                return args[0];\n            if (allNumbers(args))\n                return new Symbol(Math.max.apply(null, args));\n            if (Settings.SYMBOLIC_MIN_MAX && allConstants(args))\n                return symMinMax('max', args);\n            return _.symfunction('max', args);\n        }\n\n        /**\n         * Returns minimum of a set of numbers\n         * @returns {Symbol}\n         */\n        function min() {\n            var args = [].slice.call(arguments);\n            if (allSame(args))\n                return args[0];\n            if (allNumbers(args))\n                return new Symbol(Math.min.apply(null, args));\n            if (Settings.SYMBOLIC_MIN_MAX && allConstants(args))\n                return symMinMax('min', args);\n            return _.symfunction('min', args);\n        }\n\n        /**\n         * Returns the sign of a number\n         * @param {Symbol} x\n         * @returns {Symbol}\n         */\n        function sign(x) {\n            if (x.isConstant(true))\n                return new Symbol(Math.sign(evaluate(x)));\n            return _.symfunction('sign', arguments);\n        }\n\n        function sort(symbol, opt) {\n            opt = opt ? opt.toString() : 'asc';\n            var getval = function (e) {\n                if (e.group === N)\n                    return e.multiplier;\n                if (e.group === FN) {\n                    if (e.fname === '')\n                        return getval(e.args[0]);\n                    return e.fname;\n                }\n                if (e.group === S)\n                    return e.power;\n\n                return e.value;\n            };\n            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\n            return new Vector(symbols.sort(function (a, b) {\n                var aval = getval(a),\n                        bval = getval(b);\n                if (opt === 'desc')\n                    return bval - aval;\n                return aval - bval;\n            }));\n        }\n\n        /**\n         * The log function\n         * @param {Symbol} symbol\n         * @param {Symbol} base\n         * @returns {Symbol}\n         */\n        function log(symbol, base) {\n            if(symbol.equals(1)) {\n                return new Symbol(0);\n            }\n            \n            var retval;\n            if (symbol.fname === SQRT && symbol.multiplier.equals(1)) {\n                return _.divide(log(symbol.args[0]), new Symbol(2));\n            }\n\n            //log(0) is undefined so complain\n            if (symbol.equals(0)) {\n                throw new UndefinedError(Settings.LOG+'(0) is undefined!');\n            }\n\n            //deal with imaginary values\n            if (symbol.isImaginary()) {\n                return complex.evaluate(symbol, Settings.LOG);\n                /*\n                 var a = format('log(sqrt(({0})^2+({1})^2))-({2})*atan2(({1}),({0}))', symbol.imagpart(), symbol.realpart(), Settings.IMAGINARY),\n                 b = format('({0})*PI/2', Settings.IMAGINARY);\n                 \n                 return _.add(_.parse(a), _.parse(b));\n                 */\n            }\n\n            if (symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\n                /*\n                 var log_sym = Math2.bigLog(symbol.multiplier);\n                 var log_base = Math2.bigLog(base.multiplier);\n                 retval = new Symbol(log_sym.divide());\n                 */\n                var log_sym = Math.log(symbol);\n                var log_base = Math.log(base);\n                retval = new Symbol(log_sym / log_base);\n            }\n            else if (symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\n                symbol.power.negate();\n                //move the negative outside but keep the positive inside :)\n                retval = log(symbol).negate();\n            }\n            else if (symbol.value === 'e' && symbol.multiplier.equals(1)) {\n                var p = symbol.power;\n                retval = isSymbol(p) ? p : new Symbol(p);\n            }\n            else if (symbol.group === FN && symbol.fname === 'exp') {\n                var s = symbol.args[0];\n                if (symbol.multiplier.equals(1))\n                    retval = _.multiply(s, new Symbol(symbol.power));\n                else\n                    retval = _.symfunction(Settings.LOG, [symbol]);\n            }\n            else if (Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\n                var img_part;\n                if (symbol.multiplier.lessThan(0)) {\n                    symbol.negate();\n                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\n                }\n                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\n                if (img_part)\n                    retval = _.add(retval, img_part);\n            }\n            else {\n                var s;\n                if (!symbol.power.equals(1)) {\n                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\n                    symbol.toLinear();\n                }\n                //log(a,a) = 1 since the base is allowed to be changed. \n                //This was pointed out by Happypig375 in issue #280\n                if (arguments.length > 1 && allSame(arguments))\n                    retval = new Symbol(1);\n                else\n                    retval = _.symfunction(Settings.LOG, arguments);\n\n                if (s)\n                    retval = _.multiply(s, retval);\n            }\n            return retval;\n        }\n\n        /**\n         * Round a number up to s decimal places\n         * @param {Number} x\n         * @param {int} s - the number of decimal places\n         * @returns {undefined}\n         */\n        function round(x, s) {\n            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\n            if (x.isConstant() && sIsConstant) {\n                var v, e, exp, retval;\n                v = x;\n                //round the coefficient of then number but not the actual decimal value\n                //we know this because a negative number was passed\n                if (s && s.lessThan(0)) {\n                    s = abs(s);\n                    //convert the number to exponential form\n                    e = Number(x).toExponential().toString().split('e');\n                    //point v to the coefficient of then number\n                    v = e[0];\n                    //set the expontent\n                    exp = e[1];\n                }\n                //round the number to the requested precision\n                retval = new Symbol(nround(v, Number(s || 0)));\n                //if there's a exponent then put it back\n                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))\n            }\n\n\n            return _.symfunction('round', arguments);\n        }\n\n        /**\n         * Gets the quadrant of the trig function\n         * @param {Frac} m\n         * @returns {Int}\n         */\n        function getQuadrant(m) {\n            var v = m % 2, quadrant;\n\n            if (v < 0)\n                v = 2 + v; //put it in terms of pi\n\n            if (v >= 0 && v <= 0.5)\n                quadrant = 1;\n            else if (v > 0.5 && v <= 1)\n                quadrant = 2;\n            else if (v > 1 && v <= 1.5)\n                quadrant = 3;\n            else\n                quadrant = 4;\n            return quadrant;\n        }\n\n        /*\n         * Serves as a bridge between numbers and bigNumbers\n         * @param {Frac|Number} n\n         * @returns {Symbol} \n         */\n        function bigConvert(n) {\n            if (!isFinite(n)) {\n                var sign = Math.sign(n);\n                var r = new Symbol(String(Math.abs(n)));\n                r.multiplier = r.multiplier.multiply(new Frac(sign));\n                return r;\n            }\n            if (isSymbol(n))\n                return n;\n            if (typeof n === 'number') {\n                try {\n                    n = Frac.simple(n);\n                }\n                catch (e) {\n                    n = new Frac(n);\n                }\n            }\n\n            var symbol = new Symbol(0);\n            symbol.multiplier = n;\n            return symbol;\n        }\n        ;\n\n        function clean(symbol) {\n            // handle functions with numeric values\n            // handle denominator within denominator\n            // handle trig simplifications\n            var g = symbol.group, retval;\n            //Now let's get to work\n            if (g === CP) {\n                var num = symbol.getNum(),\n                        den = symbol.getDenom() || new Symbol(1),\n                        p = Number(symbol.power),\n                        factor = new Symbol(1);\n                if (Math.abs(p) === 1) {\n                    den.each(function (x) {\n                        if (x.group === CB) {\n                            factor = _.multiply(factor, clean(x.getDenom()));\n                        }\n                        else if (x.power.lessThan(0)) {\n                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\n                        }\n                    });\n\n                    var new_den = new Symbol(0);\n                    //now divide out the factor and add to new den\n                    den.each(function (x) {\n                        new_den = _.add(_.divide(x, factor.clone()), new_den);\n                    });\n\n                    factor.invert(); //invert so it can be added to the top\n                    var new_num;\n                    if (num.isComposite()) {\n                        new_num = new Symbol(0);\n                        num.each(function (x) {\n                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\n                        });\n                    }\n                    else\n                        new_num = _.multiply(factor, num);\n\n                    retval = _.divide(new_num, new_den);\n                }\n            }\n            else if (g === CB) {\n                retval = new Symbol(1);\n                symbol.each(function (x) {\n                    retval = _.multiply(retval, _.clean(x));\n                });\n            }\n            else if (g === FN) {\n                if (symbol.args.length === 1 && symbol.args[0].isConstant())\n                    retval = block('PARSE2NUMBER', function () {\n                        return _.parse(symbol);\n                    }, true);\n            }\n\n            if (!retval)\n                retval = symbol;\n\n            return retval;\n        }\n\n        /**\n         * Expands a symbol\n         * @param symbol\n         */\n        function expand(symbol) {\n            //deal with parenthesis\n            if (symbol.group === FN && symbol.fname === '') {\n                return _.expand(symbol.args[0]);\n            }\n\n            //TODO - some test need to be verified in order to implement this\n            /*\n             if(symbol.group === FN) {\n             symbol.args[0] = _.expand(symbol.args[0]);\n             symbol.updateHash();\n             return symbol;\n             }\n             */\n\n            if (!symbol.symbols)\n                return symbol; //nothing to do\n\n            var original = symbol.clone();\n            try {\n\n                if (!symbol.symbols)\n                    return symbol;\n\n                //expand all the symbols\n                for (var s in symbol.symbols) {\n                    var x = symbol.symbols[s];\n                    symbol.symbols[s] = expand(x);\n                }\n\n                symbol = _.parse(symbol);\n\n                var p = symbol.power,\n                        m = symbol.multiplier.clone(),\n                        pn = Number(p);\n                if (isInt(pn) && pn > 0 && symbol.isComposite()) {\n                    var f = new Symbol(0);\n                    //we loop through the f and make sure that it's fully expanded\n                    for (var x in symbol.symbols) {\n                        var sym = symbol.symbols[x];\n                        if (sym.power.greaterThan(1))\n                            sym = _.expand(sym);\n                        f = _.add(f, sym);\n                    }\n\n                    //assume (a+b)^3 = (a+b)(a+b)(a+b) = (b^2+2*a*b+a^2)(a+b)\n                    //we have n=p-1=2 iterations where p=3 in this case\n                    var n = pn - 1;\n                    //Initiate with the first term. Remember that we have p-1 iterations because\n                    //the first iteration is equal to P where p is the polynomial\n                    var result = f.clone(); //initiate this as the first term\n                    //the first loop is the top iterator and remains untouched. No sub-symbols\n                    //from this symbol are allowed to be touched\n                    for (var i = 0; i < n; i++) {\n                        var t = new Symbol(0);\n                        for (var x in f.symbols) {\n                            var a = f.symbols[x];\n                            //we now loop through the \n                            for (var y in result.symbols) {\n                                var b = _.multiply(a.clone(), result.symbols[y]);\n                                //the result must always be a composite. If not expand\n                                if (b.group === CB)\n                                    b = _.expand(b);\n                                t = _.add(t, b);\n                            }\n                        }\n                        ;\n                        result = t;\n                    }\n\n                    //put back the multiplier\n                    if (!m.equals(1)) {\n                        for (var s in result.symbols) {\n                            var x = result.symbols[s];\n                            x.multiplier = x.multiplier.multiply(m);\n                            if (x.isComposite())\n                                x.distributeMultiplier();\n                            symbol.symbols[s] = x;\n                        }\n                    }\n\n                    return result;\n                }\n                else if (symbol.group === CB) {\n                    //check if the symbol has composites\n                    var hascomposites = false,\n                            sp = symbol.power.clone(),\n                            sign = symbol.power.sign();\n\n                    for (var x in symbol.symbols) {\n                        var sub = symbol.symbols[x];\n                        if (sub.isComposite()) {\n                            hascomposites = true;\n                            break;\n                        }\n\n                        if (isSymbol(sub.power) || isSymbol(sp)) {\n                            sub.power = _.multiply(sub.power, Symbol(sp));\n                            sub.group = EX;\n                        }\n                        else\n                            sub.power = sub.power.multiply(sp);\n                    }\n\n                    symbol.toLinear();\n\n                    //I'm going to be super lazy here and take the easy way out. TODO: do this without re-parsing\n                    symbol = _.parse(symbol.text());\n\n                    if (!hascomposites)\n                        return symbol; //nothing to do here\n\n                    var result = new Symbol(0);\n                    var composites = [],\n                            non_composites = new Symbol(symbol.multiplier);\n\n                    //sort them out\n                    for (var s in symbol.symbols) {\n                        var x = symbol.symbols[s];\n\n                        if (x.group === EX)\n                            continue;\n                        if (x.isComposite()) {\n                            var p = x.power, isDenom = false;\n                            ;\n                            if (isInt(p)) {\n                                if (p < 0) {\n                                    x.power.negate();\n                                    isDenom = true;\n                                }\n                            }\n\n                            if (isDenom) {\n                                x.power.negate();\n                                non_composites = _.multiply(non_composites, x);\n                            }\n                            else\n                                composites.push(x);\n                        }\n                        else\n                            non_composites = _.multiply(non_composites, x);\n                    }\n\n                    //grab the first symbol since we'll loop over that one to begin\n                    result = composites.pop();\n\n                    while (composites.length) {\n                        var s = composites.pop();\n                        var t = new Symbol(0);\n                        result.each(function (x) {\n                            s.each(function (y) {\n                                var prod = _.multiply(x.clone(), y.clone());\n                                t = _.add(t, prod);\n                            });\n                        });\n\n                        result = t;\n                    }\n\n                    var finalResult = new Symbol(0);\n                    //put back the multiplier\n                    result.each(function (x) {\n                        finalResult = _.add(finalResult, expand(_.multiply(non_composites, x)));\n                    });\n                    //expand the power\n                    finalResult.power = finalResult.power.multiply(sp.abs());\n\n                    symbol = _.expand(finalResult);\n\n                    if (sign < 0)\n                        symbol.invert();\n                }\n            }\n            catch (e) {\n                return original;\n            }\n\n            return symbol;\n        }\n        \n        /**\n         * Returns an identity matrix of nxn\n         * @param {Number} n\n         * @returns {Matrix}\n         */\n        function imatrix(n) {\n            return Matrix.identity(n);\n        }\n        \n        /**\n         * Retrieves and item from a vector\n         * @param {Vector} vector\n         * @param {Number} index\n         * @returns {Vector|Symbol}\n         */\n        function vecget(vector, index) {\n            if (index.isConstant() && isInt(index))\n                return vector.elements[index];\n            return _.symfunction('vecget', arguments);\n        }\n        \n        /**\n         * Removes duplicates from a vector\n         * @param {Vector} vector\n         * @param {Number} tolerance\n         * @returns {Vector}\n         */\n        function vectrim(vector, tolerance) {\n            tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\n            \n            vector = vector.clone();\n            \n            tolerance = Number(tolerance);\n            //place algebraic solutions first\n            vector.elements.sort(function(a, b) {\n                return b.group - a.group;\n            });\n            //depending on the start point we may have duplicates so we need to clean those up a bit.\n            //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\n            vector.elements = removeDuplicates(vector.elements, function(a, b) {\n                var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\n                return diff <= tolerance;\n            });\n            \n            return vector;\n        }\n        \n        /**\n         * Set a value for a vector at a given index\n         * @param {Vector} vector\n         * @param {Number} index\n         * @param {Symbol} value\n         * @returns {Vector}\n         */\n        function vecset(vector, index, value) {\n            if (!index.isConstant)\n                return _.symfunction('vecset', arguments);\n            vector.elements[index] = value;\n            return vector;\n        }\n\n        function matget(matrix, i, j) {\n            if (i.isConstant() && j.isConstant())\n                return matrix.elements[i][j];\n            return _.symfunction('matget', arguments);\n        }\n\n        function matgetrow(matrix, i) {\n            if (i.isConstant())\n                return new Matrix(matrix.elements[i]);\n            return _.symfunction('matgetrow', arguments);\n        }\n\n        function matsetrow(matrix, i, x) {\n            //handle symbolics\n            if (!i.isConstant())\n                return _.symfunction('matsetrow', arguments);\n            if (matrix.elements[i].length !== x.elements.length)\n                throw new DimensionError('Matrix row must match row dimensions!');\n            var M = matrix.clone();\n            M.elements[i] = x.clone().elements;\n            return M;\n        }\n\n        function matgetcol(matrix, col_index) {\n            //handle symbolics\n            if (!col_index.isConstant())\n                return _.symfunction('matgetcol', arguments);\n            col_index = Number(col_index);\n            var M = Matrix.fromArray([]);\n            matrix.each(function (x, i, j) {\n                if (j === col_index) {\n                    M.elements.push([x.clone()]);\n                }\n            });\n            return M;\n        }\n\n        function matsetcol(matrix, j, col) {\n            //handle symbolics\n            if (!j.isConstant())\n                return _.symfunction('matsetcol', arguments);\n            j = Number(j);\n            if (matrix.rows() !== col.elements.length)\n                throw new DimensionError('Matrix columns must match number of columns!');\n            col.each(function (x, i) {\n                matrix.set(i - 1, j, x.elements[0].clone());\n            });\n            return matrix;\n        }\n\n\n        function matset(matrix, i, j, value) {\n            matrix.elements[i][j] = value;\n            return matrix;\n        }\n\n        //the constructor for vectors\n        function vector() {\n            return new Vector([].slice.call(arguments));\n        }\n\n        //the constructor for matrices\n        function matrix() {\n            return Matrix.fromArray(arguments);\n        }\n        \n        //the constructor for sets\n        function set() {\n            return Set.fromArray(arguments);\n        }\n\n        function determinant(symbol) {\n            if (isMatrix(symbol)) {\n                return symbol.determinant();\n            }\n            return symbol;\n        }\n\n        function size(symbol) {\n            var retval;\n            if (isMatrix(symbol))\n                retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];\n            else if(isVector(symbol) || isSet(symbol)) \n                retval = new Symbol(symbol.elements.length);\n            else\n                err('size expects a matrix or a vector');\n            return retval;\n        }\n\n        function dot(vec1, vec2) {\n            if (isVector(vec1) && isVector(vec2))\n                return vec1.dot(vec2);\n            err('function dot expects 2 vectors');\n        }\n\n        function cross(vec1, vec2) {\n            if (isVector(vec1) && isVector(vec2))\n                return vec1.cross(vec2);\n            err('function cross expects 2 vectors');\n        }\n\n        function transpose(mat) {\n            if (isMatrix(mat))\n                return mat.transpose();\n            err('function transpose expects a matrix');\n        }\n\n        function invert(mat) {\n            if (isMatrix(mat))\n                return mat.invert();\n            err('invert expects a matrix');\n        }\n        \n        //basic set functions\n        function union(set1, set2) {\n            return set1.union(set2);\n        }\n        \n        function intersection(set1, set2) {\n            return set1.intersection(set2);\n        }\n        \n        function contains(set1, e) {\n            return set1.contains(e);\n        }\n        \n        function difference(set1, set2) {\n            return set1.difference(set2);\n        }\n        \n        function intersects(set1, set2) {\n            return new Symbol(Number(set1.intersects(set2)));\n        }\n        \n        function is_subset(set1, set2) {\n            return new Symbol(Number(set1.is_subset(set2)));\n        }\n        \n        function print() {\n            arguments2Array(arguments).map(function(x) {\n                console.log(x.toString());\n            });\n        }\n        \n        function testSQRT(symbol) {\n            //wrap the symbol in sqrt. This eliminates one more check down the line.\n            if (!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\n                var sign = symbol.power.sign();\n                //don't devide the power directly. Notice the use of toString. This makes it possible\n                //to use a bigNumber library in the future\n                var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\n                //place back the sign of the power\n                if (sign < 0)\n                    retval.invert();\n                return retval;\n            }\n            return symbol;\n        }\n\n        //try to reduce a symbol by pulling its power\n        function testPow(symbol) {\n            if (symbol.group === P) {\n                var v = symbol.value;\n                \n                var fct = primeFactors(v)[0];\n                \n                //safety\n                if(!fct) {\n                    warn('Unable to compute prime factors. This should not happen. Please review and report.');\n                    return symbol;\n                }\n                \n                var n = new Frac(Math.log(v) / Math.log(fct)),\n                    p = n.multiply(symbol.power);\n                \n                //we don't want a more complex number than before \n                if (p.den > symbol.power.den)\n                    return symbol;\n\n                if (isInt(p))\n                    symbol = Symbol(Math.pow(fct, p));\n                else\n                    symbol = new Symbol(fct).setPower(p);\n            }\n\n            return symbol;\n        }\n\n        //Linke the functions to the parse so they're available outside of the library\n        //This is strictly for convenience and may be deprecated.\n        this.expand = expand;\n        this.round = round;\n        this.clean = clean;\n        this.sqrt = sqrt;\n        this.log = log;\n        this.nthroot = nthroot;\n        this.arg = arg;\n        this.conjugate = conjugate;\n        this.imagpart = imagpart;\n        this.realpart = realpart;\n\n//Parser.methods ===============================================================\n        this.addPreprocessor = function (name, action, order, shift_cells) {\n            var names = preprocessors.names;\n            var actions = preprocessors.actions;\n            if ((typeof action !== 'function')) //the person probably forgot to specify a name\n                throw new PreprocessorError('Incorrect parameters. Function expected!');\n            if (!order) {\n                names.push(name);\n                actions.push(action);\n            }\n            else {\n                if (shift_cells) {\n                    names.splice(order, 0, name);\n                    actions.splice(order, 0, action);\n                }\n                else {\n                    names[order] = name;\n                    actions[order] = action;\n                }\n            }\n        };\n\n        this.getPreprocessors = function () {\n            var preprocessors = {};\n            for (var i = 0, l = preprocessors.names.length; i < l; i++) {\n                var name = preprocessors.names[i];\n                preprocessors[name] = {\n                    order: i,\n                    action: preprocessors.actions[i]\n                };\n            }\n            return preprocessors;\n        };\n\n        this.removePreprocessor = function (name, shift_cells) {\n            var i = preprocessors.names.indexOf(name);\n            if (shift_cells) {\n                remove(preprocessors.names, i);\n                remove(preprocessors.actions, i);\n            }\n            else {\n                preprocessors.names[i] = undefined;\n                preprocessors.actions[i] = undefined;\n            }\n        };\n\n        //The loader for functions which are not part of Math2\n        this.mapped_function = function () {\n            var subs = {},\n                    params = this.params;\n            for (var i = 0; i < params.length; i++)\n                subs[params[i]] = arguments[i];\n\n            return _.parse(this.body, subs);\n        };\n        /**\n         * Adds two symbols\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.add = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            //we're dealing with two symbols\n            if (aIsSymbol && bIsSymbol) {\n                //forward the adding of symbols with units to the Unit module\n                if (a.unit || b.unit) {\n                    return _.Unit.add(a, b);\n                }\n                //handle Infinity\n                //https://www.encyclopediaofmath.org/index.php/Infinity\n                if (a.isInfinity || b.isInfinity) {\n                    var aneg = a.multiplier.lessThan(0),\n                            bneg = b.multiplier.lessThan(0);\n\n                    if (a.isInfinity && b.isInfinity && aneg !== bneg) {\n                        throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\n                    }\n\n                    var inf = Symbol.infinity();\n                    if (bneg)\n                        inf.negate();\n                    return inf;\n                }\n\n                if (a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\n                    a.distributeMultiplier();\n                    b.distributeMultiplier();\n                }\n                //no need to waste time on zeroes\n                if (a.multiplier.equals(0))\n                    return b;\n                if (b.multiplier.equals(0))\n                    return a;\n\n                if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n                    var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\n                    return result;\n                }\n\n                var g1 = a.group,\n                        g2 = b.group,\n                        ap = a.power.toString(),\n                        bp = b.power.toString();\n\n                //always keep the greater group on the left. \n                if (g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {\n                    return this.add(b, a);\n                }\n\n                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\n                 * because it doesn't know which one to prioritize. */\n                //correction to PL dilemma\n                if (g1 === CB && g2 === PL && a.value === b.value) {\n                    //swap\n                    var t = a;\n                    a = b;\n                    b = t;\n                    g1 = a.group;\n                    g2 = b.group;\n                    ap = a.power.toString();\n                    bp = b.power.toString();\n                }\n\n                var powEQ = ap === bp,\n                        v1 = a.value,\n                        v2 = b.value,\n                        aIsComposite = a.isComposite(),\n                        bIsComposite = b.isComposite(),\n                        h1, h2, result;\n\n                if (aIsComposite)\n                    h1 = text(a, 'hash');\n                if (bIsComposite)\n                    h2 = text(b, 'hash');\n\n                if (g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\n                    return this.add(b, a);\n                }\n\n                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\n                if (g1 === PL && g2 === PL) {\n                    v1 = h1;\n                    v2 = h2;\n                }\n\n                var PN = g1 === P && g2 === N,\n                        PNEQ = a.value === b.multiplier.toString(),\n                        valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));\n\n                //equal values, equal powers\n                if (valEQ && powEQ && g1 === g2) {\n                    //make sure to convert N to something P can work with\n                    if (PN)\n                        b = b.convert(P);//CL\n\n                    //handle PL\n                    if (g1 === PL && (g2 === S || g2 === P)) {\n                        a.distributeMultiplier();\n                        result = a.attach(b);\n                    }\n                    else {\n                        result = a;//CL\n                        if (a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\n                            for (var s in b.symbols) {\n                                var x = b.symbols[s];\n                                result.attach(x);\n                            }\n                        }\n                        else\n                            result.multiplier = result.multiplier.add(b.multiplier);\n                    }\n                }\n                //equal values uneven powers\n                else if (valEQ && g1 !== PL) {\n                    //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\n                    if (g1 === CP && g2 === PL) {\n                        b.insert(a);\n                        result = b;\n                    }\n                    else {\n                        result = Symbol.shell(PL).attach([a, b]);\n                        //update the hash\n                        result.value = g1 === PL ? h1 : v1;\n                    }\n                }\n                else if (aIsComposite && a.isLinear()) {\n                    var canIterate = g1 === g2,\n                            bothPL = g1 === PL && g2 === PL;\n\n                    //we can only iterate group PL if they values match\n                    if (bothPL)\n                        canIterate = a.value === b.value;\n                    //distribute the multiplier over the entire symbol\n                    a.distributeMultiplier();\n\n                    if (b.isComposite() && b.isLinear() && canIterate) {\n                        b.distributeMultiplier();\n                        //CL\n                        for (var s in b.symbols) {\n                            var x = b.symbols[s];\n                            a.attach(x);\n                        }\n                        result = a;\n                    }\n                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\n                    else if (bothPL && a.value !== h2 || g1 === PL && !valEQ) {\n                        result = Symbol.shell(CP).attach([a, b]);\n                        result.updateHash();\n\n                    }\n                    else {\n                        result = a.attach(b);\n                    }\n                }\n                else {\n                    if (g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\n                        var m = b.multiplier.clone();\n                        b = sqrt(b.toUnitMultiplier().toLinear());\n                        b.multiplier = m;\n                    }\n                    //fix for issue #3 and #159\n                    if (a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\n                        result = _.add(expand(a), expand(b));\n                    }\n                    else {\n                        result = Symbol.shell(CP).attach([a, b]);\n                        result.updateHash();\n                    }\n                }\n\n                if (result.multiplier.equals(0))\n                    result = new Symbol(0);\n\n                //make sure to remove unnecessary wraps\n                if (result.length === 1) {\n                    var m = result.multiplier;\n                    result = firstObject(result.symbols);\n                    result.multiplier = result.multiplier.multiply(m);\n                }\n\n                return result;\n            }\n            else {\n                //keep symbols to the right \n                if (bIsSymbol && !aIsSymbol) {\n                    var t = a;\n                    a = b;\n                    b = t; //swap\n                    t = bIsSymbol;\n                    bIsSymbol = aIsSymbol;\n                    aIsSymbol = t;\n                }\n\n                var bIsMatrix = isMatrix(b);\n\n                if (aIsSymbol && bIsMatrix) {\n                    b.eachElement(function (e) {\n                        return _.add(a.clone(), e);\n                    });\n                }\n                else {\n                    if (isMatrix(a) && bIsMatrix) {\n                        b = a.add(b);\n                    }\n                    else if (aIsSymbol && isVector(b)) {\n                        b.each(function (x, i) {\n                            i--;\n                            b.elements[i] = _.add(a.clone(), b.elements[i]);\n                        });\n                    }\n                    else {\n                        if (isVector(a) && isVector(b)) {\n                            b.each(function (x, i) {\n                                i--;\n                                b.elements[i] = _.add(a.elements[i], b.elements[i]);\n                            });\n                        }\n                        else if (isVector(a) && isMatrix(b)) {\n                            //try to convert a to a matrix\n                            return _.add(b, a);\n                        }\n                        else if (isMatrix(a) && isVector(b)) {\n                            if (b.elements.length === a.rows()) {\n                                var M = new Matrix(), l = a.cols();\n                                b.each(function (e, i) {\n                                    var row = [];\n                                    for (var j = 0; j < l; j++) {\n                                        row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\n                                    }\n                                    M.elements.push(row);\n                                });\n                                return M;\n                            }\n                            else\n                                err('Dimensions must match!');\n                        }\n                    }\n                }\n                return b;\n            }\n\n        };\n        /**\n         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.subtract = function (a, b) {\n            var aIsSymbol = aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b), t;\n\n            if (aIsSymbol && bIsSymbol) {\n                if (a.unit || b.unit) {\n                    return _.Unit.subtract(a, b);\n                }\n                return this.add(a, b.negate());\n            }\n            else {\n                if (bIsSymbol && isVector(a)) {\n                    b = a.map(function (x) {\n                        return _.subtract(x, b.clone());\n                    });\n                }\n                else if (aIsSymbol && isVector(b)) {\n                    b = b.map(function (x) {\n                        return _.subtract(a.clone(), x);\n                    });\n                }\n                else if (isVector(a) && isVector(b)) {\n                    if (a.dimensions() === b.dimensions())\n                        b = a.subtract(b);\n                    else\n                        _.error('Unable to subtract vectors. Dimensions do not match.');\n                }\n                else if (isMatrix(a) && isVector(b)) {\n                    if (b.elements.length === a.rows()) {\n                        var M = new Matrix(), l = a.cols();\n                        b.each(function (e, i) {\n                            var row = [];\n                            for (var j = 0; j < l; j++) {\n                                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\n                            }\n                            M.elements.push(row);\n                        });\n                        return M;\n                    }\n                    else\n                        err('Dimensions must match!');\n                }\n                else if (isVector(a) && isMatrix(b)) {\n                    var M = b.clone().negate();\n                    return _.add(M, a);\n                }\n                else if (isMatrix(a) && isMatrix(b)) {\n                    b = a.subtract(b);\n                }\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the * operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.multiply = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            //we're dealing with function assignment here\n            if (aIsSymbol && b instanceof Collection) {\n                b.elements.push(a);\n                return b;\n            }\n            if (aIsSymbol && bIsSymbol) {\n                //if it has a unit then add it and return it right away.\n                if (b.isUnit) {\n                    var result = a.clone();\n                    a.unit = b;\n                    return result;\n                }\n                //if it has units then just forward that problem to the unit module\n                if (a.unit || b.unit) {\n                    return _.Unit.multiply(a, b);\n                }\n\n                //handle Infinty\n                if (a.isInfinity || b.isInfinity) {\n                    if (a.equals(0) || b.equals(0))\n                        throw new UndefinedError(a + '*' + b + ' is undefined!');\n                    //x/infinity\n                    if (b.power.lessThan(0)) {\n                        if (!a.isInfinity) {\n                            return new Symbol(0);\n                        }\n                        else {\n                            throw new UndefinedError('Infinity/Infinity is not defined!');\n                        }\n                    }\n\n                    var sign = a.multiplier.multiply(b.multiplier).sign(),\n                            inf = Symbol.infinity();\n                    if (a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {\n                        if (sign < 0)\n                            inf.negate();\n\n                        return inf;\n                    }\n                }\n                //the quickies\n                if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n                    var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\n                    var retval = new Symbol(t);\n                    return retval;\n                }\n\n                //don't waste time\n                if (a.isOne()) {\n                    return b.clone();\n                }\n                if (b.isOne()) {\n                    return a.clone();\n                }\n\n                if (a.multiplier.equals(0) || b.multiplier.equals(0))\n                    return new Symbol(0);\n\n                if (b.group > a.group && !(b.group === CP))\n                    return this.multiply(b, a);\n                //correction for PL/CB dilemma\n                if (a.group === CB && b.group === PL && a.value === b.value) {\n                    var t = a;\n                    a = b;\n                    b = t;//swap\n                }\n\n                var g1 = a.group,\n                        g2 = b.group,\n                        bnum = b.multiplier.num,\n                        bden = b.multiplier.den;\n\n                if (g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\n                    //unwrap sqrt\n                    var a_pow = a.power;\n                    a = a.args[0].clone();\n                    a.setPower(new Frac(0.5).multiply(a_pow));\n                    g1 = a.group;\n                }\n                //simplify n/sqrt(n). Being very specific\n                else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\n                    a = _.symfunction(SQRT,[b.clone()]);\n                    b = new Symbol(1);\n                };\n\n                var v1 = a.value,\n                        v2 = b.value,\n                        sign = new Frac(a.sign()),\n                        //since P is just a morphed version of N we need to see if they relate\n                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),\n                        //don't multiply the multiplier of b since that's equal to the value of a\n                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\n                        result = a.clone().toUnitMultiplier();\n                b = b.clone().toUnitMultiplier(true);\n\n                //further simplification of sqrt\n                if (g1 === FN && g2 === FN) {\n                    var u = a.args[0].clone();\n                    var v = b.args[0].clone();\n                    if (a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\n\n                        var q = _.divide(u, v).invert();\n                        if (q.gt(1) && isInt(q)) {\n                            //b contains a factor a which can be moved to a\n                            result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\n                            b = new Symbol(1);\n                        }\n                    }\n                    if (a.fname === FACTORIAL && b.fname === FACTORIAL) {\n                        if (a.power.equals(1) && b.power.equals(-1) && _.subtract(v.clone(), u.clone()).equals(1)) {\n                            if(u.isConstant(true) && v.isConstant(true)) {\n                                var _a = evaluate(a.clone());\n                                var _b = evaluate(b.clone());\n                                result = _.multiply(_a, _b);\n                            }\n                            else {\n                                result = _.divide(u, v);\n                            }\n                            b = new Symbol(1);\n                        }\n                    }\n                }\n\n\n                //if both are PL then their hashes have to match\n                if (v1 === v2 && g1 === PL && g1 === g2) {\n                    v1 = a.text('hash');\n                    v2 = b.text('hash');\n                }\n\n                //same issue with (x^2+1)^x*(x^2+1)\n                //EX needs an exception when multiplying because it needs to recognize\n                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\n                if (g2 === EX && b.previousGroup === PL && g1 === PL) {\n                    v1 = text(a, 'hash', EX);\n                }\n\n                if ((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\n                    var p1 = a.power,\n                            p2 = b.power,\n                            isSymbolP1 = isSymbol(p1),\n                            isSymbolP2 = isSymbol(p2),\n                            toEX = (isSymbolP1 || isSymbolP2);\n                    //TODO: this needs cleaning up\n                    if (g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\n                        result = new Symbol(0);\n                        a.each(function (x) {\n                            result = _.add(result, _.multiply(x, b.clone()));\n                        }, true);\n                    }\n                    else {\n                        //add the powers\n                        result.power = toEX ? _.add(\n                                !(isSymbol(p1)) ? new Symbol(p1) : p1,\n                                !(isSymbol(p2)) ? new Symbol(p2) : p2\n                                ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));\n\n                        //eliminate zero power values and convert them to numbers\n                        if (result.power.equals(0))\n                            result = result.convert(N);\n\n                        //properly convert to EX\n                        if (toEX)\n                            result.convert(EX);\n\n                        //take care of imaginaries\n                        if (a.imaginary && b.imaginary) {\n                            var isEven = even(result.power % 2);\n                            if (isEven) {\n                                result = new Symbol(1);\n                                m.negate();\n                            }\n                        }\n\n                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\n                        if (result.group !== EX && result.previousGroup)\n                            result.previousGroup = undefined;\n                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\n                        //the sign but this isn't true if they're equals symbols\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\n                    }\n                }\n                else if (g1 === CB && a.isLinear()) {\n                    if (g2 === CB)\n                        b.distributeExponent();\n                    if (g2 === CB && b.isLinear()) {\n                        for (var s in b.symbols) {\n                            var x = b.symbols[s];\n                            result = result.combine(x);\n                        }\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\n                    }\n                    else {\n                        result.combine(b);\n                    }\n                }\n                else {\n                    //the multiplier was already handled so nothing left to do\n                    if (g1 !== N) {\n                        if (g1 === CB) {\n                            result.distributeExponent();\n                            result.combine(b);\n                        }\n                        else if (!b.isOne()) {\n                            var bm = b.multiplier.clone();\n                            b.toUnitMultiplier();\n                            result = Symbol.shell(CB).combine([result, b]);\n                            //transfer the multiplier to the outside\n                            result.multiplier = result.multiplier.multiply(bm);\n                        }\n                    }\n                    else {\n                        result = b.clone().toUnitMultiplier();\n                    }\n                }\n\n                if (result.group === P) {\n                    var logV = Math.log(result.value),\n                            n1 = Math.log(bnum) / logV,\n                            n2 = Math.log(bden) / logV,\n                            ndiv = m.num / bnum,\n                            ddiv = m.den / bden;\n                    //we don't want to divide by zero no do we? Strange things happen.\n                    if (n1 !== 0 && isInt(n1) && isInt(ndiv)) {\n                        result.power = result.power.add(new Frac(n1));\n                        m.num /= bnum; //BigInt? Keep that in mind for the future.\n                    }\n                    if (n2 !== 0 && isInt(n2) && isInt(ddiv)) {\n                        result.power = result.power.subtract(new Frac(n2));\n                        m.den /= bden; //BigInt? Keep that in mind for the future.\n                    }\n                }\n\n                //unpack CB if length is only one\n                if (result.length === 1) {\n                    var t = result.multiplier;\n                    //transfer the multiplier\n                    result = firstObject(result.symbols);\n                    result.multiplier = result.multiplier.multiply(t);\n                }\n\n                //reduce square root\n                var ps = result.power.toString();\n                if (even(ps) && result.fname === SQRT) {\n                    //grab the sign of the symbol\n                    sign = sign * result.sign();\n                    var p = result.power;\n                    result = result.args[0];\n                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\n                    //flip it back to the correct sign\n                    if (sign < 0)\n                        result.negate()\n                }\n                else {\n                    result.multiplier = result.multiplier.multiply(m).multiply(sign);\n                    if (result.group === CP && result.isImaginary())\n                        result.distributeMultiplier();\n                }\n\n                //back convert group P to a simpler group N if possible\n                if (result.group === P && isInt(result.power.toDecimal()))\n                    result = result.convert(N);\n\n                return result;\n            }\n            else {\n                //****** Matrices & Vector *****//\n                if (bIsSymbol && !aIsSymbol) { //keep symbols to the right \n                    t = a;\n                    a = b;\n                    b = t; //swap\n                    t = bIsSymbol;\n                    bIsSymbol = aIsSymbol;\n                    aIsSymbol = t;\n                }\n\n                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);\n                if (aIsSymbol && isMatrixB) {\n                    b.eachElement(function (e) {\n                        return _.multiply(a.clone(), e);\n                    });\n                }\n                else {\n                    if (isMatrixA && isMatrixB) {\n                        b = a.multiply(b);\n                    }\n                    else if (aIsSymbol && isVector(b)) {\n                        b.each(function (x, i) {\n                            i--;\n                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);\n                        });\n                    }\n                    else {\n                        if (isVector(a) && isVector(b)) {\n                            b.each(function (x, i) {\n                                i--;\n                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\n                            });\n                        }\n                        else if (isVector(a) && isMatrix(b)) {\n                            //try to convert a to a matrix\n                            return this.multiply(b, a);\n                        }\n                        else if (isMatrix(a) && isVector(b)) {\n                            if (b.elements.length === a.rows()) {\n                                var M = new Matrix(), l = a.cols();\n                                b.each(function (e, i) {\n                                    var row = [];\n                                    for (var j = 0; j < l; j++) {\n                                        row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\n                                    }\n                                    M.elements.push(row);\n                                });\n                                return M;\n                            }\n                            else\n                                err('Dimensions must match!');\n                        }\n                    }\n                }\n\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the / operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.divide = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n\n            if (aIsSymbol && bIsSymbol) {\n                //forward to Unit division\n                if (a.unit || b.unit) {\n                    return _.Unit.divide(a, b);\n                }\n                var result;\n                if (b.equals(0))\n                    throw new DivisionByZero('Division by zero not allowed!');\n\n                if (a.isConstant() && b.isConstant()) {\n                    result = a.clone();\n                    result.multiplier = result.multiplier.divide(b.multiplier);\n                }\n                else {\n                    b.invert();\n                    result = _.multiply(a, b);\n                }\n                return result;\n            }\n            else {\n                //******* Vectors & Matrices *********//\n                var isVectorA = isVector(a), isVectorB = isVector(b);\n                if (aIsSymbol && isVectorB) {\n                    b = b.map(function (x) {\n                        return _.divide(a.clone(), x);\n                    });\n                }\n                else if (isVectorA && bIsSymbol) {\n                    b = a.map(function (x) {\n                        return _.divide(x, b.clone());\n                    });\n                }\n                else if (isVectorA && isVectorB) {\n                    if (a.dimensions() === b.dimensions()) {\n                        b = b.map(function (x, i) {\n                            return _.divide(a.elements[--i], x);\n                        });\n                    }\n                    else\n                        _.error('Cannot divide vectors. Dimensions do not match!');\n                }\n                else {\n                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);\n                    if (isMatrixA && bIsSymbol) {\n                        a.eachElement(function (x) {\n                            return _.divide(x, b.clone());\n                        });\n                        b = a;\n                    }\n                    else if (isMatrixA && isMatrixB) {\n                        if (a.rows() === b.rows() && a.cols() === b.cols()) {\n                            a.eachElement(function (x, i, j) {\n                                return _.divide(x, b.elements[i][j]);\n                            });\n                        }\n                        else {\n                            _.error('Dimensions do not match!');\n                        }\n                    }\n                    else if (isMatrixA && isVectorB) {\n                        if (a.cols() === b.dimensions()) {\n                            a.eachElement(function (x, i, j) {\n                                return _.divide(x, b.elements[i].clone());\n                            });\n                            b = a;\n                        }\n                        else {\n                            _.error('Unable to divide matrix by vector.');\n                        }\n                    }\n                }\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the ^ operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.pow = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            if (aIsSymbol && bIsSymbol) {\n                //it has units then it's the Unit module's problem\n                if (a.unit || b.unit) {\n                    return _.Unit.pow(a, b);\n                }\n                //handle infinity\n                if (a.isInfinity || b.isInfinity) {\n                    if (a.isInfinity && b.isInfinity)\n                        throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\n\n                    if (a.isConstant() && b.isInfinity) {\n                        if (a.equals(0)) {\n                            if (b.lessThan(0))\n                                throw new UndefinedError('0^Infinity is undefined!');\n                            return new Symbol(0);\n                        }\n                        if (a.equals(1))\n                            throw new UndefinedError('1^' + b.toString() + ' is undefined!');\n                        //a^-oo\n                        if (b.lessThan(0))\n                            return new Symbol(0);\n                        //a^oo\n                        if (!a.lessThan(0))\n                            return Symbol.infinity();\n                    }\n\n                    if (a.isInfinity && b.isConstant()) {\n                        if (b.equals(0))\n                            throw new UndefinedError(a + '^0 is undefined!');\n                        if (b.lessThan(0))\n                            return new Symbol(0);\n                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\n                    }\n                }\n\n                var aIsZero = a.equals(0);\n                var bIsZero = b.equals(0);\n                if (aIsZero && bIsZero)\n                    throw new UndefinedError('0^0 is undefined!');\n                //return 0 right away if possible\n                if (aIsZero && b.isConstant() && b.multiplier.greaterThan(0))\n                    return new Symbol(0);\n\n                if (bIsZero)\n                    return new Symbol(1);\n\n                var bIsConstant = b.isConstant(),\n                        aIsConstant = a.isConstant(),\n                        bIsInt = b.isInteger(),\n                        m = a.multiplier,\n                        result = a.clone();\n                if (aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))\n                    throw new UndefinedError('Division by zero is not allowed!');\n\n                //compute imaginary numbers right away\n                if (Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\n                    var k, re, im;\n                    k = Math.PI * b;\n                    re = new Symbol(Math.cos(k));\n                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\n                    return _.add(re, im);\n                }\n\n                //imaginary number under negative nthroot or to the n\n                if (Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\n                    var re, im, r, theta, nre, nim;\n                    re = a.realpart();\n                    im = a.imagpart();\n                    if (re.isConstant('all') && im.isConstant('all')) {\n                        theta = new Symbol(Math.atan2(im, re) * b);\n                        r = _.pow(Symbol.hyp(re, im), b);\n                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\n                        nim = _.multiply(r, _.trig.sin(theta));\n                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));\n                    }\n                }\n\n                /*\n                 if(a.isImaginary() && bIsConstant && b.multiplier.num.abs().equals(1) && !b.multiplier.den.equals(1)) { \n                 var sign = b.sign();\n                 b = abs(b);\n                 var p, re, im, theta, n, ai, bi, di, ei, ii, th;\n                 p = Symbol.toPolarFormArray(a);\n                 theta = _.multiply(b.clone(), arg(a));\n                 di = _.pow(p[0], b);\n                 ai = _.trig.cos(theta.clone());\n                 bi = _.trig.sin(theta);\n                 \n                 if(sign < 0) {\n                 re = _.divide(ai, di.clone());\n                 im = _.divide(bi, di);\n                 }\n                 else {\n                 re = _.multiply(ai, di.clone());\n                 im = _.multiply(bi, di);\n                 }\n                 return _.add(re, _.multiply(im, Symbol.imaginary()));\n                 }\n                 */\n\n                //take care of the symbolic part\n                result.toUnitMultiplier();\n                //simpifly sqrt\n                if (result.group === FN && result.fname === SQRT && !bIsConstant) {\n                    var s = result.args[0];\n                    s.multiplyPower(new Symbol(0.5));\n                    s.multiplier.multiply(result.multiplier);\n                    s.multiplyPower(b);\n                    result = s;\n                }\n                else {\n                    var sign = m.sign();\n                    //handle cases such as (-a^3)^(1/4)\n                    if (evenFraction(b) && sign < 0) {\n                        //swaperoo\n                        //first put the sign back on the symbol\n                        result.negate();\n                        //wrap it in brackets\n                        result = _.symfunction(PARENTHESIS, [result]);\n                        //move the sign back the exterior and let nerdamer handle the rest\n                        result.negate();\n                    }\n                    \n                    result.multiplyPower(b);\n                }\n\n                if (aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\n                        var c;\n                        //remove the sign\n                        if (sign < 0) {\n                            a.negate();\n                            if (b.multiplier.den.equals(2))\n                                //we know that the numerator has to be odd and therefore it's i\n                                c = new Symbol(Settings.IMAGINARY);\n                            else if (isInt(b.multiplier)) {\n                                if (even(b.multiplier))\n                                    c = new Symbol(1);\n                                else\n                                    c = new Symbol(-1);\n                            }\n                            else if (!even(b.multiplier.den)) { \n                                c = new Symbol(Math.pow(sign, b.multiplier.num));\n                            }\n                            else {\n                                c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n                            }\n                        }\n\n                        result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\n                        \n                        //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\n                        //put the back sign\n                        if (c)\n                            result = _.multiply(result, c);\n                }\n                else if (bIsInt && !m.equals(1)) {\n                    var abs_b = b.abs();     \n                    // Provide fall back to JS until big number implementation is improved\n                    if(abs_b.gt(Settings.MAX_EXP)) {\n                        if(b.sign() < 0)\n                            return new Symbol(0);\n                        return Symbol.infinity();\n                    }\n                    else {\n                        var p = b.multiplier.toDecimal();\n                        var sgn = Math.sign(p);\n                        p = Math.abs(p);\n                        var multiplier = new Frac(1);\n                        multiplier.num = m.num.pow(p);\n                        multiplier.den = m.den.pow(p);\n                        if (sgn < 0)\n                            multiplier.invert();\n                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\n                        result.multiplier = result.multiplier.multiply(multiplier);\n                    }\n                }\n                else { \n                    var sign = a.sign();\n                    if (b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\n                        //we know the sign is negative so if the denominator for b == 2 then it's i\n                        if (b.multiplier.den.equals(2)) {\n                            var i = new Symbol(Settings.IMAGINARY);\n                            a.negate();//remove the sign\n                            //if the power is negative then i is negative\n                            if (b.lessThan(0)) {\n                                i.negate();\n                                b.negate();//remove the sign from the power\n                            }\n                            //pull the power normally and put back the imaginary\n                            result = _.multiply(_.pow(a, b), i);\n                        }\n                        else {\n//                            if(a.equals(-1)) {\n//                                var theta = _.multiply(b, _.parse('pi'));\n//                                result = evaluate(_.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta))));\n//                            }\n//                            else {\n                            var aa = a.clone();\n                            aa.multiplier.negate();\n                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\n                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\n                            var r = _.divide(_a, _b);\n                            result = _.multiply(result, r);\n//                            }  \n                        }\n                    }\n                    else if (Settings.PARSE2NUMBER && b.isImaginary()) {\n                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\n                        var re, im, aa, a1, b1, c1;\n                        aa = a.clone().toLinear();\n                        re = b.realpart();\n                        im = b.imagpart();\n                        a1 = _.pow(aa.clone(), re);\n                        b1 = trig.cos(_.multiply(im.clone(), log(aa.clone())));\n                        c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\n                        result = _.multiply(a1, _.add(b1, c1));\n                        result = _.expand(_.parse(result));\n                    }\n                    else {\n                        //b is a symbol\n                        var neg_num = a.group === N && sign < 0,\n                                num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\n                                den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\n\n                        //eliminate imaginary if possible\n                        if (a.imaginary) {\n                            if (bIsInt) {\n                                var s, p, n;\n                                s = Math.sign(b);\n                                p = abs(b);\n                                n = p % 4;\n                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\n                                if (n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {\n                                    result.negate();\n                                }\n                            }\n                            else {\n                                //assume i = sqrt(-1) -> (-1)^(1/2)\n                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\n                                        //the denominator denotes the power so raise to it. It will turn positive it round\n                                        tn = Math.pow(-1, nr.num);\n                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\n                            }\n                        }\n                        //ensure that the sign is carried by the symbol and not the multiplier\n                        //this enables us to check down the line if the multiplier can indeed be transferred\n                        if (sign < 0 && !neg_num)\n                            result.negate();\n\n                        //retain the absolute value\n                        if (bIsConstant && a.group !== EX) {\n                            var evenr = even(b.multiplier.den),\n                                    evenp = even(a.power),\n                                    n = result.power.toDecimal(),\n                                    evennp = even(n);\n                            if (evenr && evenp && !evennp) {\n                                if (n === 1)\n                                    result = _.symfunction(ABS, [result]);\n                                else if (!isInt(n)) {\n                                    var p = result.power;\n                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\n                                }\n                                else {\n                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),\n                                            result.clone().setPower(new Frac(n - 1)));\n                                }\n                                //quick workaround. Revisit\n                                if (Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)\n                                    result = result.args[0];\n                            }\n                        }\n                        //multiply out sqrt\n                        if(b.equals(2) && result.group === CB) {\n                            var _result = new Symbol(1);\n                            result.each(function(sym) {\n                                _result = _.multiply(_result, _.pow(sym, b));\n                            });\n                            result = _result;\n                        }\n                    }\n                }\n\n                result = testSQRT(result);\n\n                //don't multiply until we've tested the remaining symbol\n                if (num && den)\n                    result = _.multiply(result, testPow(_.multiply(num, den)));\n\n                //reduce square root\n                if (result.fname === SQRT) {\n                    var isEX = result.group === EX;\n                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();\n                    if (even(t)) {\n                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\n                                m = result.multiplier;\n                        result = _.pow(result.args[0], pt);\n                        result.multiplier = result.multiplier.multiply(m);\n                    }\n                }\n                //detect Euler's identity\n                else if (!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')\n                        && result.power.contains(Settings.IMAGINARY)) {\n                    var theta = b.stripVar(Settings.IMAGINARY);\n                    result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\n//                    //we have a match\n//                    var m1 = result.multiplier,\n//                            m2 = result.power.multiplier;\n//                    result = new Symbol(even(m2.num) ? m1 : m1.negate());\n//                    result = _.pow(result, new Symbol(m2.den).invert());\n                }\n                \n                return result;\n            }\n            else {\n                if (isVector(a) && bIsSymbol) {\n                    a = a.map(function (x) {\n                        return _.pow(x, b.clone());\n                    });\n                }\n                else if (isMatrix(a) && bIsSymbol) {\n                    a.eachElement(function (x) {\n                        return _.pow(x, b.clone());\n                    });\n                }\n                return a;\n            }\n        };\n        //gets called when the parser finds the , operator. \n        //Commas return a Collector object which roughly an array\n        this.comma = function (a, b) {\n            if (!(a instanceof Collection))\n                a = Collection.create(a);\n            a.append(b);\n            return a;\n        };\n        //link to modulus\n        this.mod = function (a, b) {\n            return mod(a, b);\n        };\n        //used to slice elements from arrays\n        this.slice = function (a, b) {\n            return new Slice(a, b);\n        };\n        //the equality setter\n        this.equals = function (a, b) {\n            //equality can only be set for group S so complain it's not\n            if (a.group !== S && !a.isLinear())\n                err('Cannot set equality for ' + a.toString());\n            VARS[a.value] = b.clone();\n            return b;\n        };\n        //percent\n        this.percent = function (a) {\n            return _.divide(a, new Symbol(100));\n        };\n        //set variable\n        this.assign = function (a, b) {\n            if (a instanceof Collection && b instanceof Collection) {\n                a.elements.map(function (x, i) {\n                    return _.assign(x, b.elements[i]);\n                });\n                return Vector.fromArray(b.elements);\n            }\n            if(a.parent) {\n                //it's referring to the parent instead. The current item can be discarded\n                var e = a.parent;\n                e.elements[e.getter] = b;\n                delete e.getter;\n                return e;\n            }\n            \n            if (a.group !== S)\n                throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\n            VARS[a.value] = b;\n            return b;\n        };\n        this.function_assign = function (a, b) {\n            var f = a.elements.pop();\n            return setFunction(f, a.elements, b);\n        };\n        //function to quickly convert bools to Symbols\n        var bool2Symbol = function (x) {\n            return new Symbol(x === true ? 1 : 0);\n        };\n        //check for equality\n        this.eq = function (a, b) {\n            return bool2Symbol(a.equals(b));\n        };\n        //checks for greater than\n        this.gt = function (a, b) {\n            return bool2Symbol(a.gt(b));\n        };\n        //checks for greater than equal\n        this.gte = function (a, b) {\n            return bool2Symbol(a.gte(b));\n        };\n        //checks for less than\n        this.lt = function (a, b) {\n            return bool2Symbol(a.lt(b));\n        };\n        //checks for less than equal\n        this.lte = function (a, b) {\n            return bool2Symbol(a.lte(b));\n        };\n        //wraps the factorial\n        this.factorial = function (a) {\n            return this.symfunction(FACTORIAL, [a]);\n        };\n        //wraps the double factorial\n        this.dfactorial = function (a) {\n            return this.symfunction(DOUBLEFACTORIAL, [a]);\n        };\n    }\n    ;\n\n    /* \"STATIC\" */\n    //converts a number to a fraction. \n    var Fraction = {\n        /**\n         * Converts a decimal to a fraction\n         * @param {number} value\n         * @param {object} opts\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        convert: function (value, opts) {\n            var frac;\n            if (value === 0) {\n                frac = [0, 1];\n            }\n            else {\n                if (value < 1e-6 || value > 1e20) {\n                    var qc = this.quickConversion(Number(value));\n                    if (qc[1] <= 1e20) {\n                        var abs = Math.abs(value);\n                        var sign = value / abs;\n                        frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\n                        frac[0] = frac[0] * sign;\n                    }\n                    else {\n                        frac = qc;\n                    }\n                }\n                else {\n                    frac = this.fullConversion(value);\n                }\n            }\n            return frac;\n        },\n        /**\n         * If the fraction is too small or too large this gets called instead of fullConversion method\n         * @param {number} dec\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        quickConversion: function (dec) {\n            var x = (dec.toExponential() + '').split('e');\n            var d = x[0].split('.')[1];// get the number of places after the decimal\n            var l = (d ? d.length : 0)-parseInt(x[1]); // maybe the coefficient is an integer;\n            //call Math.round to avoid rounding error\n            return [Math.round(Math.pow(10, l) * x[0]), Math.pow(10, Math.abs(x[1]) + l)];\n        },\n        /**\n         * Returns a good approximation of a fraction. This method gets called by convert\n         * http://mathforum.org/library/drmath/view/61772.html\n         * Decimal To Fraction Conversion - A Simpler Version\n         * Dr Peterson\n         * @param {number} dec\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        fullConversion: function (dec) {\n            var done = false;\n            //you can adjust the epsilon to a larger number if you don't need very high precision\n            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;\n            while (!done) {\n                n++;\n                if (n > 10000) {\n                    done = true;\n                }\n                var a = Math.floor(q);\n                var num = n1 + a * n2;\n                var den = d1 + a * d2;\n                var e = (q - a);\n                if (e < epsilon) {\n                    done = true;\n                }\n                q = 1 / e;\n                n1 = n2;\n                d1 = d2;\n                n2 = num;\n                d2 = den;\n                if (Math.abs(num / den - dec) < epsilon || n > 30) {\n                    done = true;\n                }\n            }\n            return [num, den];\n        }\n    };\n    //Depends on Fraction\n\n    //The latex generator\n    var LaTeX = {\n        parser: (function () {\n            //create a parser and strip it from everything except the items that you need\n            var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\n            var parser = new Parser();\n            for (var x in parser) {\n                if (keep.indexOf(x) === -1)\n                    delete parser[x];\n            }\n            //declare the operators\n            parser.setOperator({\n                precedence: 8,\n                operator: '\\\\',\n                action: 'slash',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; //bypass the slash\n                }\n            });\n            parser.setOperator({\n                precedence: 8,\n                operator: '\\\\,',\n                action: 'slash_comma',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; //bypass the slash\n                }\n            });\n            //have braces not map to anything. We want them to be return as-is\n            var brackets = parser.getBrackets();\n            brackets['{'].maps_to = undefined;\n            return parser;\n        })(),\n        space: '~',\n        dot: ' \\\\cdot ',\n        //grab a list of supported functions but remove the excluded ones found in exclFN\n\n        latex: function (symbol, option) {\n            //it might be an array\n            if (symbol.clone) {\n                symbol = symbol.clone(); //leave original as-is\n            }\n            if (symbol instanceof _.classes.Collection)\n                symbol = symbol.elements;\n\n            if (isArray(symbol)) {\n                var LaTeXArray = [];\n                for (var i = 0; i < symbol.length; i++) {\n                    var sym = symbol[i];\n                    //This way I can generate LaTeX on an array of strings.\n                    if (!isSymbol(sym))\n                        sym = _.parse(sym);\n                    LaTeXArray.push(this.latex(sym, option));\n                }\n                return this.brackets(LaTeXArray.join(', '), 'square');\n            }\n\n            else if (isMatrix(symbol)) {\n                var TeX = '\\\\begin{pmatrix}\\n';\n                for (var i = 0; i < symbol.elements.length; i++) {\n                    var rowTeX = [],\n                            e = symbol.elements[i];\n                    for (var j = 0; j < e.length; j++) {\n                        rowTeX.push(this.latex(e[j], option));\n                    }\n                    TeX += rowTeX.join(' & ');\n                    if (i < symbol.elements.length - 1) {\n                        TeX += '\\\\\\\\\\n';\n                    }\n                }\n                TeX += '\\\\end{pmatrix}';\n                return TeX;\n            }\n\n            else if (isVector(symbol)) {\n                var TeX = '\\\\left[';\n                for (var i = 0; i < symbol.elements.length; i++) {\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n                }\n                TeX += '\\\\right]';\n                return TeX;\n            }\n            \n            else if(isSet(symbol)) {\n                var TeX = '\\\\{';\n                for (var i = 0; i < symbol.elements.length; i++) {\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n                }\n                TeX += '\\\\}';\n                return TeX;\n            }\n\n            symbol = symbol.clone();\n            var decimal = (option === 'decimal' || option === 'decimals'),\n                    power = symbol.power,\n                    invert = isNegative(power),\n                    negative = symbol.multiplier.lessThan(0);\n\n            if (symbol.group === P && decimal) {\n                return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\n            }\n            else {\n                symbol.multiplier = symbol.multiplier.abs();\n\n                //if the user wants the result in decimal format then return it as such by placing it at the top part\n                var m_array;\n\n                if (decimal) {\n                    var m = String(symbol.multiplier.toDecimal());\n                    //if(String(m) === '1' && !decimal) m = '';\n                    m_array = [m, ''];\n                }\n                else {\n                    m_array = [symbol.multiplier.num, symbol.multiplier.den];\n                }\n                //get the value as a two part array\n                var v_array = this.value(symbol, invert, option, negative),\n                        p;\n                //make it all positive since we know whether to push the power to the numerator or denominator already.\n                if (invert)\n                    power.negate();\n                //the power is simple since it requires no additional formatting. We can get it to a\n                //string right away. pass in true to neglect unit powers\n                if (decimal) {\n                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\n                    if (String(p) === '1')\n                        p = '';\n                }\n                //get the latex representation\n                else if (isSymbol(power))\n                    p = this.latex(power, option);\n                //get it as a fraction\n                else\n                    p = this.formatFrac(power, true);\n                //use this array to specify if the power is getting attached to the top or the bottom\n                var p_array = ['', ''],\n                        //stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\n                        index = invert ? 1 : 0;\n                p_array[index] = p;\n\n                //special case group P and decimal\n                var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\n\n                return retval.replace(/\\+\\-/gi, '-');\n            }\n\n        },\n        //greek mapping\n        greek: {\n            alpha: '\\\\alpha',\n            beta: '\\\\beta',\n            gamma: '\\\\gamma',\n            delta: '\\\\delta',\n            epsilon: '\\\\epsilon',\n            zeta: '\\\\zeta',\n            eta: '\\\\eta',\n            theta: '\\\\theta',\n            iota: '\\\\iota',\n            kappa: '\\\\kappa',\n            lambda: '\\\\lambda',\n            mu: '\\\\mu',\n            nu: '\\\\nu',\n            xi: '\\\\xi',\n            omnikron: '\\\\omnikron',\n            pi: '\\\\pi',\n            rho: '\\\\rho',\n            sigma: '\\\\sigma',\n            tau: '\\\\tau',\n            upsilon: '\\\\upsilon',\n            phi: '\\\\phi',\n            chi: '\\\\chi',\n            psi: '\\\\psi',\n            omega: '\\\\omega',\n            Gamma: '\\\\Gamma',\n            Delta: '\\\\Delta',\n            Epsilon: '\\\\Epsilon',\n            Theta: '\\\\Theta',\n            Lambda: '\\\\Lambda',\n            Xi: '\\\\Xi',\n            Pi: '\\\\Pi',\n            Sigma: '\\\\Sigma',\n            Phi: '\\\\Phi',\n            Psi: '\\\\Psi',\n            Omega: '\\\\Omega'\n        },\n        symbols: {\n            arccos: '\\\\arccos',\n            cos: '\\\\cos',\n            csc: '\\\\csc',\n            exp: '\\\\exp',\n            ker: '\\\\ker',\n            limsup: '\\\\limsup',\n            min: '\\\\min',\n            sinh: '\\\\sinh',\n            arcsin: '\\\\arcsin',\n            cosh: '\\\\cosh',\n            deg: '\\\\deg',\n            gcd: '\\\\gcd',\n            lg: '\\\\lg',\n            ln: '\\\\ln',\n            Pr: '\\\\Pr',\n            sqrt: '\\\\sqrt',\n            sup: '\\\\sup',\n            arctan: '\\\\arctan',\n            cot: '\\\\cot',\n            det: '\\\\det',\n            hom: '\\\\hom',\n            lim: '\\\\lim',\n            log: '\\\\log',\n            LN:  '\\\\LN',\n            sec: '\\\\sec',\n            tan: '\\\\tan',\n            arg: '\\\\arg',\n            coth: '\\\\coth',\n            dim: '\\\\dim',\n            inf: '\\\\inf',\n            liminf: '\\\\liminf',\n            max: '\\\\max',\n            sin: '\\\\sin',\n            tanh: '\\\\tanh'\n        },\n        //get the raw value of the symbol as an array\n        value: function (symbol, inverted, option, negative) {\n            var group = symbol.group,\n                    previousGroup = symbol.previousGroup,\n                    v = ['', ''],\n                    index = inverted ? 1 : 0;\n            /*if(group === N) //do nothing since we want to return top & bottom blank; */\n            if (symbol.isInfinity) {\n                v[index] = '\\\\infty';\n            }\n            else if (group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\n                var value = symbol.value;\n                if (value.replace)\n                    value = value.replace(/(.+)_$/, '$1\\\\_');\n                //split it so we can check for instances of alpha as well as alpha_b\n                var t_varray = String(value).split('_');\n                var greek = this.greek[t_varray[0]];\n                if (greek) {\n                    t_varray[0] = greek;\n                    value = t_varray.join('_');\n                }\n                var symbol = this.symbols[t_varray[0]];\n                if (symbol) {\n                    t_varray[0] = symbol;\n                    value = t_varray.join('_');\n                }\n                v[index] = value;\n            }\n            else if (group === FN || previousGroup === FN) {\n                var name,\n                        input = [],\n                        fname = symbol.fname;\n                //collect the arguments\n                for (var i = 0; i < symbol.args.length; i++) {\n                    var arg = symbol.args[i], item;\n                    if (typeof arg === 'string')\n                        item = arg;\n                    else {\n                        item = this.latex(arg, option);\n                    }\n                    input.push(item);\n                }\n\n                if (fname === SQRT) {\n                    v[index] = '\\\\sqrt' + this.braces(input.join(','));\n                }\n                else if (fname === ABS) {\n                    v[index] = this.brackets(input.join(','), 'abs');\n                }\n                else if (fname === PARENTHESIS) {\n                    v[index] = this.brackets(input.join(','), 'parens');\n                }\n                else if (fname === 'limit') {\n                    v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\n                }\n                else if (fname === 'integrate') {\n                    v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\n                }\n                else if (fname === 'defint') {\n                    v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\n                }\n                else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\n                    var arg = symbol.args[0];\n                    if (arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\n                        input[0] = this.brackets(input[0]);\n                    }\n                    v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\n                }\n                else if (fname === 'floor') {\n                    v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\n                }\n                else if (fname === 'ceil') {\n                    v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\n                }\n                //capture log(a, b)\n                else if (fname === Settings.LOG && input.length > 1) {\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\n                }\n                //capture log(a, b)\n                else if (fname === Settings.LOG10) {\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\n                }\n                else if (fname === 'sum') {\n                    var a = input[0],\n                            b = input[1],\n                            c = input[2],\n                            d = input[3];\n                    v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n                }\n                else if (fname === 'product') {\n                    var a = input[0],\n                            b = input[1],\n                            c = input[2],\n                            d = input[3];\n                    v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n                }\n                else if (fname === 'nthroot') {\n                    v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\n                }\n                else if (fname === 'mod') {\n                    v[index] = input[0] + ' \\\\bmod ' + input[1];\n                }\n                else if (fname === 'realpart') {\n                    v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\n                }\n                else if (fname === 'imagpart') {\n                    v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\n                }\n                else {\n                    var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\n                    if (symbol.isConversion)\n                        v[index] = name + this.brackets(input.join(''), 'parens');\n                    else\n                        v[index] = name + this.brackets(input.join(','), 'parens');\n                }\n            }\n            else if (symbol.isComposite()) {\n                var collected = symbol.collectSymbols().sort(\n                        group === CP || previousGroup === CP ?\n                        function (a, b) {\n                            return b.group - a.group;\n                        } :\n                        function (a, b) {\n                            var x = isSymbol(a.power) ? -1 : a.power;\n                            var y = isSymbol(b.power) ? -1 : b.power;\n                            return y - x;\n                        }\n                ),\n                        symbols = [],\n                        l = collected.length;\n                for (var i = 0; i < l; i++) {\n                    symbols.push(LaTeX.latex(collected[i], option));\n                }\n                var value = symbols.join('+');\n\n                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\n            }\n            else if (group === CB || previousGroup === EX || previousGroup === CB) {\n                if (group === CB)\n                    symbol.distributeExponent();\n                //this almost feels a little like cheating but I need to know if I should be wrapping the symbol\n                //in brackets or not. We'll do this by checking the value of the numerator and then comparing it \n                //to whether the symbol value is \"simple\" or not.\n                var denominator = [],\n                        numerator = [];\n                //generate a profile\n                var den_map = [], num_map = [], num_c = 0, den_c = 0;\n                var setBrackets = function (container, map, counter) {\n                    if (counter > 1 && map.length > 0) {\n                        var l = map.length;\n                        for (var i = 0; i < l; i++) {\n                            var idx = map[i], item = container[idx];\n                            if (!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\n                                container[idx] = LaTeX.brackets(item, 'parens');\n                            }\n                        }\n                    }\n                    return container;\n                };\n\n                //generate latex for each of them\n                symbol.each(function (x) {\n                    var isDenom = isNegative(x.power),\n                            laTex;\n\n                    if (isDenom) {\n                        laTex = LaTeX.latex(x.invert(), option);\n                        den_c++;\n                        if (x.isComposite()) {\n                            if (symbol.multiplier.den != 1 && Math.abs(x.power) == 1)\n                                laTex = LaTeX.brackets(laTex, 'parens');\n                            den_map.push(denominator.length); //make a note of where the composite was found \n                        }\n\n                        denominator.push(laTex);\n                    }\n                    else {\n                        laTex = LaTeX.latex(x, option);\n                        num_c++;\n                        if (x.isComposite()) {\n                            if (symbol.multiplier.num != 1 && Math.abs(x.power) == 1)\n                                laTex = LaTeX.brackets(laTex, 'parens');\n                            num_map.push(numerator.length);   //make a note of where the composite was found \n                        }\n                        numerator.push(laTex);\n                    }\n                });\n\n                //apply brackets\n                setBrackets(numerator, num_map, num_c);\n                v[0] = numerator.join(this.dot); //collapse the numerator into one string\n\n                setBrackets(denominator, den_map, den_c);\n                v[1] = denominator.join(this.dot);\n            }\n\n            return v;\n        },\n        set: function (m, v, p, combine_power) {\n            var isBracketed = function (v) {\n                return /^\\\\left\\(.+\\\\right\\)$/.test(v);\n            };\n            //format the power if it exists\n            if (p)\n                p = this.formatP(p);\n            //group CB will have to be wrapped since the power applies to both it's numerator and denominator\n            if (combine_power) {\n                //POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\n                //the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\n                //of a case where this isn't true\n                var tp = p[0];\n                p[0] = ''; //temporarily make p blank\n            }\n\n            //merge v and p. Not that v MUST be first since the order matters\n            v = this.merge(v, p);\n            var mn = m[0], md = m[1], vn = v[0], vd = v[1];\n            //filters\n            //if the top has a variable but the numerator is one drop it\n            if (vn && Number(mn) === 1)\n                mn = '';\n            //if denominator is 1 drop it always\n            if (Number(md) === 1)\n                md = '';\n            //prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\n            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\n\n            //prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\n            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\n            //format the power if it exists\n            //make it a fraction if both top and bottom exists\n            if (top && bottom) {\n                var frac = this.frac(top, bottom);\n                if (combine_power && tp)\n                    frac = this.brackets(frac) + tp;\n                return frac;\n            }\n            //otherwise only the top exists so return that\n            else\n                return top;\n        },\n        merge: function (a, b) {\n            var r = [];\n            for (var i = 0; i < 2; i++)\n                r[i] = a[i] + b[i];\n            return r;\n        },\n        //joins together two strings if both exist\n        join: function (n, d, glue) {\n            if (!n && !d)\n                return '';\n            if (n && !d)\n                return n;\n            if (d && !n)\n                return d;\n            return n + glue + d;\n        },\n        formatP: function (p_array) {\n            for (var i = 0; i < 2; i++) {\n                var p = p_array[i];\n                if (p)\n                    p_array[i] = '^' + this.braces(p);\n            }\n            return p_array;\n        },\n        /**\n         * formats the fractions accordingly.\n         * @param {Frac} f\n         * @param {bool} is_pow\n         */\n        formatFrac: function (f, is_pow) {\n            var n = f.num.toString(),\n                    d = f.den.toString();\n            //no need to have x^1\n            if (is_pow && n === '1' && d === '1')\n                return '';\n            //no need to have x/1\n            if (d === '1')\n                return n;\n            return this.frac(n, d);\n        },\n        frac: function (n, d) {\n            return '\\\\frac' + this.braces(n) + this.braces(d);\n        },\n        braces: function (e) {\n            return '{' + e + '}';\n        },\n        brackets: function (e, typ) {\n            typ = typ || 'parens';\n            var bracketTypes = {\n                parens: ['(', ')'],\n                square: ['[', ']'],\n                brace: ['{', '}'],\n                abs: ['|', '|'],\n                angle: ['\\\\langle', '\\\\rangle']\n            };\n            var bracket = bracketTypes[typ];\n            return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\n        },\n        /**\n         * Removes extreneous tokens\n         * @param {Tokens[]} tokens\n         * @returns {Tokens[]}\n         */\n        filterTokens: function (tokens) {\n            var filtered = [];\n            //the items that need to be disposed\n            var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\n            for (var i = 0, l = tokens.length; i < l; i++) {\n                var token = tokens[i];\n                if (isArray(token))\n                    filtered.push(LaTeX.filterTokens(token));\n                else if (d.indexOf(token.value) === -1)\n                    filtered.push(token);\n            }\n            return filtered;\n        },\n        /*\n         * Parses tokens from LaTeX string. Does not do any error checking\n         * @param {Tokens[]} rpn\n         * @returns {String}\n         */\n        parse: function (raw_tokens) {\n            var i, l;\n            var retval = '';\n            var tokens = this.filterTokens(raw_tokens);\n            var replace = {\n                'cdot': '',\n                'times': '*',\n                'infty': 'Infinity'\n            };\n            //get the next token\n            var next = function () {\n                return tokens[++i];\n            };\n            var parse_next = function () {\n                return LaTeX.parse(next());\n            };\n            var get = function (token) {\n                if (token in replace)\n                    return replace[token];\n                return token;\n            };\n\n            //start parsing the tokens\n            for (i = 0, l = tokens.length; i < l; i++) {\n                var token = tokens[i];\n                //fractions\n                if (token.value === 'frac') {\n                    //parse and wrap it in brackets\n                    var n = parse_next();\n                    var d = parse_next();\n                    retval += n + '/' + d;\n                }\n                else if (token.value in LaTeX.symbols) {\n                    retval += token.value + parse_next();\n                }\n                else if (token.value === 'int') {\n                    var f = parse_next();\n                    //skip the comma\n                    i++;\n                    //get the variable of integration\n                    var dx = next().value;\n                    dx = get(dx.substring(1, dx.length));\n                    retval += 'integrate' + inBrackets(f + ',' + dx);\n                }\n                else if (token.value === 'mathrm') {\n                    var f = tokens[++i][0].value;\n                    retval += f + parse_next();\n                }\n                //sum and product\n                else if (token.value === 'sum_' || token.value === 'prod_') {\n                    var fn = token.value === 'sum_' ? 'sum' : 'product';\n                    var nxt = next();\n                    i++; //skip the caret\n                    var end = parse_next();\n                    var f = parse_next();\n                    retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\n                }\n                else if (token.value === 'lim_') {\n                    var nxt = next();\n                    retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\n                }\n                else {\n                    if(Array.isArray(token)) {\n                        retval += get(LaTeX.parse(token));\n                    }\n                    else\n                        retval += get(token.value.toString());\n                }\n            }\n            return inBrackets(retval);\n        }\n    };\n//Vector =======================================================================    \n    function Vector(v) {\n        if (isVector(v))\n            this.elements = v.items.slice(0);\n        else if (isArray(v))\n            this.elements = v.slice(0);\n        else\n            this.elements = [].slice.call(arguments);\n    }\n    /*\n     * Generates a pre-filled array\n     * @param {type} n\n     * @param {type} val\n     * @returns {unresolved}\n     */\n    Vector.arrayPrefill = function (n, val) {\n        var a = [];\n        val = val || 0;\n        for (var i = 0; i < n; i++)\n            a[i] = val;\n        return a;\n    };\n    /**\n     * Generate a vector from and array\n     * @param {type} a\n     * @returns {unresolved}\n     */\n    Vector.fromArray = function (a) {\n        var v = new Vector();\n        v.elements = a;\n        return v;\n    };\n    \n    /**\n     * Convert a Set to a Vector\n     * @param {Set} set\n     * @returns {Vector}\n     */\n    Vector.fromSet = function(set) {\n        return Vector.fromArray(set.elements);\n    };\n    \n    //Ported from Sylvester.js\n    Vector.prototype = {\n        custom: true,\n        // Returns element i of the vector\n        e: function (i) {\n            return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\n        },\n\n        set: function (i, val) {\n            if (!isSymbol(val))\n                val = new Symbol(val);\n            this.elements[i] = val;\n        },\n\n        // Returns the number of elements the vector has\n        dimensions: function () {\n            return this.elements.length;\n        },\n\n        // Returns the modulus ('length') of the vector\n        modulus: function () {\n            return block('SAFE', function () {\n                return _.pow((this.dot(this.clone())), new Symbol(0.5));\n            }, undefined, this);\n        },\n\n        // Returns true iff the vector is equal to the argument\n        eql: function (vector) {\n            var n = this.elements.length;\n            var V = vector.elements || vector;\n            if (n !== V.length) {\n                return false;\n            }\n            do {\n                if (Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\n                    return false;\n                }\n            }\n            while (--n);\n            return true;\n        },\n\n        // Returns a clone of the vector\n        clone: function () {\n            var V = new Vector(),\n                    l = this.elements.length;\n            for (var i = 0; i < l; i++) {\n                //Rule: all items within the vector must have a clone method.\n                V.elements.push(this.elements[i].clone());\n            }\n            if (this.getter) {\n                V.getter = this.getter.clone();\n            }\n            return V;\n        },\n\n        // Maps the vector to another vector according to the given function\n        map: function (fn) {\n            var elements = [];\n            this.each(function (x, i) {\n                elements.push(fn(x, i));\n            });\n\n            return new Vector(elements);\n        },\n\n        // Calls the iterator for each element of the vector in turn\n        each: function (fn) {\n            var n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                fn(this.elements[i], i + 1);\n            }\n            while (--n);\n        },\n\n        // Returns a new vector created by normalizing the receiver\n        toUnitVector: function () {\n            return block('SAFE', function () {\n                var r = this.modulus();\n                if (r.valueOf() === 0) {\n                    return this.clone();\n                }\n                return this.map(function (x) {\n                    return _.divide(x, r);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the angle between the vector and the argument (also a vector)\n        angleFrom: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                var n = this.elements.length;\n                if (n !== V.length) {\n                    return null;\n                }\n                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);\n                // Work things out in parallel to save time\n                this.each(function (x, i) {\n                    dot = _.add(dot, _.multiply(x, V[i - 1]));\n                    mod1 = _.add(mod1, _.multiply(x, x));//will not conflict in safe block\n                    mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));//will not conflict in safe block\n                });\n                mod1 = _.pow(mod1, new Symbol(0.5));\n                mod2 = _.pow(mod2, new Symbol(0.5));\n                var product = _.multiply(mod1, mod2);\n                if (product.valueOf() === 0) {\n                    return null;\n                }\n                var theta = _.divide(dot, product);\n                var theta_val = theta.valueOf();\n                if (theta_val < -1) {\n                    theta = -1;\n                }\n                if (theta_val > 1) {\n                    theta = 1;\n                }\n                return new Symbol(Math.acos(theta));\n            }, undefined, this);\n        },\n\n        // Returns true iff the vector is parallel to the argument\n        isParallelTo: function (vector) {\n            var angle = this.angleFrom(vector).valueOf();\n            return (angle === null) ? null : (angle <= PRECISION);\n        },\n\n        // Returns true iff the vector is antiparallel to the argument\n        isAntiparallelTo: function (vector) {\n            var angle = this.angleFrom(vector).valueOf();\n            return (angle === null) ? null : (Math.abs(angle - Math.PI) <= PRECISION);\n        },\n\n        // Returns true iff the vector is perpendicular to the argument\n        isPerpendicularTo: function (vector) {\n            var dot = this.dot(vector);\n            return (dot === null) ? null : (Math.abs(dot) <= PRECISION);\n        },\n\n        // Returns the result of adding the argument to the vector\n        add: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                if (this.elements.length !== V.length) {\n                    return null;\n                }\n                return this.map(function (x, i) {\n                    return _.add(x, V[i - 1]);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the result of subtracting the argument from the vector\n        subtract: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                if (this.elements.length !== V.length) {\n                    return null;\n                }\n                return this.map(function (x, i) {\n                    return _.subtract(x, V[i - 1]);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the result of multiplying the elements of the vector by the argument\n        multiply: function (k) {\n            return this.map(function (x) {\n                return x.clone() * k.clone();\n            });\n        },\n\n        x: function (k) {\n            return this.multiply(k);\n        },\n\n        // Returns the scalar product of the vector with the argument\n        // Both vectors must have equal dimensionality\n        dot: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                var product = new Symbol(0), n = this.elements.length;\n                if (n !== V.length) {\n                    return null;\n                }\n                do {\n                    product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\n                }\n                while (--n);\n                return product;\n            }, undefined, this);\n        },\n\n        // Returns the vector product of the vector with the argument\n        // Both vectors must have dimensionality 3\n        cross: function (vector) {\n            var B = vector.elements || vector;\n            if (this.elements.length !== 3 || B.length !== 3) {\n                return null;\n            }\n            var A = this.elements;\n            return block('SAFE', function () {\n                return new Vector([\n                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),\n                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),\n                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))\n                ]);\n            }, undefined, this);\n        },\n\n        // Returns the (absolute) largest element of the vector\n        max: function () {\n            var m = 0, n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                if (Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\n                    m = this.elements[i];\n                }\n            }\n            while (--n);\n            return m;\n        },\n        magnitude: function() {\n            var magnitude = new Symbol(0);\n            this.each(function(e) {\n                magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\n            });\n            return _.sqrt(magnitude);\n        },\n        // Returns the index of the first match found\n        indexOf: function (x) {\n            var index = null, n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                if (index === null && this.elements[i].valueOf() === x.valueOf()) {\n                    index = i + 1;\n                }\n            }\n            while (--n);\n            return index;\n        },\n        text: function (x) {\n            return text(this);\n        },\n        toString: function () {\n            return this.text();\n        },\n        latex: function (option) {\n            var tex = [];\n            for (var i = 0; i < this.elements.length; i++) {\n                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\n            }\n            return '[' + tex.join(', ') + ']';\n        }\n    };\n\n//Matrix =======================================================================\n    function Matrix() {\n        var m = arguments,\n                l = m.length, i, el = [];\n        if (isMatrix(m)) { //if it's a matrix then make a clone\n            for (i = 0; i < l; i++) {\n                el.push(m[i].slice(0));\n            }\n        }\n        else {\n            var row, lw, rl;\n            for (i = 0; i < l; i++) {\n                row = m[i];\n                if (isVector(row))\n                    row = row.elements;\n                if (!isArray(row))\n                    row = [row];\n                rl = row.length;\n                if (lw && lw !== rl)\n                    err('Unable to create Matrix. Row dimensions do not match!');\n                el.push(row);\n                lw = rl;\n            }\n        }\n        this.elements = el;\n    }\n    Matrix.identity = function (n) {\n        var m = new Matrix();\n        for (var i = 0; i < n; i++) {\n            m.elements.push([]);\n            for (var j = 0; j < n; j++) {\n                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\n            }\n        }\n        return m;\n    };\n    Matrix.fromArray = function (arr) {\n        function F(args) {\n            return Matrix.apply(this, args);\n        }\n        F.prototype = Matrix.prototype;\n\n        return new F(arr);\n    };\n    Matrix.zeroMatrix = function (rows, cols) {\n        var m = new Matrix();\n        for (var i = 0; i < rows; i++) {\n            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\n        }\n        return m;\n    };\n    Matrix.prototype = {\n        //needs be true to let the parser know not to try to cast it to a symbol\n        custom: true,\n        get: function (row, column) {\n            if (!this.elements[row])\n                return undefined;\n            return this.elements[row][column];\n        },\n        map: function(f, raw_values) {\n            var M = new Matrix();\n            this.each(function(e, i, j) {\n                M.set( i, j, f.call(M, e), raw_values);\n            });\n            return M;\n        },\n        set: function (row, column, value, raw) {\n            if (!this.elements[row])\n                this.elements[row] = [];\n            this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));\n        },\n        cols: function () {\n            return this.elements[0].length;\n        },\n        rows: function () {\n            return this.elements.length;\n        },\n        row: function (n) {\n            if (!n || n > this.cols())\n                return [];\n            return this.elements[n - 1];\n        },\n        col: function (n) {\n            var nr = this.rows(),\n                    col = [];\n            if (n > this.cols() || !n)\n                return col;\n            for (var i = 0; i < nr; i++) {\n                col.push(this.elements[i][n - 1]);\n            }\n            return col;\n        },\n        eachElement: function (fn) {\n            var nr = this.rows(),\n                    nc = this.cols(), i, j;\n            for (i = 0; i < nr; i++) {\n                for (j = 0; j < nc; j++) {\n                    fn.call(this, this.elements[i][j], i, j);\n                }\n            }\n        },\n        //ported from Sylvester.js\n        determinant: function () {\n            if (!this.isSquare()) {\n                return null;\n            }\n            var M = this.toRightTriangular();\n            var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\n            do {\n                i = k - n + 1;\n                det = _.multiply(det, M.elements[i][i]);\n            }\n            while (--n);\n            return det;\n        },\n        isSquare: function () {\n            return this.elements.length === this.elements[0].length;\n        },\n        isSingular: function () {\n            return this.isSquare() && this.determinant() === 0;\n        },\n        augment: function (m) {\n            var r = this.rows(), rr = m.rows();\n            if (r !== rr)\n                err(\"Cannot augment matrix. Rows don't match.\");\n            for (var i = 0; i < r; i++) {\n                this.elements[i] = this.elements[i].concat(m.elements[i]);\n            }\n\n            return this;\n        },\n        clone: function () {\n            var r = this.rows(), c = this.cols(),\n                    m = new Matrix();\n            for (var i = 0; i < r; i++) {\n                m.elements[i] = [];\n                for (var j = 0; j < c; j++) {\n                    var symbol = this.elements[i][j];\n                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\n                }\n            }\n            return m;\n        },\n        //ported from Sylvester.js\n        invert: function () {\n            if (!this.isSquare())\n                err('Matrix is not square!');\n            return block('SAFE', function () {\n                var ni = this.elements.length, ki = ni, i, j;\n                var imatrix = Matrix.identity(ni);\n                var M = this.augment(imatrix).toRightTriangular();\n                var np, kp = M.elements[0].length, p, els, divisor;\n                var inverse_elements = [], new_element;\n                // Matrix is non-singular so there will be no zeros on the diagonal\n                // Cycle through rows from last to first\n                do {\n                    i = ni - 1;\n                    // First, normalise diagonal elements to 1\n                    els = [];\n                    np = kp;\n                    inverse_elements[i] = [];\n                    divisor = M.elements[i][i];\n                    do {\n                        p = kp - np;\n                        new_element = _.divide(M.elements[i][p], divisor.clone());\n                        els.push(new_element);\n                        // Shuffle of the current row of the right hand side into the results\n                        // array as it will not be modified by later runs through this loop\n                        if (p >= ki) {\n                            inverse_elements[i].push(new_element);\n                        }\n                    }\n                    while (--np);\n                    M.elements[i] = els;\n                    // Then, subtract this row from those above it to\n                    // give the identity matrix on the left hand side\n                    for (j = 0; j < i; j++) {\n                        els = [];\n                        np = kp;\n                        do {\n                            p = kp - np;\n                            els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\n                        }\n                        while (--np);\n                        M.elements[j] = els;\n                    }\n                }\n                while (--ni);\n                return Matrix.fromArray(inverse_elements);\n            }, undefined, this);\n        },\n        //ported from Sylvester.js\n        toRightTriangular: function () {\n            return block('SAFE', function () {\n                var M = this.clone(), els, fel, nel,\n                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\n                do {\n                    i = k - n;\n                    fel = M.elements[i][i];\n                    if (fel.valueOf() === 0) {\n                        for (var j = i + 1; j < k; j++) {\n                            nel = M.elements[j][i];\n                            if (nel && nel.valueOf() !== 0) {\n                                els = [];\n                                np = kp;\n                                do {\n                                    p = kp - np;\n                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\n                                }\n                                while (--np);\n                                M.elements[i] = els;\n                                break;\n                            }\n                        }\n                    }\n                    var fel = M.elements[i][i];\n                    if (fel.valueOf() !== 0) {\n                        for (j = i + 1; j < k; j++) {\n                            var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\n                            els = [];\n                            np = kp;\n                            do {\n                                p = kp - np;\n                                // Elements with column numbers up to an including the number\n                                // of the row that we're subtracting can safely be set straight to\n                                // zero, since that's the point of this routine and it avoids having\n                                // to loop over and correct rounding errors later\n                                els.push(p <= i ? new Symbol(0) :\n                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\n                            }\n                            while (--np);\n                            M.elements[j] = els;\n                        }\n                    }\n                }\n                while (--n);\n\n                return M;\n            }, undefined, this);\n        },\n        transpose: function () {\n            var rows = this.elements.length, cols = this.elements[0].length;\n            var M = new Matrix(), ni = cols, i, nj, j;\n\n            do {\n                i = cols - ni;\n                M.elements[i] = [];\n                nj = rows;\n                do {\n                    j = rows - nj;\n                    M.elements[i][j] = this.elements[j][i].clone();\n                }\n                while (--nj);\n            }\n            while (--ni);\n            return M;\n        },\n        // Returns true if the matrix can multiply the argument from the left\n        canMultiplyFromLeft: function (matrix) {\n            var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\n            // this.columns should equal matrix.rows\n            return (this.elements[0].length === l);\n        },\n        sameSize: function (matrix) {\n            return this.rows() === matrix.rows() && this.cols() === matrix.cols();\n        },\n        multiply: function (matrix) {\n            return block('SAFE', function () {\n                var M = matrix.elements || matrix;\n                if (!this.canMultiplyFromLeft(M)) {\n                    if (this.sameSize(matrix)) {\n                        var MM = new Matrix();\n                        var rows = this.rows();\n                        for (var i = 0; i < rows; i++) {\n                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\n                            MM.elements[i] = e.elements;\n                        }\n                        return MM;\n                    }\n                    return null;\n                }\n                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\n                var cols = this.elements[0].length, elements = [], sum, nc, c;\n                do {\n                    i = ki - ni;\n                    elements[i] = [];\n                    nj = kj;\n                    do {\n                        j = kj - nj;\n                        sum = new Symbol(0);\n                        nc = cols;\n                        do {\n                            c = cols - nc;\n                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\n                        }\n                        while (--nc);\n                        elements[i][j] = sum;\n                    }\n                    while (--nj);\n                }\n                while (--ni);\n                return Matrix.fromArray(elements);\n            }, undefined, this);\n        },\n        add: function (matrix, callback) {\n            var M = new Matrix();\n            if (this.sameSize(matrix)) {\n                this.eachElement(function (e, i, j) {\n                    var result = _.add(e.clone(), matrix.elements[i][j].clone());\n                    if(callback) {\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\n                    }\n                    M.set(i, j, result);\n                });\n            }\n            return M;\n        },\n        subtract: function (matrix, callback) {\n            var M = new Matrix();\n            if (this.sameSize(matrix)) {\n                this.eachElement(function (e, i, j) {\n                    var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\n                    if(callback) {\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\n                    }\n                    M.set(i, j, result);\n                });\n            }\n            return M;\n        },\n        negate: function () {\n            this.each(function (e) {\n                return e.negate();\n            });\n            return this;\n        },\n        toVector: function () {\n            if (this.rows() === 1 || this.cols() === 1) {\n                var v = new Vector();\n                v.elements = this.elements;\n                return v;\n            }\n            return this;\n        },\n        toString: function (newline, to_decimal) {\n            var l = this.rows(),\n                    s = [];\n            newline = newline === undefined ? '\\n' : newline;\n            for (var i = 0; i < l; i++) {\n                s.push('[' + this.elements[i].map(function (x) {\n                    var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\n                    return x !== undefined ? v : '';\n                }).join(',') + ']');\n            }\n            return 'matrix' + inBrackets(s.join(','));\n        },\n        text: function () {\n            return 'matrix(' + this.elements.toString('') + ')';\n        },\n        latex: function (option) {\n            var cols = this.cols(), elements = this.elements;\n            return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\n                var tex = [];\n                for (var row in elements) {\n                    var row_tex = [];\n                    for (var i = 0; i < cols; i++) {\n                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\n                    }\n                    tex.push(row_tex.join(' & '));\n                }\n                return tex.join(' \\\\cr ');\n            });\n        }\n    };\n    //aliases\n    Matrix.prototype.each = Matrix.prototype.eachElement;\n\n\n    function Set(set) {\n        this.elements = [];\n        //if the first object isn't an array, convert it to one.\n        if(!isVector(set))\n            set = Vector.fromArray(arguments);\n        \n        if(set) { \n            var elements = set.elements;\n            for(var i=0, l=elements.length; i<l; i++) {\n                this.add(elements[i]);\n            }\n        }\n    }\n    \n    Set.fromArray = function (arr) {\n        function F(args) {\n            return Set.apply(this, args);\n        }\n        F.prototype = Set.prototype;\n\n        return new F(arr);\n    };\n    \n    Set.prototype = {\n        add: function(x) {\n            if(!this.contains(x))\n                this.elements.push(x.clone());\n        },\n        contains: function(x) {\n            for(var i=0; i<this.elements.length; i++) {\n                var e = this.elements[i];\n                if(x.equals(e))\n                    return true;\n            }\n            return false;\n        },\n        each: function(f) {\n            var elements = this.elements;\n            var set = new Set();\n            for(var i=0, l=elements.length; i<l; i++) {\n                var e = elements[i];\n                f.call(this, e, set, i);\n            }\n            return set;\n        },\n        clone: function() {\n            var set = new Set();\n            this.each(function(e) {\n                set.add(e.clone());\n            });\n            return set;\n        },\n        union: function(set) {\n            var _union = this.clone();\n            set.each(function(e) {\n                _union.add(e);\n            });\n            \n            return _union;\n        },\n        difference: function(set) {\n            var diff = this.clone();\n            set.each(function(e) {\n                diff.remove(e);\n            });\n            return diff;\n        },\n        remove: function(element) {\n            for(var i=0, l=this.elements.length; i<l; i++) {\n                var e = this.elements[i];\n                if(e.equals(element)) {\n                    remove(this.elements, i);\n                    return true;\n                }\n            }\n            return false;\n        },\n        intersection: function(set) { \n            var _intersection = new Set();\n            var A = this;\n            set.each(function(e) {\n                if(A.contains(e)) {\n                    _intersection.add(e);\n                };\n            });\n            \n            return _intersection;\n        },\n        intersects: function(set) {\n            return this.intersection(set).elements.length > 0;\n        },\n        is_subset: function(set) {\n            var elements = set.elements;\n            for(var i=0, l=elements.length; i<l; i++) {\n                if(!this.contains(elements[i])) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        toString: function() {\n            return '{'+this.elements.join(',')+'}';\n        }\n    };\n\n//build ========================================================================\n    var Build = {\n        dependencies: {\n            _rename: {\n                'Math2.factorial': 'factorial'\n            },\n            factorial: {\n                'Math2.gamma': Math2.gamma\n            },\n            gamma_incomplete: {\n                'Math2.factorial': Math2.factorial\n            },\n            Li: {\n                'Math2.Ei': Math2.Ei,\n                'Math2.bigLog': Math2.bigLog,\n                'Frac': Frac\n            },\n            Ci: {\n                'Math2.factorial': Math2.factorial\n            },\n            Ei: {\n                'Math2.factorial': Math2.factorial\n            },\n            Si: {\n                'Math2.factorial': Math2.factorial\n            },\n            Shi: {\n                'Math2.factorial': Math2.factorial\n            },\n            Chi: {\n                'isInt': isInt,\n                'nround': nround,\n                'Math2.num_integrate': Math2.num_integrate\n            },\n            factor: {\n                'Math2.ifactor': Math2.ifactor,\n                'Symbol': Symbol\n            },\n            num_integrate: {\n                'Math2.simpson': Math2.simpson,\n                'nround': nround\n            },\n            fib: {\n                'even': even\n            }\n        },\n        /* Some functions need to be made numeric safe. Build checks if there's a \n         * reformat option and calls that instead when compiling the function string.\n         */\n        reformat: {\n            //this simply extends the build function\n            diff: function(symbol, deps) {\n                var f = 'var f = '+Build.build(symbol.args[0].toString())+';';\n                deps[1] += 'var diff = '+Math2.diff.toString()+';';\n                deps[1] += f;\n\n                return ['diff(f)('+symbol.args[1].toString()+')', deps];\n            }\n        },\n        getProperName: function(f) {\n            var map = {\n                continued_fraction: 'continuedFraction'\n            };\n            return map[f] || f;\n        },\n        //assumes that dependences are at max 2 levels\n        compileDependencies: function(f, deps) {\n            //grab the predefined dependiences\n            var dependencies = Build.dependencies[f];\n\n            //the dependency string\n            var dep_string = deps && deps[1] ? deps[1] : '';\n            \n            //the functions to be replaced\n            var replacements = deps && deps[0] ? deps[0] : {};\n            \n            //loop through them and add them to the list\n            for(var x in dependencies) {\n                if(typeof dependencies[x] === 'object')\n                    continue; //skip object\n                var components = x.split('.'); //Math.f becomes f\n                //if the function isn't part of an object then reference the function itself\n                dep_string += 'var '+(components.length > 1 ? components[1] : components[0])+'='+dependencies[x]+';';\n                replacements[x] = components.pop();\n            }\n            \n            return [replacements, dep_string];\n        },\n        getArgsDeps: function(symbol, dependencies) {\n            var args = symbol.args;\n            for(var i=0; i<args.length; i++) {\n                symbol.args[i].each(function(x) {\n                    if(x.group === FN)\n                        dependencies = Build.compileDependencies(x.fname, dependencies);\n                });\n            }\n            return dependencies;\n        },\n        build: function (symbol, arg_array) {\n            symbol = block('PARSE2NUMBER', function () {\n                return _.parse(symbol);\n            }, true);\n            var args = variables(symbol);\n            var supplements = [];\n            var dependencies = [];\n            var ftext = function (symbol, xports) {\n                xports = xports || [];\n                var c = [],\n                        group = symbol.group,\n                        prefix = '';\n\n                var ftext_complex = function (group) {\n                    var d = group === CB ? '*' : '+',\n                            cc = [];\n\n                    for (var x in symbol.symbols) {\n                        var sym = symbol.symbols[x],\n                                ft = ftext(sym, xports)[0];\n                        //wrap it in brackets if it's group PL or CP\n                        if (sym.isComposite())\n                            ft = inBrackets(ft);\n                        cc.push(ft);\n                    }\n                    var retval = cc.join(d);\n                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\n                    return retval;\n                },\n                ftext_function = function (bn) {\n                    var retval;\n                    if (bn in Math)\n                        retval = 'Math.' + bn;\n                    else {\n                        bn = Build.getProperName(bn);\n                        if (supplements.indexOf(bn) === -1) { //make sure you're not adding the function twice\n                            //Math2 functions aren't part of the standard javascript\n                            //Math library and must be exported.\n                            xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\n                            supplements.push(bn);\n                        }\n                        retval = bn;\n                    }\n                    retval = retval + inBrackets(symbol.args.map(function (x) {\n                        return ftext(x, xports)[0];\n                    }).join(','));\n\n                    return retval;\n                };\n                \n                //the multiplier\n                if (group === N)\n                    c.push(symbol.multiplier.toDecimal());\n                else if (symbol.multiplier.equals(-1))\n                    prefix = '-';\n                else if (!symbol.multiplier.equals(1))\n                    c.push(symbol.multiplier.toDecimal());\n                //the value\n                var value;\n\n                if (group === S || group === P)\n                    value = symbol.value;\n                else if (group === FN) {\n                    dependencies = Build.compileDependencies(symbol.fname, dependencies);\n                    dependencies = Build.getArgsDeps(symbol, dependencies);\n                    if(Build.reformat[symbol.fname]) {\n                        var components = Build.reformat[symbol.fname](symbol, dependencies);\n                        dependencies = components[1];\n                        value = components[0];\n                    }\n                    else {\n                        value =  ftext_function(symbol.fname);\n                    }\n                    \n                }\n                else if (group === EX) {\n                    var pg = symbol.previousGroup;\n                    if (pg === N || pg === S)\n                        value = symbol.value;\n                    else if (pg === FN) {\n                        value = ftext_function(symbol.fname);\n                        dependencies = Build.compileDependencies(symbol.fname, dependencies);\n                        dependencies = Build.getArgsDeps(symbol, dependencies);\n                    }\n                    else\n                        value = ftext_complex(symbol.previousGroup);\n                }\n                else {\n                    value = ftext_complex(symbol.group);\n                }\n\n                if (symbol.group !== N && !symbol.power.equals(1)) {\n                    var pow = ftext(_.parse(symbol.power));\n                    xports.push(pow[1]);\n                    value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\n                }\n\n                if (value)\n                    c.push(prefix + value);\n\n                return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\n            };\n            if (arg_array) {\n                for (var i = 0; i < args.length; i++) {\n                    var arg = args[i];\n                    if (arg_array.indexOf(arg) === -1)\n                        err(arg + ' not found in argument array');\n                }\n                args = arg_array;\n            }\n\n            var f_array = ftext(symbol);\n            \n            //make all the substitutions;\n            for(var x in dependencies[0]) {\n                var alias = dependencies[0][x];\n                f_array[1] = f_array[1].replace(x, alias);\n                dependencies[1] = dependencies[1].replace(x, alias);\n            }\n\n            var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\n            \n            return f;\n        }\n    };\n    \n    \n//finalize =====================================================================\n    /* FINALIZE */\n    (function () {\n        reserveNames(_.CONSTANTS);\n        reserveNames(_.functions);\n        _.initConstants();\n        //bug fix for error but needs to be revisited\n        if (!_.error)\n            _.error = err;\n        \n        //Store the log and log10 functions\n        Settings.LOG_FNS = {\n            log: _.functions['log'],\n            log10: _.functions['log10']\n        };\n        \n    })();\n    \n    /* END FINALIZE */\n\n//Core =========================================================================\n    var Utils = {\n        allSame: allSame,\n        allNumeric: allNumeric,\n        arguments2Array: arguments2Array,\n        arrayAddSlices: arrayAddSlices,\n        arrayClone: arrayClone,\n        arrayMax: arrayMax,\n        arrayMin: arrayMin,\n        arrayUnique: arrayUnique,\n        arraySum: arraySum,\n        block: block,\n        build: Build.build,\n        clearU: clearU,\n        comboSort: comboSort,\n        compare: compare,\n        convertToVector: convertToVector,\n        customError: customError,\n        customType: customType,\n        decompose_fn: decompose_fn,\n        each: each,\n        evaluate: evaluate,\n        even: even,\n        evenFraction: evenFraction,\n        fillHoles: fillHoles,\n        firstObject: firstObject,\n        format: format,\n        generatePrimes: generatePrimes,\n        getCoeffs: getCoeffs,\n        getU: getU,\n        importFunctions: importFunctions,\n        inBrackets: inBrackets,\n        isArray: isArray,\n        isExpression: isExpression,\n        isFraction: isFraction,\n        isInt: isInt,\n        isMatrix: isMatrix,\n        isNegative: isNegative,\n        isNumericSymbol: isNumericSymbol,\n        isPrime: isPrime,\n        isReserved: isReserved,\n        isSymbol: isSymbol,\n        isVariableSymbol: isVariableSymbol,\n        isVector: isVector,\n        keys: keys,\n        nroots: nroots,\n        remove: remove,\n        reserveNames: reserveNames,\n        range: range,\n        round: nround,\n        sameSign: sameSign,\n        scientificToDecimal: scientificToDecimal,\n        separate: separate,\n        stringReplace: stringReplace,\n        text: text,\n        validateName: validateName,\n        variables: variables,\n        warn: warn\n    };\n\n    //This contains all the parts of nerdamer and enables nerdamer's internal functions\n    //to be used.\n    var C = {\n        groups: Groups,\n        Symbol: Symbol,\n        Expression: Expression,\n        Frac: Frac,\n        Vector: Vector,\n        Matrix: Matrix,\n        Parser: Parser,\n        Fraction: Fraction,\n        Math2: Math2,\n        LaTeX: LaTeX,\n        Utils: Utils,\n        PARSER: _,\n        PARENTHESIS: PARENTHESIS,\n        Settings: Settings,\n        err: err,\n        bigInt: bigInt,\n        bigDec: bigDec,\n        exceptions: exceptions\n    };\n\n//libExports ===================================================================  \n    /**\n     * \n     * @param {String} expression the expression to be evaluated\n     * @param {Object} subs the object containing the variable values\n     * @param {Integer} location a specific location in the equation list to \n     * insert the evaluated expression\n     * @param {String} option additional options\n     * @returns {Expression} \n     */\n    var libExports = function (expression, subs, option, location) {\n        //is the user declaring a function?\n        var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\n        if (fndec)\n            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\n\n        //var variable, fn, args;\n        //convert any expression passed in to a string\n        if (expression instanceof Expression)\n            expression = expression.toString();\n\n        var multi_options = isArray(option),\n                expand = 'expand',\n                numer = multi_options ? option.indexOf('numer') !== -1 : option === 'numer';\n        if ((multi_options ? option.indexOf(expand) !== -1 : option === expand)) {\n            expression = format('{0}({1})', expand, expression);\n        }\n        var e = block('PARSE2NUMBER', function () {\n            return _.parse(expression, subs);\n        }, numer || Settings.PARSE2NUMBER);\n\n        if (location) {\n            EXPRESSIONS[location - 1] = e;\n        }\n        else {\n            EXPRESSIONS.push(e);\n        }\n\n        /*\n         if(variable) libExports.setVar(variable, e);\n         if(fn) libExports.setFunction(fn, args, e);\n         */\n\n        return new Expression(e);\n    };\n    /**\n     * Converts expression into rpn form\n     * @param {String} expression\n     * @returns {Token[]}\n     */\n    libExports.rpn = function (expression) {\n        return _.tokenize(_.toRPN(expression));\n    };\n\n    /**\n     * Generates LaTeX from expression string\n     * @param {String} e\n     * @param {object} opt\n     * @returns {String}\n     */\n    libExports.convertToLaTeX = function (e, opt) {\n        return _.toTeX(e, opt);\n    };\n\n    /**\n     * Converts latex to text - Very very very basic at the moment\n     * @param {String} e\n     * @returns {String}\n     */\n    libExports.convertFromLaTeX = function (e) {\n        var txt = LaTeX.parse(_.tokenize(e));\n        return new Expression(_.parse(txt));\n    };\n\n    /**\n     * Get the version of nerdamer or a loaded add-on\n     * @param {String} add_on - The add-on being checked\n     * @returns {String} returns the version of nerdamer\n     */\n    libExports.version = function (add_on) {\n        if (add_on) {\n            try {\n                return C[add_on].version;\n            }\n            catch (e) {\n                return \"No module named \" + add_on + \" found!\";\n            }\n        }\n        return version;\n    };\n\n    /**\n     * Get nerdamer generated warnings\n     * @returns {String[]}\n     */\n    libExports.getWarnings = function () {\n        return WARNINGS;\n    };\n\n    /**\n     * \n     * @param {String} constant The name of the constant to be set\n     * @param {mixed} value The value of the constant \n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.setConstant = function (constant, value) {\n        validateName(constant);\n        if (!isReserved(constant)) {\n            //fix for issue #127\n            if (value === 'delete' || value === '') {\n                delete _.CONSTANTS[constant];\n            }\n            else {\n                if (isNaN(value))\n                    throw new NerdamerTypeError('Constant must be a number!');\n                _.CONSTANTS[constant] = value;\n            }\n        }\n        return this;\n    };\n\n    /**\n     * Returns the value of a previously set constant\n     * @param {type} constant\n     * @returns {String}\n     */\n    libExports.getConstant = function (constant) {\n        return String(_.constant[constant]);\n    };\n\n    /**\n     * \n     * @param {String} name The name of the function\n     * @param {Array} params_array A list containing the parameter name of the functions\n     * @param {String} body The body of the function\n     * @returns {Boolean} returns true if succeeded and falls on fail\n     * @example nerdamer.setFunction('f',['x'], 'x^2+2');\n     */\n    libExports.setFunction = setFunction;\n\n    /**\n     * \n     * @returns {C} Exports the nerdamer core functions and objects\n     */\n    libExports.getCore = function () {\n        return C;\n    };\n\n    libExports.getExpression = libExports.getEquation = Expression.getExpression;\n\n    /**\n     * \n     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\n     * @returns {String|Array}\n     */\n    libExports.reserved = function (asArray) {\n        if (asArray) {\n            return RESERVED;\n        }\n        return RESERVED.join(', ');\n    };\n\n    /**\n     * \n     * @param {Integer} equation_number the number of the equation to clear. \n     * If 'all' is supplied then all equations are cleared\n     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\n        if (equation_number === 'all') {\n            EXPRESSIONS = [];\n        }\n        else if (equation_number === 'last') {\n            EXPRESSIONS.pop();\n        }\n        else if (equation_number === 'first') {\n            EXPRESSIONS.shift();\n        }\n        else {\n            var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\n            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\n        }\n        return this;\n    };\n\n    /**\n     * Alias for nerdamer.clear('all')\n     */\n    libExports.flush = function () {\n        this.clear('all');\n        return this;\n    };\n\n    /**\n     * \n     * @param {Boolean} asObject\n     * @param {Boolean} asLaTeX\n     * @param {String|String[]} option \n     * @returns {Array}\n     */\n    libExports.expressions = function (asObject, asLaTeX, option) {\n        var result = asObject ? {} : [];\n        for (var i = 0; i < EXPRESSIONS.length; i++) {\n            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\n            asObject ? result[i + 1] = eq : result.push(eq);\n        }\n        return result;\n    };\n\n    //the method for registering modules\n    libExports.register = function (obj) {\n        var core = this.getCore();\n\n        if (isArray(obj)) {\n            for (var i = 0; i < obj.length; i++) {\n                if (obj)\n                    this.register(obj[i]);\n            }\n        }\n        else if (obj && Settings.exclude.indexOf(obj.name) === -1) {\n            //make sure all the dependencies are available\n            if (obj.dependencies) {\n                for (var i = 0; i < obj.dependencies.length; i++)\n                    if (!core[obj.dependencies[i]])\n                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\n            }\n            //if no parent object is provided then the function does not have an address and cannot be called directly\n            var parent_obj = obj.parent,\n                    fn = obj.build.call(core); //call constructor to get function\n            if (parent_obj) {\n                if (!core[parent_obj])\n                    core[obj.parent] = {};\n\n                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\n                //attach the function to the core\n                ref_obj[obj.name] = fn;\n            }\n            if (obj.visible)\n                _.functions[obj.name] = [fn, obj.numargs]; //make the function available\n\n        }\n    };\n\n    /**\n     * @param {String} name variable name\n     * @returns {boolean} validates if the profided string is a valid variable name\n     */\n    libExports.validateName = validateName;\n\n    /**\n     * @param {String} varname variable name\n     * @returns {boolean} validates if the profided string is a valid variable name\n     */\n    libExports.validVarName = function (varname) {\n        try {\n            validateName(varname);\n            return RESERVED.indexOf(varname) === -1;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n\n    /**\n     * \n     * @returns {Array} Array of functions currently supported by nerdamer\n     */\n    libExports.supported = function () {\n        return keys(_.functions);\n    };\n\n    /**\n     * \n     * @returns {Number} The number equations/expressions currently loaded\n     */\n    libExports.numEquations = libExports.numExpressions = function () {\n        return EXPRESSIONS.length;\n    };\n    /* END EXPORTS */\n\n    /**\n     * \n     * @param {String} v variable to be set\n     * @param {String} val value of variable. This can be a variable expression or number\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.setVar = function (v, val) {\n        validateName(v);\n        //check if it's not already a constant\n        if (v in _.CONSTANTS)\n            err('Cannot set value for constant ' + v);\n        if (val === 'delete' || val === '')\n            delete VARS[v];\n        else {\n            VARS[v] = isSymbol(val) ? val : _.parse(val);\n        }\n        return this;\n    };\n\n    /**\n     * Returns the value of a set variable\n     * @param {type} v\n     * @returns {varies}\n     */\n    libExports.getVar = function (v) {\n        return VARS[v];\n    };\n    /**\n     * Clear the variables from the VARS object\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.clearVars = function () {\n        VARS = {};\n        return this;\n    };\n\n    /**\n     * \n     * @param {Function} loader\n     * @returns {nerdamer}\n     */\n    libExports.load = function (loader) {\n        loader.call(this);\n        return this;\n    };\n\n    /**\n     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\n     * @param {String|String[]} option\n     * @returns {Object} Returns an object with the variables\n     */\n    libExports.getVars = function (output, option) {\n        output = output || 'text';\n        var variables = {};\n        if (output === 'object')\n            variables = VARS;\n        else {\n            for (var v in VARS) {\n                if (output === 'latex') {\n                    variables[v] = VARS[v].latex(option);\n                }\n                else if (output === 'text') {\n                    variables[v] = VARS[v].text(option);\n                }\n            }\n        }\n        return variables;\n    };\n\n    /**\n     * Set the value of a setting\n     * @param {String} setting The setting to be changed\n     * @param {boolean} value \n     */\n    libExports.set = function (setting, value) {\n        //current options:\n        //PARSE2NUMBER, suppress_errors\n        if (typeof setting === 'object')\n            for (var x in setting) {\n                libExports.set(x, setting[x]);\n            }\n\n        var disallowed = ['SAFE'];\n        if (disallowed.indexOf(setting) !== -1)\n            err('Cannot modify setting: ' + setting);\n\n        if (setting === 'PRECISION')\n            bigDec.set({precision: value});\n        else if(setting === 'USE_LN' && value === true) {\n            //set log as LN\n            Settings.LOG = 'LN';\n            //set log10 as log\n            Settings.LOG10 = 'log';\n            //point the functions in the right direction\n            _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\n            //the log10 function must be explicitly set\n            _.functions['log'][0] = function(x) {\n                if(x.isConstant())\n                    return new Symbol(Math.log10(x));\n                return _.symfunction(Settings.LOG10, [x]);\n            };\n            _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\n            \n            //remove log10\n            delete _.functions['log10'];\n        }\n        else\n            Settings[setting] = value;\n    };\n\n    /**\n     * Get the value of a setting\n     * @param {type} setting\n     * @returns {undefined}\n     */\n    libExports.get = function (setting) {\n        return Settings[setting];\n    };\n\n    /**\n     * This functions makes internal functions available externally\n     * @param {bool} override Override the functions when calling api if it exists \n     */\n    libExports.api = function (override) {\n        //Map internal functions to external ones\n        var linker = function (fname) {\n            return function () {\n                var args = [].slice.call(arguments);\n                for (var i = 0; i < args.length; i++)\n                    args[i] = _.parse(args[i]);\n                return new Expression(block('PARSE2NUMBER', function () {\n                    return _.callfunction(fname, args);\n                }));\n            };\n        };\n        //perform the mapping\n        for (var x in _.functions)\n            if (!(x in libExports) || override)\n                libExports[x] = linker(x);\n    };\n\n    libExports.replaceFunction = function (name, fn, num_args) {\n        var existing = _.functions[name];\n        var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\n        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\n    };\n\n    libExports.setOperator = function (operator, shift) {\n        _.setOperator(operator, shift);\n    };\n    \n    libExports.getOperator = function(operator) {\n        return _.getOperator(operator);\n    };\n\n    libExports.aliasOperator = function(operator, withOperator) {\n        _.aliasOperator(operator, withOperator);\n    };\n\n    libExports.tree = function (expression) {\n        return _.tree(_.toRPN(_.tokenize(expression)));\n    };\n\n    libExports.htmlTree = function (expression, indent) {\n        var tree = this.tree(expression);\n\n        return '<div class=\"tree\">\\n' +\n                '    <ul>\\n' +\n                '        <li>\\n' +\n                tree.toHTML(3, indent) + '\\n' +\n                '        </li>\\n' +\n                '    </ul>\\n' +\n                '</div>';\n    };\n    \n    libExports.addPeeker = function(name, f) {\n        if(_.peekers[name])\n            _.peekers[name].push(f);\n    };\n    \n    libExports.removePeeker = function(name, f) {\n        remove(_.peekers[name], f);\n    };\n    \n    libExports.parse = function(e) {\n        return String(e).split(';').map(function(x) {\n            return _.parse(x);\n        });\n    };\n\n    libExports.api();\n\n    return libExports; //Done\n//imports ======================================================================\n})({\n    //https://github.com/peterolson/BigInteger.js\n    bigInt: (function(){\n        var bigInt=function(undefined){\"use strict\";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v===\"undefined\")return Integer[0];if(typeof radix!==\"undefined\")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value===\"number\"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r===\"number\"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base}r[i+l]=carry}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error(\"Cannot divide by zero\");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient===\"number\"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient===\"number\"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod===\"number\"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error(\"The exponent \"+n.toString()+\" is too large.\");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error(\"Cannot take modPow with modulus 0\");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev(),b=nPrev,r=0,d,t,i,x;while(b.isEven())b=b.divide(2),r++;next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2))}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)))}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+\" and \"+n.toString()+\" are not co-prime\");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n===\"number\"||typeof n===\"string\")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit))}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v===\"number\"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return{p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1))}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result===\"number\"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c===\"-\")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c===\"1\"&&absBase===1)continue;throw new Error(c+\" is not a valid digit in base \"+base+\".\")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]===\"-\";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c===\"<\"){var start=i;do{i++}while(text[i]!==\">\");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+\" is not a valid character\")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit)}return\"<\"+digit+\">\"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return{value:[0],isNegative:false};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(base.equals(-1)){if(n.isZero())return{value:[0],isNegative:false};if(n.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return{value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs()}if(base.equals(1)){if(n.isZero())return{value:[0],isNegative:false};return{value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(digit.toJSNumber())}out.push(left.toJSNumber());return{value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return(arr.isNegative?\"-\":\"\")+arr.value.map(stringify).join(\"\")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros=\"0000000\",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?\"-\":\"\";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error(\"Invalid integer: \"+v)}var sign=v[0]===\"-\";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error(\"Invalid integer: \"+split.join(\"e\"));if(split.length===2){var exp=split[1];if(exp[0]===\"+\")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error(\"Invalid integer: \"+exp+\" is not a valid exponent.\");var text=split[0];var decimalPlace=text.indexOf(\".\");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error(\"Cannot include negative exponent part for integers\");text+=new Array(exp+1).join(\"0\");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error(\"Invalid integer: \"+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+\" is not an integer.\");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v===\"number\"){return parseNumberValue(v)}if(typeof v===\"string\"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(typeof module!==\"undefined\"&&module.hasOwnProperty(\"exports\")){module.exports=bigInt}if(typeof define===\"function\"&&define.amd){define(\"big-integer\",[],function(){return bigInt})}\n        return bigInt;\n    })(),\n    /* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\n    bigDec: function(n){\"use strict\";var e,i,t,r=9e15,s=1e9,o=\"0123456789abcdef\",u=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",c=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",f={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-r,maxE:r,crypto:!1},h=!0,a=\"[DecimalError] \",d=a+\"Invalid argument: \",l=a+\"Precision limit exceeded\",p=a+\"crypto unavailable\",g=Math.floor,w=Math.pow,m=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,v=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,N=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,b=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,E=1e7,x=7,M=u.length-1,y=c.length-1,q={name:\"[object Decimal]\"};function O(n){var e,i,t,r=n.length-1,s=\"\",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+\"\",(i=x-t.length)&&(s+=S(i)),s+=t;o=n[e],(i=x-(t=o+\"\").length)&&(s+=S(i))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function F(n,e,i){if(n!==~~n||n<e||n>i)throw Error(d+n)}function A(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return--e<0?(e+=x,r=0):(r=Math.ceil((e+1)/x),e%=x),s=w(10,x-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==w(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==w(10,e-3)-1,o}function D(n,e,i){for(var t,r,s=[0],u=0,c=n.length;u<c;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=o.indexOf(n.charAt(u++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}q.absoluteValue=q.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),P(n)},q.ceil=function(){return P(new this.constructor(this),this.e+1,2)},q.comparedTo=q.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(e=0,i=(t=o.length)<(r=u.length)?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},q.cosine=q.cos=function(){var n,e,i=this,r=i.constructor;return i.d?i.d[0]?(n=r.precision,e=r.rounding,r.precision=n+Math.max(i.e,i.sd())+x,r.rounding=1,i=function(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=Math.pow(4,-i).toString()):(i=16,t=\"2.3283064365386962890625e-10\");n.precision+=i,e=W(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1)}return n.precision-=i,e}(r,J(r,i)),r.precision=n,r.rounding=e,P(2==t||3==t?i.neg():i,n,e,!0)):new r(1):new r(NaN)},q.cubeRoot=q.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,d=a.constructor;if(!a.isFinite()||a.isZero())return new d(a);for(h=!1,(s=a.s*Math.pow(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new d(s.toString()):(i=O(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?\"0\":\"00\"),s=Math.pow(i,1/3),n=g((n+1)/3)-(n%3==(n<0?-1:2)),(t=new d(i=s==1/0?\"5e\"+n:(i=s.toExponential()).slice(0,i.indexOf(\"e\")+1)+n)).s=a.s),o=(n=d.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=Z(f.plus(a).times(u),f.plus(c),o+2,1),O(u.d).slice(0,o)===(i=O(t.d)).slice(0,o)){if(\"9999\"!=(i=i.slice(o-3,o+1))&&(r||\"4999\"!=i)){+i&&(+i.slice(1)||\"5\"!=i.charAt(0))||(P(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(P(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1}return h=!0,P(t,n,d.rounding,e)},q.decimalPlaces=q.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-g(this.e/x))*x,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},q.dividedBy=q.div=function(n){return Z(this,new this.constructor(n))},q.dividedToIntegerBy=q.divToInt=function(n){var e=this.constructor;return P(Z(this,new e(n),0,1,1),e.precision,e.rounding)},q.equals=q.eq=function(n){return 0===this.cmp(n)},q.floor=function(){return P(new this.constructor(this),this.e+1,3)},q.greaterThan=q.gt=function(n){return this.cmp(n)>0},q.greaterThanOrEqualTo=q.gte=function(n){var e=this.cmp(n);return 1==e||0===e},q.hyperbolicCosine=q.cosh=function(){var n,e,i,t,r,s=this,o=s.constructor,u=new o(1);if(!s.isFinite())return new o(s.s?1/0:NaN);if(s.isZero())return u;i=o.precision,t=o.rounding,o.precision=i+Math.max(s.e,s.sd())+4,o.rounding=1,(r=s.d.length)<32?(n=Math.ceil(r/3),e=Math.pow(4,-n).toString()):(n=16,e=\"2.3283064365386962890625e-10\"),s=W(o,1,s.times(e),new o(1),!0);for(var c,f=n,h=new o(8);f--;)c=s.times(s),s=u.minus(c.times(h.minus(c.times(h))));return P(s,o.precision=i,o.rounding=t,!0)},q.hyperbolicSine=q.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=W(s,2,r,r,!0);else{n=(n=1.4*Math.sqrt(t))>16?16:0|n,r=W(s,2,r=r.times(Math.pow(5,-n)),r,!0);for(var o,u=new s(5),c=new s(16),f=new s(20);n--;)o=r.times(r),r=r.times(u.plus(o.times(c.times(o).plus(f))))}return s.precision=e,s.rounding=i,P(r,e,i,!0)},q.hyperbolicTangent=q.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,Z(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},q.inverseCosine=q.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return-1!==t?0===t?e.isNeg()?_(i,r,s):new i(0):new i(NaN):e.isZero()?_(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=_(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},q.inverseHyperbolicCosine=q.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,h=!1,i=i.times(i).minus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},q.inverseHyperbolicSine=q.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,h=!1,i=i.times(i).plus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln())},q.inverseHyperbolicTangent=q.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?P(new s(r),n,e,!0):(s.precision=i=t-r.e,r=Z(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},q.inverseSine=q.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,-1!==e?0===e?((n=_(s,i+4,t).times(.5)).s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},q.inverseTangent=q.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,d=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&d+4<=y)return(o=_(a,d+4,l).times(.25)).s=f.s,o}else{if(!f.s)return new a(NaN);if(d+4<=y)return(o=_(a,d+4,l).times(.5)).s=f.s,o}for(a.precision=u=d+10,a.rounding=1,n=i=Math.min(28,u/x+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(h=!1,e=Math.ceil(u/x),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),h=!0,P(o,a.precision=d,a.rounding=l,!0)},q.isFinite=function(){return!!this.d},q.isInteger=q.isInt=function(){return!!this.d&&g(this.e/x)>this.d.length-2},q.isNaN=function(){return!this.s},q.isNegative=q.isNeg=function(){return this.s<0},q.isPositive=q.isPos=function(){return this.s>0},q.isZero=function(){return!!this.d&&0===this.d[0]},q.lessThan=q.lt=function(n){return this.cmp(n)<0},q.lessThanOrEqualTo=q.lte=function(n){return this.cmp(n)<1},q.logarithm=q.log=function(n){var e,i,t,r,s,o,u,c,f=this.constructor,a=f.precision,d=f.rounding;if(null==n)n=new f(10),e=!0;else{if(i=(n=new f(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new f(NaN);e=n.eq(10)}if(i=this.d,this.s<0||!i||!i[0]||this.eq(1))return new f(i&&!i[0]?-1/0:1!=this.s?NaN:i?0:1/0);if(e)if(i.length>1)s=!0;else{for(r=i[0];r%10==0;)r/=10;s=1!==r}if(h=!1,o=B(this,u=a+5),t=e?U(f,u+10):B(n,u),A((c=Z(o,t,u,1)).d,r=a,d))do{if(o=B(this,u+=10),t=e?U(f,u+10):B(n,u),c=Z(o,t,u,1),!s){+O(c.d).slice(r+1,r+15)+1==1e14&&(c=P(c,a+1,0));break}}while(A(c.d,r+=10,d));return h=!0,P(c,a,d)},q.minus=q.sub=function(n){var e,i,t,r,s,o,u,c,f,a,d,l,p=this,w=p.constructor;if(n=new w(n),!p.d||!n.d)return p.s&&n.s?p.d?n.s=-n.s:n=new w(n.d||p.s!==n.s?p:NaN):n=new w(NaN),n;if(p.s!=n.s)return n.s=-n.s,p.plus(n);if(f=p.d,l=n.d,u=w.precision,c=w.rounding,!f[0]||!l[0]){if(l[0])n.s=-n.s;else{if(!f[0])return new w(3===c?-0:0);n=new w(p)}return h?P(n,u,c):n}if(i=g(n.e/x),a=g(p.e/x),f=f.slice(),s=a-i){for((d=s<0)?(e=f,s=-s,o=l.length):(e=l,i=a,o=f.length),s>(t=Math.max(Math.ceil(u/x),o)+2)&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for((d=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){d=f[t]<l[t];break}s=0}for(d&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;t>0;--t)f[o++]=0;for(t=l.length;t>s;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=E-1;--f[r],f[t]+=E}f[t]-=l[t]}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;return f[0]?(n.d=f,n.e=L(f,i),h?P(n,u,c):n):new w(3===c?-0:0)},q.modulo=q.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?P(new t(i),t.precision,t.rounding):(h=!1,9==t.modulo?(e=Z(i,n.abs(),0,3,1)).s*=n.s:e=Z(i,n,0,t.modulo,1),e=e.times(n),h=!0,i.minus(e))},q.naturalExponential=q.exp=function(){return H(this)},q.naturalLogarithm=q.ln=function(){return B(this)},q.negated=q.neg=function(){var n=new this.constructor(this);return n.s=-n.s,P(n)},q.plus=q.add=function(n){var e,i,t,r,s,o,u,c,f,a,d=this,l=d.constructor;if(n=new l(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new l(n.d||d.s===n.s?d:NaN)):n=new l(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(f=d.d,a=n.d,u=l.precision,c=l.rounding,!f[0]||!a[0])return a[0]||(n=new l(d)),h?P(n,u,c):n;if(s=g(d.e/x),t=g(n.e/x),f=f.slice(),r=s-t){for(r<0?(i=f,r=-r,o=a.length):(i=a,t=s,o=f.length),r>(o=(s=Math.ceil(u/x))>o?s+1:o+1)&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/E|0,f[r]%=E;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();return n.d=f,n.e=L(f,t),h?P(n,u,c):n},q.precision=q.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(d+n);return i.d?(e=k(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},q.round=function(){var n=this,e=n.constructor;return P(new e(n),n.e+1,e.rounding)},q.sine=q.sin=function(){var n,e,i=this,r=i.constructor;return i.isFinite()?i.isZero()?new r(i):(n=r.precision,e=r.rounding,r.precision=n+Math.max(i.e,i.sd())+x,r.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return W(n,2,e,e);i=(i=1.4*Math.sqrt(t))>16?16:0|i,e=e.times(Math.pow(5,-i)),e=W(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(r,J(r,i)),r.precision=n,r.rounding=e,P(t>2?i.neg():i,n,e,!0)):new r(NaN)},q.squareRoot=q.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(h=!1,0==(f=Math.sqrt(+o))||f==1/0?(((e=O(u)).length+c)%2==0&&(e+=\"0\"),f=Math.sqrt(e),c=g((c+1)/2)-(c<0||c%2),t=new a(e=f==1/0?\"1e\"+c:(e=f.toExponential()).slice(0,e.indexOf(\"e\")+1)+c)):t=new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(Z(o,s,i+2,1)).times(.5),O(s.d).slice(0,i)===(e=O(t.d)).slice(0,i)){if(\"9999\"!=(e=e.slice(i-3,i+1))&&(r||\"4999\"!=e)){+e&&(+e.slice(1)||\"5\"!=e.charAt(0))||(P(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(P(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1}return h=!0,P(t,c,a.rounding,n)},q.tangent=q.tan=function(){var n,e,i=this,r=i.constructor;return i.isFinite()?i.isZero()?new r(i):(n=r.precision,e=r.rounding,r.precision=n+10,r.rounding=1,(i=i.sin()).s=1,i=Z(i,new r(1).minus(i.times(i)).sqrt(),n+10,0),r.precision=n,r.rounding=e,P(2==t||4==t?i.neg():i,n,e,!0)):new r(NaN)},q.times=q.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this,d=a.constructor,l=a.d,p=(n=new d(n)).d;if(n.s*=a.s,!(l&&l[0]&&p&&p[0]))return new d(!n.s||l&&!l[0]&&!p||p&&!p[0]&&!l?NaN:l&&p?0*n.s:n.s/0);for(i=g(a.e/x)+g(n.e/x),(c=l.length)<(f=p.length)&&(s=l,l=p,p=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;--t>=0;){for(e=0,r=c+t;r>t;)u=s[r]+p[t]*l[r-t-1]+e,s[r--]=u%E|0,e=u/E|0;s[r]=(s[r]+e)%E|0}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=L(s,i),h?P(n,d.precision,d.rounding):n},q.toBinary=function(n,e){return z(this,2,n,e)},q.toDecimalPlaces=q.toDP=function(n,e){var i=this,t=i.constructor;return i=new t(i),void 0===n?i:(F(n,0,s),void 0===e?e=t.rounding:F(e,0,8),P(i,n+i.e+1,e))},q.toExponential=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,!0):(F(n,0,s),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n+1,e),!0,n+1)),t.isNeg()&&!t.isZero()?\"-\"+i:i},q.toFixed=function(n,e){var i,t,r=this,o=r.constructor;return void 0===n?i=R(r):(F(n,0,s),void 0===e?e=o.rounding:F(e,0,8),i=R(t=P(new o(r),n+r.e+1,e),!1,n+t.e+1)),r.isNeg()&&!r.isZero()?\"-\"+i:i},q.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,l,p,g=this,m=g.d,v=g.constructor;if(!m)return new v(g);if(f=i=new v(1),t=c=new v(0),o=(s=(e=new v(t)).e=k(m)-g.e-1)%x,e.d[0]=w(10,o<0?x+o:o),null==n)n=s>0?e:f;else{if(!(u=new v(n)).isInt()||u.lt(f))throw Error(d+u);n=u.gt(e)?s>0?e:f:u}for(h=!1,u=new v(O(m)),a=v.precision,v.precision=s=m.length*x*2;l=Z(u,e,0,1,1),1!=(r=i.plus(l.times(t))).cmp(n);)i=t,t=r,r=f,f=c.plus(l.times(r)),c=r,r=e,e=u.minus(l.times(r)),u=r;return r=Z(n.minus(i),t,0,1,1),c=c.plus(r.times(f)),i=i.plus(r.times(t)),c.s=f.s=g.s,p=Z(f,t,s,1).minus(g).abs().cmp(Z(c,i,s,1).minus(g).abs())<1?[f,t]:[c,i],v.precision=a,h=!0,p},q.toHexadecimal=q.toHex=function(n,e){return z(this,16,n,e)},q.toNearest=function(n,e){var i=this,t=i.constructor;if(i=new t(i),null==n){if(!i.d)return i;n=new t(1),e=t.rounding}else{if(n=new t(n),void 0===e?e=t.rounding:F(e,0,8),!i.d)return n.s?i:n;if(!n.d)return n.s&&(n.s=i.s),n}return n.d[0]?(h=!1,i=Z(i,n,0,e,1).times(n),h=!0,P(i)):(n.s=i.s,i=n),i},q.toNumber=function(){return+this},q.toOctal=function(n,e){return z(this,8,n,e)},q.toPower=q.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return P(u,t,s);if((e=g(n.e/x))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=T(c,u,i,t),n.s<0?new c(1).div(r):P(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return(e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+\"\").e:g(f*(Math.log(\"0.\"+O(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(e>0?o/0:0):(h=!1,c.rounding=u.s=1,i=Math.min(12,(e+\"\").length),(r=H(n.times(B(u,t+i)),t)).d&&A((r=P(r,t+5,1)).d,t,s)&&(e=t+10,+O((r=P(H(n.times(B(u,e+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14&&(r=P(r,t+1,0))),r.s=o,h=!0,c.rounding=s,P(r,t,s))},q.toPrecision=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,t.e<=r.toExpNeg||t.e>=r.toExpPos):(F(n,1,s),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n,e),n<=t.e||t.e<=r.toExpNeg,n)),t.isNeg()&&!t.isZero()?\"-\"+i:i},q.toSignificantDigits=q.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(F(n,1,s),void 0===e?e=i.rounding:F(e,0,8)),P(new i(this),n,e)},q.toString=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?\"-\"+i:i},q.truncated=q.trunc=function(){return P(new this.constructor(this),this.e+1,1)},q.valueOf=q.toJSON=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?\"-\"+i:i};var Z=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function t(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift()}return function(r,s,o,u,c,f){var h,a,d,l,p,w,m,v,N,b,M,y,q,O,F,A,D,Z,R,L,U=r.constructor,_=r.s==s.s?1:-1,k=r.d,S=s.d;if(!(k&&k[0]&&S&&S[0]))return new U(r.s&&s.s&&(k?!S||k[0]!=S[0]:S)?k&&0==k[0]||!S?0*_:_/0:NaN);for(f?(p=1,a=r.e-s.e):(f=E,p=x,a=g(r.e/p)-g(s.e/p)),R=S.length,D=k.length,b=(N=new U(_)).d=[],d=0;S[d]==(k[d]||0);d++);if(S[d]>(k[d]||0)&&a--,null==o?(O=o=U.precision,u=U.rounding):O=c?o+(r.e-s.e)+1:o,O<0)b.push(1),w=!0;else{if(O=O/p+2|0,d=0,1==R){for(l=0,S=S[0],O++;(d<D||l)&&O--;d++)F=l*f+(k[d]||0),b[d]=F/S|0,l=F%S|0;w=l||d<D}else{for((l=f/(S[0]+1)|0)>1&&(S=n(S,l,f),k=n(k,l,f),R=S.length,D=k.length),A=R,y=(M=k.slice(0,R)).length;y<R;)M[y++]=0;(L=S.slice()).unshift(0),Z=S[0],S[1]>=f/2&&++Z;do{l=0,(h=e(S,M,R,y))<0?(q=M[0],R!=y&&(q=q*f+(M[1]||0)),(l=q/Z|0)>1?(l>=f&&(l=f-1),1==(h=e(m=n(S,l,f),M,v=m.length,y=M.length))&&(l--,t(m,R<v?L:S,v,f))):(0==l&&(h=l=1),m=S.slice()),(v=m.length)<y&&m.unshift(0),t(M,m,y,f),-1==h&&(h=e(S,M,R,y=M.length))<1&&(l++,t(M,R<y?L:S,y,f)),y=M.length):0===h&&(l++,M=[0]),b[d++]=l,h&&M[0]?M[y++]=k[A]||0:(M=[k[A]],y=1)}while((A++<D||void 0!==M[0])&&O--);w=void 0!==M[0]}b[0]||b.shift()}if(1==p)N.e=a,i=w;else{for(d=1,l=b[0];l>=10;l/=10)d++;N.e=d+a*p-1,P(N,c?o+N.e+1:o,u,w)}return N}}();function P(n,e,i,t){var r,s,o,u,c,f,a,d,l,p=n.constructor;n:if(null!=e){if(!(d=n.d))return n;for(r=1,u=d[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=x,o=e,c=(a=d[l=0])/w(10,r-o-1)%10|0;else if((l=Math.ceil((s+1)/x))>=(u=d.length)){if(!t)break n;for(;u++<=l;)d.push(0);a=c=0,r=1,o=(s%=x)-x+1}else{for(a=u=d[l],r=1;u>=10;u/=10)r++;c=(o=(s%=x)-x+r)<0?0:a/w(10,r-o-1)%10|0}if(t=t||e<0||void 0!==d[l+1]||(o<0?a:a%w(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/w(10,r-o):0:d[l-1])%10&1||i==(n.s<0?8:7)),e<1||!d[0])return d.length=0,f?(e-=n.e+1,d[0]=w(10,(x-e%x)%x),n.e=-e||0):d[0]=n.e=0,n;if(0==s?(d.length=l,u=1,l--):(d.length=l+1,u=w(10,x-s),d[l]=o>0?(a/w(10,r-o)%w(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=d[0];o>=10;o/=10)s++;for(o=d[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,d[0]==E&&(d[0]=1));break}if(d[l]+=u,d[l]!=E)break;d[l--]=0,u=1}for(s=d.length;0===d[--s];)d.pop()}return h&&(n.e>p.maxE?(n.d=null,n.e=NaN):n.e<p.minE&&(n.e=0,n.d=[0])),n}function R(n,e,i){if(!n.isFinite())return V(n);var t,r=n.e,s=O(n.d),o=s.length;return e?(i&&(t=i-o)>0?s=s.charAt(0)+\".\"+s.slice(1)+S(t):o>1&&(s=s.charAt(0)+\".\"+s.slice(1)),s=s+(n.e<0?\"e\":\"e+\")+n.e):r<0?(s=\"0.\"+S(-r-1)+s,i&&(t=i-o)>0&&(s+=S(t))):r>=o?(s+=S(r+1-o),i&&(t=i-r-1)>0&&(s=s+\".\"+S(t))):((t=r+1)<o&&(s=s.slice(0,t)+\".\"+s.slice(t)),i&&(t=i-o)>0&&(r+1===o&&(s+=\".\"),s+=S(t))),s}function L(n,e){var i=n[0];for(e*=x;i>=10;i/=10)e++;return e}function U(n,e,i){if(e>M)throw h=!0,i&&(n.precision=i),Error(l);return P(new n(u),e,1,!0)}function _(n,e,i){if(e>y)throw Error(l);return P(new n(c),e,i,!0)}function k(n){var e=n.length-1,i=e*x+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++}return i}function S(n){for(var e=\"\";n--;)e+=\"0\";return e}function T(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/x+4);for(h=!1;;){if(i%2&&G((s=s.times(e)).d,o)&&(r=!0),0===(i=g(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}G((e=e.times(e)).d,o)}return h=!0,s}function I(n){return 1&n.d[n.d.length-1]}function C(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t)}return r}function H(n,e){var i,t,r,s,o,u,c,f=0,a=0,d=0,l=n.constructor,p=l.rounding,g=l.precision;if(!n.d||!n.d[0]||n.e>17)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==e?(h=!1,c=g):c=e,u=new l(.03125);n.e>-2;)n=n.times(u),d+=5;for(c+=t=Math.log(w(2,d))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=P(s.times(n),c,1),i=i.times(++a),O((u=o.plus(Z(s,i,c,1))).d).slice(0,c)===O(o.d).slice(0,c)){for(r=d;r--;)o=P(o.times(o),c,1);if(null!=e)return l.precision=g,o;if(!(f<3&&A(o.d,c-t,p,f)))return P(o,l.precision=g,p,h=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++}o=u}}function B(n,e){var i,t,r,s,o,u,c,f,a,d,l,p=1,g=n,w=g.d,m=g.constructor,v=m.rounding,N=m.precision;if(g.s<0||!w||!w[0]||!g.e&&1==w[0]&&1==w.length)return new m(w&&!w[0]?-1/0:1!=g.s?NaN:w?0:g);if(null==e?(h=!1,a=N):a=e,m.precision=a+=10,t=(i=O(w)).charAt(0),!(Math.abs(s=g.e)<15e14))return f=U(m,a+2,N).times(s+\"\"),g=B(new m(t+\".\"+i.slice(1)),a-10).plus(f),m.precision=N,null==e?P(g,N,v,h=!0):g;for(;t<7&&1!=t||1==t&&i.charAt(1)>3;)t=(i=O((g=g.times(n)).d)).charAt(0),p++;for(s=g.e,t>1?(g=new m(\"0.\"+i),s++):g=new m(t+\".\"+i.slice(1)),d=g,c=o=g=Z(g.minus(1),g.plus(1),a,1),l=P(g.times(g),a,1),r=3;;){if(o=P(o.times(l),a,1),O((f=c.plus(Z(o,new m(r),a,1))).d).slice(0,a)===O(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(U(m,a+2,N).times(s+\"\"))),c=Z(c,new m(p),a,1),null!=e)return m.precision=N,c;if(!A(c.d,a-10,v,u))return P(c,m.precision=N,v,h=!0);m.precision=a+=10,f=o=g=Z(d.minus(1),d.plus(1),a,1),l=P(g.times(g),a,1),r=u=1}c=f,r+=2}}function V(n){return String(n.s*n.s/0)}function j(n,e){var i,t,r;for((i=e.indexOf(\".\"))>-1&&(e=e.replace(\".\",\"\")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%x,i<0&&(t+=x),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=x;t<r;)n.d.push(+e.slice(t,t+=x));e=e.slice(t),t=x-e.length}else t-=r;for(;t--;)e+=\"0\";n.d.push(+e),h&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function $(n,i){var t,r,s,o,u,c,f,a,l;if(\"Infinity\"===i||\"NaN\"===i)return+i||(n.s=NaN),n.e=NaN,n.d=null,n;if(v.test(i))t=16,i=i.toLowerCase();else if(m.test(i))t=2;else{if(!N.test(i))throw Error(d+i);t=8}for((o=i.search(/p/i))>0?(f=+i.slice(o+1),i=i.substring(2,o)):i=i.slice(2),u=(o=i.indexOf(\".\"))>=0,r=n.constructor,u&&(o=(c=(i=i.replace(\".\",\"\")).length)-o,s=T(r,new r(t),o,2*o)),o=l=(a=D(i,t,E)).length-1;0===a[o];--o)a.pop();return o<0?new r(0*n.s):(n.e=L(a,l),n.d=a,h=!1,u&&(n=Z(n,s,4*c)),f&&(n=n.times(Math.abs(f)<54?Math.pow(2,f):e.pow(2,f))),h=!0,n)}function W(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/x);for(h=!1,c=i.times(i),u=new n(t);;){if(o=Z(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=Z(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0}return h=!0,o.d.length=a+1,o}function J(n,e){var i,r=e.s<0,s=_(n,n.precision,1),o=s.times(.5);if((e=e.abs()).lte(o))return t=r?4:1,e;if((i=e.divToInt(s)).isZero())t=r?3:2;else{if((e=e.minus(i.times(s))).lte(o))return t=I(i)?r?2:3:r?4:1,e;t=I(i)?r?1:4:r?3:2}return e.minus(s).abs()}function z(n,e,t,r){var u,c,f,h,a,d,l,p,g,w=n.constructor,m=void 0!==t;if(m?(F(t,1,s),void 0===r?r=w.rounding:F(r,0,8)):(t=w.precision,r=w.rounding),n.isFinite()){for(m?(u=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):u=e,(f=(l=R(n)).indexOf(\".\"))>=0&&(l=l.replace(\".\",\"\"),(g=new w(1)).e=l.length-f,g.d=D(R(g),10,u),g.e=g.d.length),c=a=(p=D(l,10,u)).length;0==p[--a];)p.pop();if(p[0]){if(f<0?c--:((n=new w(n)).d=p,n.e=c,p=(n=Z(n,g,t,r,0,u)).d,c=n.e,d=i),f=p[t],h=u/2,d=d||void 0!==p[t+1],d=r<4?(void 0!==f||d)&&(0===r||r===(n.s<0?3:2)):f>h||f===h&&(4===r||d||6===r&&1&p[t-1]||r===(n.s<0?8:7)),p.length=t,d)for(;++p[--t]>u-1;)p[t]=0,t||(++c,p.unshift(1));for(a=p.length;!p[a-1];--a);for(f=0,l=\"\";f<a;f++)l+=o.charAt(p[f]);if(m){if(a>1)if(16==e||8==e){for(f=16==e?4:3,--a;a%f;a++)l+=\"0\";for(a=(p=D(l,u,e)).length;!p[a-1];--a);for(f=1,l=\"1.\";f<a;f++)l+=o.charAt(p[f])}else l=l.charAt(0)+\".\"+l.slice(1);l=l+(c<0?\"p\":\"p+\")+c}else if(c<0){for(;++c;)l=\"0\"+l;l=\"0.\"+l}else if(++c>a)for(c-=a;c--;)l+=\"0\";else c<a&&(l=l.slice(0,c)+\".\"+l.slice(c))}else l=m?\"0p+0\":\"0\";l=(16==e?\"0x\":2==e?\"0b\":8==e?\"0o\":\"\")+l}else l=V(n);return n.s<0?\"-\"+l:l}function G(n,e){if(n.length>e)return n.length=e,!0}function K(n){return new this(n).abs()}function Q(n){return new this(n).acos()}function X(n){return new this(n).acosh()}function Y(n,e){return new this(n).plus(e)}function nn(n){return new this(n).asin()}function en(n){return new this(n).asinh()}function tn(n){return new this(n).atan()}function rn(n){return new this(n).atanh()}function sn(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?_(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=_(this,s,1).times(.5)).s=n.s:e.s<0?(this.precision=s,this.rounding=1,i=this.atan(Z(n,e,s,1)),e=_(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(Z(n,e,s,1)):(i=_(this,s,1).times(e.s>0?.25:.75)).s=n.s:i=new this(NaN),i}function on(n){return new this(n).cbrt()}function un(n){return P(n=new this(n),n.e+1,2)}function cn(n){if(!n||\"object\"!=typeof n)throw Error(a+\"Object expected\");var e,i,t,o=!0===n.defaults,u=[\"precision\",1,s,\"rounding\",0,8,\"toExpNeg\",-r,0,\"toExpPos\",0,r,\"maxE\",0,r,\"minE\",-r,0,\"modulo\",0,9];for(e=0;e<u.length;e+=3)if(i=u[e],o&&(this[i]=f[i]),void 0!==(t=n[i])){if(!(g(t)===t&&t>=u[e+1]&&t<=u[e+2]))throw Error(d+i+\": \"+t);this[i]=t}if(i=\"crypto\",o&&(this[i]=f[i]),void 0!==(t=n[i])){if(!0!==t&&!1!==t&&0!==t&&1!==t)throw Error(d+i+\": \"+t);if(t){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(p);this[i]=!0}else this[i]=!1}return this}function fn(n){return new this(n).cos()}function hn(n){return new this(n).cosh()}function an(n,e){return new this(n).div(e)}function dn(n){return new this(n).exp()}function ln(n){return P(n=new this(n),n.e+1,3)}function pn(){var n,e,i=new this(0);for(h=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return h=!0,new this(1/0);i=e}return h=!0,i.sqrt()}function gn(n){return n instanceof e||n&&\"[object Decimal]\"===n.name||!1}function wn(n){return new this(n).ln()}function mn(n,e){return new this(n).log(e)}function vn(n){return new this(n).log(2)}function Nn(n){return new this(n).log(10)}function bn(){return C(this,arguments,\"lt\")}function En(){return C(this,arguments,\"gt\")}function xn(n,e){return new this(n).mod(e)}function Mn(n,e){return new this(n).mul(e)}function yn(n,e){return new this(n).pow(e)}function qn(n){var e,i,t,r,o=0,u=new this(1),c=[];if(void 0===n?n=this.precision:F(n,1,s),t=Math.ceil(n/x),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));o<t;)(r=e[o])>=429e7?e[o]=crypto.getRandomValues(new Uint32Array(1))[0]:c[o++]=r%1e7;else{if(!crypto.randomBytes)throw Error(p);for(e=crypto.randomBytes(t*=4);o<t;)(r=e[o]+(e[o+1]<<8)+(e[o+2]<<16)+((127&e[o+3])<<24))>=214e7?crypto.randomBytes(4).copy(e,o):(c.push(r%1e7),o+=4);o=t/4}else for(;o<t;)c[o++]=1e7*Math.random()|0;for(t=c[--o],n%=x,t&&n&&(r=w(10,x-n),c[o]=(t/r|0)*r);0===c[o];o--)c.pop();if(o<0)i=0,c=[0];else{for(i=-1;0===c[0];i-=x)c.shift();for(t=1,r=c[0];r>=10;r/=10)t++;t<x&&(i-=x-t)}return u.e=i,u.d=c,u}function On(n){return P(n=new this(n),n.e+1,this.rounding)}function Fn(n){return(n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function An(n){return new this(n).sin()}function Dn(n){return new this(n).sinh()}function Zn(n){return new this(n).sqrt()}function Pn(n,e){return new this(n).sub(e)}function Rn(n){return new this(n).tan()}function Ln(n){return new this(n).tanh()}function Un(n){return P(n=new this(n),n.e+1,1)}return(e=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,n instanceof s)return r.s=n.s,void(h?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d?n.d.slice():n.d));if(\"number\"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;i>=10;i/=10)e++;return void(h?e>s.maxE?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):j(r,n.toString())}if(\"string\"!==t)throw Error(d+n);return 45===n.charCodeAt(0)?(n=n.slice(1),r.s=-1):r.s=1,b.test(n)?j(r,n):$(r,n)}if(s.prototype=q,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=cn,s.clone=n,s.isDecimal=gn,s.abs=K,s.acos=Q,s.acosh=X,s.add=Y,s.asin=nn,s.asinh=en,s.atan=tn,s.atanh=rn,s.atan2=sn,s.cbrt=on,s.ceil=un,s.cos=fn,s.cosh=hn,s.div=an,s.exp=dn,s.floor=ln,s.hypot=pn,s.ln=wn,s.log=mn,s.log10=Nn,s.log2=vn,s.max=bn,s.min=En,s.mod=xn,s.mul=Mn,s.pow=yn,s.random=qn,s.round=On,s.sign=Fn,s.sin=An,s.sinh=Dn,s.sqrt=Zn,s.sub=Pn,s.tan=Rn,s.tanh=Ln,s.trunc=Un,void 0===e&&(e={}),e&&!0!==e.defaults)for(r=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(f)).default=e.Decimal=e,u=new e(u),c=new e(c),e}()\n//    bigDec: require('decimal.js')\n});\n\nif ((typeof module) !== 'undefined') {\n    module.exports = nerdamer;\n};","/*\r\n* Author : Martin Donk\r\n* Website : http://www.nerdamer.com\r\n* Email : martin.r.donk@gmail.com\r\n* License : MIT\r\n* Source : https://github.com/jiggzson/nerdamer\r\n*/\r\n\r\n/* global module */\r\n\r\nif((typeof module) !== 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Calculus.js');\r\n}\r\n\r\n(function() {\r\n    \"use strict\";\r\n    \r\n    /*shortcuts*/\r\n    var core = nerdamer.getCore(),\r\n        _ = core.PARSER,\r\n        N = core.groups.N,\r\n        P = core.groups.P,\r\n        S = core.groups.S,\r\n        EX = core.groups.EX,\r\n        FN = core.groups.FN,\r\n        PL = core.groups.PL,\r\n        CP = core.groups.CP,\r\n        CB = core.groups.CB,\r\n        keys = core.Utils.keys,\r\n        variables = core.Utils.variables,\r\n        format = core.Utils.format,\r\n        round = core.Utils.round,\r\n        Frac = core.Frac,\r\n        isInt = core.Utils.isInt,\r\n        Symbol = core.Symbol,\r\n        CONST_HASH = core.Settings.CONST_HASH,\r\n        math = core.Utils.importFunctions(),\r\n        evaluate = core.Utils.evaluate;\r\n    //*************** CLASSES ***************//\r\n    /**\r\n    * Converts a symbol into an equivalent polynomial arrays of \r\n    * the form [[coefficient_1, power_1],[coefficient_2, power_2], ... ]\r\n    * Univariate polymials only. \r\n    * @param {Symbol|Number} symbol\r\n    * @param {String} variable The variable name of the polynomial\r\n    * @param {int} order\r\n    */\r\n    function Polynomial(symbol, variable, order) { \r\n        if(core.Utils.isSymbol(symbol)) {\r\n            this.parse(symbol);\r\n            this.variable = this.variable || variable;\r\n        }\r\n        else if(!isNaN(symbol)) { \r\n            order = order || 0;\r\n            if(variable === undefined) \r\n                throw new core.exceptions.InvalidVariableNameError('Polynomial expects a variable name when creating using order');\r\n            this.coeffs = [];\r\n            this.coeffs[order] = symbol;\r\n            this.fill(symbol);\r\n        }\r\n        else if(typeof symbol === 'string') {\r\n            this.parse(_.parse(symbol));\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Polynomial given an array of coefficients\r\n     * @param {int[]} arr\r\n     * @param {String} variable\r\n     * @returns {Polynomial}\r\n     */\r\n    Polynomial.fromArray = function(arr, variable) {\r\n        if(typeof variable === 'undefined') \r\n            throw new core.exceptions.InvalidVariableNameError('A variable name must be specified when creating polynomial from array');\r\n        var p = new Polynomial();\r\n        p.coeffs = arr;\r\n        p.variable = variable;\r\n        return p;\r\n    };\r\n    \r\n    Polynomial.fit = function(c1, c2, n, base, p, variable) {\r\n        //after having looped through and mod 10 the number to get the matching factor\r\n        var terms = new Array(p+1),\r\n            t = n-c2;\r\n        terms[0] = c2; //the constants is assumed to be correct\r\n        //constant for x^p is also assumed know so add\r\n        terms[p] = c1;\r\n        t -= c1*Math.pow(base, p);\r\n        //start fitting\r\n        for(var i=p-1; i>0; i--) {\r\n            var b = Math.pow(base, i), //we want as many wholes as possible\r\n                q = t/b,\r\n                sign = Math.sign(q); \r\n            var c = sign*Math.floor(Math.abs(q));\r\n            t -= c*b;\r\n            terms[i] = c;\r\n        }\r\n        if(t !== 0) return null;\r\n        for(var i=0; i<terms.length; i++)\r\n            terms[i] = new Frac(terms[i]);\r\n        \r\n        return Polynomial.fromArray(terms, variable);\r\n    };\r\n\r\n    Polynomial.prototype = { \r\n        /**\r\n         * Converts Symbol to Polynomial\r\n         * @param {Symbol} symbol\r\n         * @param {Array} c - a collector array\r\n         * @returns {Polynomial}\r\n         */\r\n        parse: function(symbol, c) { \r\n            this.variable = variables(symbol)[0]; \r\n            if(!symbol.isPoly()) throw core.exceptions.NerdamerTypeError('Polynomial Expected! Received '+core.Utils.text(symbol));\r\n            c = c || [];\r\n            if(!symbol.power.absEquals(1)) symbol = _.expand(symbol);\r\n\r\n            if(symbol.group === core.groups.N) {\r\n                c[0] = symbol.multiplier; \r\n            }\r\n            else if(symbol.group === core.groups.S) { \r\n                c[symbol.power.toDecimal()] = symbol.multiplier; \r\n            }\r\n            else { \r\n                for(var x in symbol.symbols) { \r\n                    var sub = symbol.symbols[x],\r\n                        p = sub.power; \r\n                    if(core.Utils.isSymbol(p)) throw new core.exceptions.NerdamerTypeError('power cannot be a Symbol');\r\n\r\n                    p = sub.group === N ? 0 : p.toDecimal();\r\n                    if(sub.symbols){ \r\n                        this.parse(sub, c);  \r\n                    }\r\n                    else { \r\n                        c[p] = sub.multiplier; \r\n                    }\r\n                }\r\n            }\r\n\r\n            this.coeffs = c;\r\n\r\n            this.fill();\r\n        },\r\n        /**\r\n        * Fills in the holes in a polynomial with zeroes\r\n        * @param {Number} x - The number to fill the holes with\r\n        */\r\n        fill: function(x) {\r\n            x = Number(x) || 0;\r\n            var l = this.coeffs.length;\r\n            for(var i=0; i<l; i++) {\r\n                if(this.coeffs[i] === undefined) { this.coeffs[i] = new Frac(x); }\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n        * Removes higher order zeros or a specific coefficient\r\n        * @returns {Array}\r\n        */\r\n        trim: function() { \r\n            var l = this.coeffs.length;\r\n            while(l--) {\r\n                var c = this.coeffs[l];\r\n                var equalsZero = c.equals(0);\r\n                if(c && equalsZero) {\r\n                    if(l === 0) break;\r\n                    this.coeffs.pop();\r\n                }\r\n                else break;\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /*\r\n         * Returns polynomial mod p **currently fails**\r\n         * @param {Number} p\r\n         * @returns {Polynomial}\r\n         */\r\n        modP: function(p) {\r\n            var l = this.coeffs.length;\r\n            for(var i=0; i<l; i++) {\r\n                var c = this.coeffs[i];\r\n                if(c < 0) { //go borrow\r\n                    var b; //a coefficient > 0\r\n                    for(var j=i; j<l; j++) {//starting from where we left off\r\n                        if(this.coeffs[j] > 0) {\r\n                            b = this.coeffs[j];\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(b) { //if such a coefficient exists\r\n                        for(j; j>i; j--) { //go down the line and adjust using p\r\n                            this.coeffs[j] = this.coeffs[j].subtract(new Frac(1));\r\n                            this.coeffs[j-1] = this.coeffs[j-1].add(new Frac(p));\r\n                        }\r\n                        c = this.coeffs[i]; //reset c\r\n                    }\r\n                }\r\n\r\n                var d = c.mod(p);\r\n                var w = c.subtract(d).divide(p);\r\n                if(!w.equals(0)) {\r\n                    var up_one = i+1;\r\n                    var next = this.coeffs[up_one] || new Frac(0);\r\n                    next = next.add(w);\r\n                    this.coeffs[up_one] = new Frac(next);\r\n                    this.coeffs[i] = new Frac(d);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n        * Adds together 2 polynomials\r\n        * @param {Polynomial} poly\r\n        */\r\n        add: function(poly) {\r\n            var l = Math.max(this.coeffs.length, poly.coeffs.length);\r\n            for(var i=0; i<l; i++) {\r\n                var a = (this.coeffs[i] || new Frac(0)),\r\n                    b = (poly.coeffs[i] || new Frac(0));\r\n                this.coeffs[i] = a.add(b);\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n        * Adds together 2 polynomials\r\n        * @param {Polynomial} poly\r\n        */\r\n        subtract: function(poly) {\r\n            var l = Math.max(this.coeffs.length, poly.coeffs.length);\r\n            for(var i=0; i<l; i++) {\r\n                var a = (this.coeffs[i] || new Frac(0)),\r\n                    b = (poly.coeffs[i] || new Frac(0));\r\n                this.coeffs[i] = a.subtract(b);\r\n            }\r\n            return this;\r\n        },\r\n        divide: function(poly) {\r\n            var variable = this.variable,\r\n                dividend = core.Utils.arrayClone(this.coeffs),\r\n                divisor = core.Utils.arrayClone(poly.coeffs),\r\n                n = dividend.length,\r\n                mp = divisor.length-1,\r\n                quotient = [];\r\n\r\n            //loop through the dividend\r\n            for(var i=0; i<n; i++) {\r\n                var p = n-(i+1);\r\n                //get the difference of the powers\r\n                var d = p - mp;\r\n                //get the quotient of the coefficients\r\n                var q = dividend[p].divide(divisor[mp]);\r\n\r\n                if(d < 0) break;//the divisor is not greater than the dividend\r\n                //place it in the quotient\r\n                quotient[d] = q;\r\n\r\n                for(var j=0; j<=mp; j++) {\r\n                    //reduce the dividend\r\n                    dividend[j+d] = dividend[j+d].subtract((divisor[j].multiply(q)));\r\n                }\r\n            }\r\n\r\n            //clean up\r\n            var p1 = Polynomial.fromArray(dividend, variable || 'x').trim(), //pass in x for safety\r\n                p2 = Polynomial.fromArray(quotient, variable || 'x');\r\n            return [p2, p1];\r\n        },\r\n        multiply: function(poly) {\r\n            var l1 = this.coeffs.length, l2 = poly.coeffs.length, \r\n                c = []; //array to be returned\r\n            for(var i=0; i<l1; i++) {\r\n                var x1 = this.coeffs[i];\r\n                for(var j=0; j<l2; j++) {\r\n                    var k = i+j, //add the powers together\r\n                        x2 = poly.coeffs[j],\r\n                        e = c[k] || new Frac(0); //get the existing term from the new array\r\n                    c[k] = e.add(x1.multiply(x2)); //multiply the coefficients and add to new polynomial array\r\n                }\r\n            }\r\n            this.coeffs = c;\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks if a polynomial is zero\r\n         * @returns {Boolean}\r\n         */\r\n        isZero: function() {\r\n            var l = this.coeffs.length;\r\n            for(var i=0; i<l; i++) {\r\n                var e = this.coeffs[i];\r\n                if(!e.equals(0)) return false;\r\n            }\r\n            return true;\r\n        },\r\n        /** \r\n         * Substitutes in a number n into the polynomial p(n)\r\n         * @param {Number} n\r\n         * @returns {Frac}\r\n         */\r\n        sub: function(n) {\r\n            var sum = new Frac(0), l=this.coeffs.length;\r\n            for(var i=0; i<l; i++) {\r\n                var t = this.coeffs[i];\r\n                if(!t.equals(0)) sum = sum.add(t.multiply(new Frac(Math.pow(n, i))));\r\n            }\r\n            return sum;\r\n        },\r\n        /**\r\n         * Returns a clone of the polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        clone: function() {\r\n            var p = new Polynomial();\r\n            p.coeffs = this.coeffs;\r\n            p.variable = this.variable;\r\n            return p;\r\n        },\r\n        /**\r\n         * Gets the degree of the polynomial\r\n         * @returns {Number}\r\n         */\r\n        deg: function() {\r\n            this.trim();\r\n            return this.coeffs.length-1;\r\n        },\r\n        /**\r\n         * Returns a lead coefficient\r\n         * @returns {Frac}\r\n         */\r\n        lc: function() { \r\n            return this.coeffs[this.deg()].clone();\r\n        },\r\n        /**\r\n         * Converts polynomial into a monic polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        monic: function() {\r\n            var lc = this.lc(), l = this.coeffs.length; \r\n            for(var i=0; i<l; i++) this.coeffs[i] = this.coeffs[i].divide(lc);\r\n            return this;\r\n        },\r\n        /**\r\n         * Returns the GCD of two polynomials\r\n         * @param {Polynomial} poly\r\n         * @returns {Polynomial}\r\n         */\r\n        gcd: function(poly) { \r\n            //get the maximum power of each\r\n            var mp1 = this.coeffs.length-1, \r\n                mp2 = poly.coeffs.length-1,\r\n                T;\r\n            //swap so we always have the greater power first\r\n            if(mp1 < mp2) {\r\n                return poly.gcd(this);\r\n            }\r\n            var a = this;\r\n\r\n            while(!poly.isZero()) {   \r\n                var t = poly.clone(); \r\n                a = a.clone(); \r\n                T = a.divide(t);\r\n                poly = T[1]; \r\n                a = t; \r\n            }\r\n\r\n            var gcd = core.Math2.QGCD.apply(null, a.coeffs);\r\n            if(!gcd.equals(1)) { \r\n                var l = a.coeffs.length;\r\n                for(var i=0; i<l; i++) {\r\n                    a.coeffs[i] = a.coeffs[i].divide(gcd);\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        /**\r\n         * Differentiates the polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        diff: function() {\r\n            var new_array = [], l = this.coeffs.length;\r\n            for(var i=1; i<l; i++) new_array.push(this.coeffs[i].multiply(new Frac(i)));\r\n            this.coeffs = new_array;\r\n            return this;\r\n        },\r\n        /**\r\n         * Integrates the polynomial\r\n         * @returns {Polynomial} \r\n         */\r\n        integrate: function() {\r\n            var new_array = [0], l = this.coeffs.length;\r\n            for(var i=0; i<l; i++) {\r\n                var c = new Frac(i+1);\r\n                new_array[c] = this.coeffs[i].divide(c);\r\n            }\r\n            this.coeffs = new_array;\r\n            return this;\r\n        },\r\n        /**\r\n         * Returns the Greatest common factor of the polynomial\r\n         * @param {bool} toPolynomial - true if a polynomial is wanted\r\n         * @returns {Frac|Polynomial}\r\n         */\r\n        gcf: function(toPolynomial) {\r\n            //get the first nozero coefficient and returns its power\r\n            var fnz = function(a) {\r\n                    for(var i=0; i<a.length; i++)\r\n                        if(!a[i].equals(0)) return i;\r\n                },\r\n                ca = [];\r\n            for(var i=0; i<this.coeffs.length; i++) {\r\n                var c = this.coeffs[i];\r\n                if(!c.equals(0) && ca.indexOf(c) === -1) ca.push(c);\r\n            }\r\n            var p = [core.Math2.QGCD.apply(undefined, ca), fnz(this.coeffs)].toDecimal(); \r\n\r\n            if(toPolynomial) {\r\n                var parr = [];\r\n                parr[p[1]-1] = p[0];\r\n                p = Polynomial.fromArray(parr, this.variable).fill();\r\n            }\r\n\r\n            return p;\r\n        },\r\n        /**\r\n         * Raises a polynomial P to a power p -> P^p. e.g. (x+1)^2\r\n         * @param {bool} incl_img - Include imaginary numbers \r\n         */\r\n        quad: function(incl_img) {\r\n            var roots = [];\r\n            if(this.coeffs.length > 3) throw new Error('Cannot calculate quadratic order of '+(this.coeffs.length-1));\r\n            if(this.coeffs.length === 0) throw new Error('Polynomial array has no terms');\r\n            var a = this.coeffs[2] || 0, b = this.coeffs[1] || 0, c = this.coeffs[0];\r\n            var dsc = b*b-4*a*c;\r\n            if(dsc < 0 && !incl_img) return roots;\r\n            else {\r\n                roots[0] = (-b+Math.sqrt(dsc))/(2*a);\r\n                roots[1] = (-b-Math.sqrt(dsc))/(2*a);\r\n            }\r\n            return roots;\r\n        },\r\n        /**\r\n         * Makes polynomial square free\r\n         * @returns {Array}\r\n         */\r\n        squareFree: function() { \r\n            var a = this.clone(),\r\n                i = 1,\r\n                b = a.clone().diff(),\r\n                c = a.clone().gcd(b),\r\n                w = a.divide(c)[0];\r\n            var output = Polynomial.fromArray([new Frac(1)], a.variable);\r\n            while(!c.equalsNumber(1)) { \r\n                var y = w.gcd(c); \r\n                var z = w.divide(y)[0];\r\n                //one of the factors may have shown up since it's square but smaller than the \r\n                //one where finding\r\n                if(!z.equalsNumber(1) && i>1) {\r\n                    var t = z.clone();\r\n                    for(var j=1; j<i; j++)\r\n                        t.multiply(z.clone());\r\n                    z = t;\r\n                }\r\n                output = output.multiply(z); \r\n                i++;\r\n                w = y;\r\n                c = c.divide(y)[0];\r\n            }\r\n            return [output, w, i];\r\n        },\r\n        /**\r\n         * Converts polynomial to Symbol\r\n         * @returns {Symbol}\r\n         */\r\n        toSymbol: function() {\r\n            var l = this.coeffs.length,\r\n                variable = this.variable;\r\n            if(l === 0) return new core.Symbol(0);\r\n            var end = l -1, str = '';\r\n\r\n            for(var i=0; i<l; i++) {\r\n                //place the plus sign for all but the last one\r\n                var plus = i === end ? '' : '+',\r\n                    e = this.coeffs[i];\r\n                if(!e.equals(0)) str += (e+'*'+variable+'^'+i+plus);\r\n            }\r\n            return _.parse(str);\r\n        },\r\n        /**\r\n         * Checks if polynomial is equal to a number\r\n         * @param {Number} x\r\n         * @returns {Boolean}\r\n         */\r\n        equalsNumber: function(x) { \r\n            this.trim();\r\n            return this.coeffs.length === 1 && this.coeffs[0].toDecimal() === String(x);\r\n        },\r\n        toString: function() {\r\n            return this.toSymbol().toString();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * TODO\r\n     * ===================================================================================\r\n     * THIS METHOD HAS A NASTY HIDDEN BUG. IT HAS INCONSISTENT RETURN TYPES PRIMARILY DUE TO \r\n     * WRONG ASSUMPTIONS AT THE BEGINNING. THE ASSUMPTION WAS THAT COEFFS WERE ALWAYS GOING BE NUMBERS\r\n     * NOT TAKING INTO ACCOUNT THAT IMAGINARY NUMBERS. FIXING THIS BREAKS WAY TOO MANY TESTS \r\n     * AT THEM MOMENT WHICH I DON'T HAVE TO FIX\r\n     * ===================================================================================\r\n    * If the symbols is of group PL or CP it will return the multipliers of each symbol\r\n    * as these are polynomial coefficients. CB symbols are glued together by multiplication\r\n    * so the symbol multiplier carries the coefficients for all contained symbols.\r\n    * For S it just returns it's own multiplier. This function doesn't care if it's a polynomial or not\r\n    * @param {Array} c The coefficient array\r\n    * @param {boolean} with_order \r\n    * @return {Array}\r\n    */\r\n    Symbol.prototype.coeffs = function(c, with_order) {\r\n        if(with_order && !this.isPoly(true)) _.error('Polynomial expected when requesting coefficients with order');\r\n        c = c || [];\r\n        var s = this.clone().distributeMultiplier(); \r\n        if(s.isComposite()) {\r\n            for(var x in s.symbols) { \r\n                var sub = s.symbols[x];\r\n                if(sub.isComposite()) { \r\n                    sub.clone().distributeMultiplier().coeffs(c, with_order);\r\n                }\r\n                else { \r\n                    if(with_order) c[sub.isConstant() ? 0 : sub.power.toDecimal()] = sub.multiplier;\r\n                    else {\r\n                        c.push(sub.multiplier);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else { \r\n            if(with_order) c[s.isConstant(true) ? 0 : s.power.toDecimal()] = s.multiplier;\r\n            else {\r\n                if(s.group === CB && s.isImaginary()) {\r\n                    var m = new Symbol(s.multiplier);\r\n                    s.each(function(x) {\r\n                       //add the imaginary part\r\n                       if(x.isConstant(true) || x.imaginary)\r\n                           m = _.multiply(m, x);\r\n                    });\r\n                    c.push(m);\r\n                }\r\n                else\r\n                    c.push(s.multiplier);\r\n            }\r\n        }\r\n        //fill the holes\r\n        if(with_order) {\r\n            for(var i=0; i<c.length; i++)\r\n                if(c[i] === undefined) c[i] = new Symbol(0);\r\n        }\r\n        return c;\r\n    };\r\n    Symbol.prototype.tBase = function(map) {\r\n        if(typeof map === 'undefined') throw new Error('Symbol.tBase requires a map object!');\r\n        var terms= [];\r\n        var symbols = this.collectSymbols(null, null, null, true),\r\n            l = symbols.length;\r\n        for(var i=0; i<l; i++) {\r\n            var symbol = symbols[i],\r\n                g = symbol.group,\r\n                nterm = new MVTerm(symbol.multiplier, [], map);\r\n            if(g === CB) {\r\n                for(var x in symbol.symbols) {\r\n                    var sym = symbol.symbols[x];\r\n                    nterm.terms[map[x]] = sym.power;\r\n                }\r\n            }\r\n            else {\r\n                nterm.terms[map[symbol.value]] = symbol.power;\r\n            }\r\n            \r\n            terms.push(nterm.fill());\r\n            nterm.updateCount();\r\n        }\r\n        return terms;\r\n    };\r\n    Symbol.prototype.altVar = function(x) {\r\n        var m = this.multiplier.toString(), p = this.power.toString();\r\n        return (m === '1' ? '' : m+'*')+ x + (p === '1' ? '' : '^'+p);\r\n    };\r\n    /**\r\n     * Checks to see if the symbols contain the same variables\r\n     * @param {Symbol} symbol\r\n     * @returns {Boolean}\r\n     */\r\n    Symbol.prototype.sameVars = function(symbol) {\r\n        if(!(this.symbols || this.group === symbol.group)) return false;\r\n        for(var x in this.symbols) {\r\n            var a = this.symbols[x], b = symbol.symbols[x];\r\n            if(!b) return false;\r\n            if(a.value !== b.value) return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Groups the terms in a symbol with respect to a variable\r\n     * For instance the symbol {a*b^2*x^2+a*b*x^2+x+6} returns [6,1,a*b+a*b^2]\r\n     * @returns {Factors}\r\n     */\r\n    Symbol.prototype.groupTerms = function(x) {\r\n        x = String(x);\r\n        var f, p, egrouped;\r\n        var grouped = [];\r\n        this.each(function(e) {\r\n            if(e.group === PL) {\r\n                egrouped = e.groupTerms(x);\r\n                for(var i=0; i<egrouped.length; i++) {\r\n                    var el = egrouped[i];\r\n                    if(el)\r\n                        grouped[i] = el;\r\n                }\r\n            }\r\n            else {\r\n                f = core.Utils.decompose_fn(e, x, true);\r\n                p = f.x.value === x ? Number(f.x.power) : 0;\r\n                //check if there's an existing value\r\n                grouped[p] = _.add(grouped[p] || new Symbol(0), f.a);\r\n            }   \r\n        });\r\n        return grouped;\r\n    };\r\n    /**\r\n     * Use this to collect Factors\r\n     * @returns {Symbol[]}\r\n     */\r\n    Symbol.prototype.collectFactors = function() {\r\n        var factors = [];\r\n        if(this.group === CB)\r\n            this.each(function(x) {\r\n               factors.push(x.clone());\r\n            });\r\n        else\r\n            factors.push(this.clone());\r\n        return factors;\r\n    };\r\n    /**\r\n     * A container class for factors\r\n     * @returns {Factors}\r\n     */\r\n    function Factors() {\r\n        this.factors = {};\r\n        this.length = 0;\r\n    };\r\n    Factors.prototype.getNumberSymbolics = function() {\r\n        var n = 0;\r\n        this.each(function(x) {\r\n            if(!x.isConstant(true))\r\n                n++;\r\n        });\r\n        return n;\r\n    };\r\n    /**\r\n     * Adds the factors to the factor object\r\n     * @param {Symbo} s\r\n     * @returns {Factors}\r\n     */\r\n    Factors.prototype.add = function(s) {\r\n        if(s.equals(0)) \r\n            return this; //nothing to add\r\n        \r\n        //we don't want to carry -1 as a factor. If a factor already exists,\r\n        //then add the minus one to that factor and return.\r\n        if(s.equals(-1) && this.length > 0) { \r\n            var fo = core.Utils.firstObject(this.factors, null, true);\r\n            this.add(_.symfunction(core.Settings.PARENTHESIS, [fo.obj]).negate());\r\n            delete this.factors[fo.key];\r\n            this.length--;\r\n            return this;\r\n        }\r\n        \r\n        if(s.group === CB) { \r\n            var factors = this;\r\n            if(!s.multiplier.equals(1)) \r\n                factors.add(new Symbol(s.multiplier));\r\n            s.each(function(x){\r\n                factors.add(x);\r\n            });\r\n        }\r\n        else {\r\n            if(this.preAdd) //if a preAdd function was defined call it to do prep\r\n                s = this.preAdd(s);\r\n            if(this.pFactor) //if the symbol isn't linear add back the power\r\n                s = _.pow(s, new Symbol(this.pFactor));\r\n\r\n            var is_constant = s.isConstant();\r\n            if(is_constant && s.equals(1)) return this; //don't add 1\r\n            var v = is_constant ? s.value: s.text();\r\n            if(v in this.factors) {\r\n                this.factors[v] = _.multiply(this.factors[v], s);\r\n                //did the addition cancel out the existing factor? If so remove it and decrement the length\r\n                if(this.factors[v].equals(1)) {\r\n                    delete this.factors[v];\r\n                    this.length--;\r\n                }\r\n            }\r\n            else {\r\n                this.factors[v] = s;\r\n                this.length++;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Converts the factor object to a Symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Factors.prototype.toSymbol = function() {\r\n        var factored = new Symbol(1);\r\n        var factors = Object.values(this.factors).sort(function(a, b) {\r\n            return a.group > b.group;\r\n        });\r\n        \r\n        for(var i=0, l=factors.length; i<l; i++) {\r\n            var f = factors[i];\r\n\r\n            //don't wrap group S or FN\r\n            var factor = f.power.equals(1) && f.fname !== '' /* don't wrap it twice */? \r\n                _.symfunction(core.PARENTHESIS, [f]) : f;\r\n\r\n            factored = _.multiply(factored, factor);\r\n        }\r\n        if(factored.fname === '')\r\n            factored = Symbol.unwrapPARENS(factored);\r\n        return factored;\r\n    };\r\n    /**\r\n     * Merges 2 factor objects into one\r\n     * @param {Factor} o\r\n     * @returns {Factors}\r\n     */\r\n    Factors.prototype.merge = function(o) {\r\n        for(var x in o) {\r\n            if(x in this.factors) \r\n                this.factors[x] = _.multiply(this.factors[x], o[x]);\r\n            else this.factors[x] = o[x];\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * The iterator for the factor object\r\n     * @param {Function} f - callback\r\n     * @returns {Factor}\r\n     */\r\n    Factors.prototype.each = function(f) {\r\n        for(var x in this.factors) {\r\n            var factor = this.factors[x];\r\n            if(factor.fname === core.PARENTHESIS && factor.isLinear())\r\n                factor = factor.args[0];\r\n            f.call(this, factor, x);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Return the number of factors contained in the factor object\r\n     * @returns {int}\r\n     */\r\n    Factors.prototype.count = function() {\r\n        return keys(this.factors).length;\r\n    };\r\n    /**\r\n     * Cleans up factors from -1\r\n     * @returns {undefined}\r\n     */\r\n    Factors.prototype.clean = function() {\r\n        try {\r\n            var h = core.Settings.CONST_HASH;\r\n            if(this.factors[h].lessThan(0)) {\r\n                if(this.factors[h].equals(-1))\r\n                    delete this.factors[h];\r\n                else\r\n                    this.factors[h].negate();\r\n                this.each(function(x) {\r\n                    x.negate();\r\n                });\r\n            }\r\n        }\r\n        catch(e){};\r\n    };\r\n    Factors.prototype.toString = function() {\r\n        return this.toSymbol().toString();\r\n    };\r\n    \r\n    //a wrapper for performing multivariate division\r\n    function MVTerm(coeff, terms, map) {\r\n        this.terms = terms || [];\r\n        this.coeff = coeff;\r\n        this.map = map; //careful! all maps are the same object\r\n        this.sum = new core.Frac(0);\r\n        this.image = undefined;\r\n    };\r\n    MVTerm.prototype.updateCount = function() {\r\n        this.count = this.count || 0;\r\n        for(var i=0; i<this.terms.length; i++) {\r\n            if(!this.terms[i].equals(0)) this.count++;\r\n        }\r\n        return this;\r\n    };\r\n    MVTerm.prototype.getVars = function() {\r\n        var vars = [];\r\n        for(var i=0; i<this.terms.length; i++) {\r\n            var term = this.terms[i],\r\n                rev_map = this.getRevMap();\r\n            if(!term.equals(0)) vars.push(this.rev_map[i]);\r\n        }\r\n        return vars.join(' ');\r\n    };\r\n    MVTerm.prototype.len = function() {\r\n        if(typeof this.count === 'undefined') {\r\n            this.updateCount();\r\n        }\r\n        return this.count;\r\n    };\r\n    MVTerm.prototype.toSymbol = function(rev_map) {\r\n        rev_map = rev_map || this.getRevMap();\r\n        var symbol = new Symbol(this.coeff); \r\n        for(var i=0; i<this.terms.length; i++) {\r\n            var v = rev_map[i],\r\n                t = this.terms[i];\r\n            if(t.equals(0) || v === CONST_HASH) continue;\r\n            var mapped = new Symbol(v);\r\n            mapped.power = t;\r\n            symbol = _.multiply(symbol, mapped);\r\n        }\r\n        return symbol;\r\n    };\r\n    MVTerm.prototype.getRevMap = function() {\r\n        if(this.rev_map) return this.rev_map;\r\n        var o = {};\r\n        for(var x in this.map) o[this.map[x]] = x;\r\n        this.rev_map = o;\r\n        return o;\r\n    };\r\n    MVTerm.prototype.generateImage = function() {\r\n        this.image = this.terms.join(' ');\r\n        return this;\r\n    },\r\n    MVTerm.prototype.getImg = function() {\r\n        if(!this.image) this.generateImage();\r\n        return this.image;\r\n    },\r\n    MVTerm.prototype.fill = function() {\r\n        var l = this.map.length;\r\n        for(var i=0; i<l; i++) {\r\n            if(typeof this.terms[i] === 'undefined') this.terms[i] = new core.Frac(0);\r\n            else {\r\n                this.sum = this.sum.add(this.terms[i]);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    MVTerm.prototype.divide = function(mvterm) {\r\n        var c = this.coeff.divide(mvterm.coeff),\r\n            l = this.terms.length,\r\n            new_mvterm = new MVTerm(c, [], this.map);\r\n        for(var i=0; i<l; i++) {\r\n            new_mvterm.terms[i] = this.terms[i].subtract(mvterm.terms[i]);\r\n            new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\r\n        }\r\n        return new_mvterm;\r\n    };\r\n    MVTerm.prototype.multiply = function(mvterm) {\r\n        var c = this.coeff.multiply(mvterm.coeff),\r\n            l = this.terms.length,\r\n            new_mvterm = new MVTerm(c, [], this.map);\r\n        for(var i=0; i<l; i++) {\r\n            new_mvterm.terms[i] = this.terms[i].add(mvterm.terms[i]);\r\n            new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\r\n        }\r\n        return new_mvterm;\r\n    };\r\n    MVTerm.prototype.isZero = function() {\r\n        return this.coeff.equals(0);\r\n    };\r\n    MVTerm.prototype.toString = function() {\r\n        return '{ coeff: '+this.coeff.toString()+', terms: ['+\r\n                this.terms.join(',')+']: sum: '+this.sum.toString()+', count: '+this.count+'}';\r\n    };\r\n    \r\n    core.Utils.toMapObj = function(arr) {\r\n        var c = 0, o = {};\r\n        for(var i=0; i<arr.length; i++) {\r\n            var v = arr[i];\r\n            if(typeof o[v] === 'undefined') {\r\n                o[v] = c; c++;\r\n            }\r\n        }\r\n        o.length = c;\r\n        return o;\r\n    };\r\n    core.Utils.filledArray = function(v, n, clss) {\r\n        var a = [];\r\n        while (n--) {\r\n          a[n] = clss ? new clss(v) : v;\r\n        }\r\n        return a;\r\n    };\r\n    core.Utils.arrSum = function(arr) {\r\n        var sum = 0, l = arr.length;\r\n        for(var i=0; i<l; i++) sum += arr[i];\r\n        return sum;\r\n    };    \r\n    /**\r\n     * Determines if 2 arrays have intersecting elements.\r\n     * @param {Array} a\r\n     * @param {Array} b\r\n     * @returns {Boolean} True if a and b have intersecting elements.\r\n     */\r\n    core.Utils.haveIntersection = function(a, b) {\r\n        var t;\r\n        if (b.length > a.length) t = b, b = a, a = t; // indexOf to loop over shorter\r\n        return a.some(function (e) {\r\n            return b.indexOf(e) > -1;\r\n        });\r\n    };\r\n    /**\r\n     * Substitutes out functions as variables so they can be used in regular algorithms\r\n     * @param {Symbol} symbol\r\n     * @param {Object} map\r\n     * @returns {String} The expression string\r\n     */\r\n    core.Utils.subFunctions = function(symbol, map) {\r\n        map = map || {};\r\n        var subbed = [];\r\n        symbol.each(function(x) {\r\n            if(x.group === FN || x.previousGroup === FN) {\r\n                //we need a new variable name so why not use one of the existing\r\n                var val = core.Utils.text(x, 'hash'), tvar = map[val];\r\n                if(!tvar) {\r\n                    //generate a unique enough name\r\n                    var t = x.fname+keys(map).length;\r\n                    map[val] = t;\r\n                    subbed.push(x.altVar(t));\r\n                }\r\n                else subbed.push(x.altVar(tvar));\r\n            }\r\n            else if(x.group === CB || x.group === PL || x.group === CP) {\r\n                subbed.push(core.Utils.subFunctions(x, map));\r\n            }\r\n            else subbed.push(x.text());\r\n        });\r\n        if(symbol.group === CP || symbol.group === PL) return symbol.altVar(core.Utils.inBrackets(subbed.join('+')));;\r\n        if(symbol.group === CB) return symbol.altVar(core.Utils.inBrackets(subbed.join('*')));\r\n        return symbol.text();\r\n    };\r\n    core.Utils.getFunctionsSubs = function(map) {\r\n        var subs = {};\r\n        //prepare substitutions\r\n        for(var x in map) subs[map[x]] = _.parse(x);\r\n        return subs;\r\n    };\r\n    var __ = core.Algebra = {\r\n        version: '1.4.5',\r\n        init: (function() {})(),\r\n        proots: function(symbol, decp) { \r\n            //the roots will be rounded up to 7 decimal places.\r\n            //if this causes trouble you can explicitly pass in a different number of places\r\n            //rarr for polynomial of power n is of format [n, coeff x^n, coeff x^(n-1), ..., coeff x^0]\r\n            decp = decp || 7;\r\n            var zeros = 0;\r\n            var known_roots = [];\r\n            var get_roots = function(rarr, powers, max) {\r\n                var roots = calcroots(rarr, powers, max).concat(known_roots);\r\n                for(var i=0;i<zeros;i++) roots.unshift(0);\r\n                return roots;\r\n            };\r\n            \r\n            if(symbol instanceof Symbol && symbol.isPoly()) { \r\n                symbol.distributeMultiplier();\r\n                //make it so the symbol has a constants as the lowest term\r\n                if(symbol.group === PL) {\r\n                    var lowest_pow = core.Utils.arrayMin(keys(symbol.symbols));\r\n                    var lowest_symbol = symbol.symbols[lowest_pow].clone().toUnitMultiplier();\r\n                    symbol = _.expand(_.divide(symbol, lowest_symbol));\r\n                    known_roots.push(0); //add zero since this is a known root\r\n                }\r\n                if(symbol.group === core.groups.S) { \r\n                    return [0];\r\n                }\r\n                else if(symbol.group === core.groups.PL) { \r\n                    var powers = keys(symbol.symbols),\r\n                        minpower = core.Utils.arrayMin(powers),\r\n                    symbol = core.PARSER.divide(symbol, core.PARSER.parse(symbol.value+'^'+minpower));\r\n                }\r\n\r\n                var variable = keys(symbol.symbols).sort().pop(), \r\n                    sym = symbol.group === core.groups.PL ? symbol.symbols : symbol.symbols[variable], \r\n                    g = sym.group,\r\n                    powers = g === S ? [sym.power.toDecimal()] : keys(sym.symbols),\r\n                    rarr = [],\r\n                    max = core.Utils.arrayMax(powers); //maximum power and degree of polynomial to be solved\r\n\r\n                // Prepare the data\r\n                for(var i=1; i<=max; i++) { \r\n                    var c = 0; //if there is no power then the hole must be filled with a zero\r\n                    if(powers.indexOf(i+'') !== -1) { \r\n                        if(g === S) { \r\n                            c = sym.multiplier; \r\n                        }\r\n                        else {\r\n                            c = sym.symbols[i].multiplier;\r\n                        }\r\n                    }\r\n                    // Insert the coeffient but from the front\r\n                    rarr.unshift(c);\r\n                }\r\n                \r\n                rarr.push(symbol.symbols[CONST_HASH].multiplier);\r\n\r\n                if(sym.group === S) rarr[0] = sym.multiplier;//the symbol maybe of group CP with one variable\r\n\r\n                return get_roots(rarr, powers, max);\r\n            }\r\n            else if(core.Utils.isArray(symbol)) {\r\n                var parr = symbol;\r\n                var rarr = [],\r\n                    powers = [],\r\n                    last_power = 0;\r\n                for(var i=0; i<parr.length; i++) {\r\n                    \r\n                    var coeff = parr[i][0],\r\n                        pow = parr[i][1],\r\n                        d = pow - last_power - 1;\r\n                    //insert the zeros\r\n                    for(var j=0; j<d; j++) rarr.unshift(0);\r\n                    \r\n                    rarr.unshift(coeff);\r\n                    if(pow !== 0) powers.push(pow);\r\n                    last_power = pow;\r\n                }\r\n                var max = Math.max.apply(undefined, powers);\r\n\r\n                return get_roots(rarr, powers, max);\r\n            }\r\n            else {\r\n                throw new core.exceptions.NerdamerTypeError('Cannot calculate roots. Symbol must be a polynomial!');\r\n            }\r\n\r\n            function calcroots(rarr, powers, max){\t\r\n                var MAXDEGREE = 100; // Degree of largest polynomial accepted by this script.\r\n\r\n                // Make a clone of the coefficients before appending the max power\r\n                var p = rarr.slice(0);\r\n\r\n                // Divide the string up into its individual entries, which--presumably--are separated by whitespace\r\n                rarr.unshift(max);\r\n\r\n                if (max > MAXDEGREE){\r\n                    throw new core.exceptions.ValueLimitExceededError(\"This utility accepts polynomials of degree up to \" + MAXDEGREE + \". \");\r\n                }\r\n\r\n                var zeroi = [],   // Vector of imaginary components of roots\r\n                    degreePar = {};    // degreePar is a dummy variable for passing the parameter POLYDEGREE by reference\r\n                degreePar.Degree = max; \r\n\r\n                for (i = 0; i < max; i++) {\r\n                    zeroi.push(0);\r\n                }\r\n                var zeror = zeroi.slice(0); // Vector of real components of roots\r\n\r\n                // Find the roots\r\n                //--> Begin Jenkins-Traub\r\n\r\n                /*\r\n                 * A verbatim copy of Mr. David Binner's Jenkins-Traub port\r\n                */\r\n               function QuadSD_ak1(NN, u, v, p, q, iPar){\r\n                   // Divides p by the quadratic 1, u, v placing the quotient in q and the remainder in a, b\r\n                   // iPar is a dummy variable for passing in the two parameters--a and b--by reference\r\n                   q[0] = iPar.b = p[0];\r\n                   q[1] = iPar.a = -(u*iPar.b) + p[1];\r\n\r\n                   for (var i = 2; i < NN; i++){\r\n                       q[i] = -(u*iPar.a + v*iPar.b) + p[i];\r\n                       iPar.b = iPar.a;\r\n                       iPar.a = q[i];\r\n                   } \r\n                   return;\r\n               } \r\n\r\n               function calcSC_ak1(DBL_EPSILON, N, a, b, iPar, K, u, v, qk){\r\n                   // This routine calculates scalar quantities used to compute the next K polynomial and\r\n                   // new estimates of the quadratic coefficients.\r\n                   // calcSC -\tinteger variable set here indicating how the calculations are normalized\r\n                   // to avoid overflow.\r\n                   // iPar is a dummy variable for passing in the nine parameters--a1, a3, a7, c, d, e, f, g, and h --by reference\r\n\r\n                   // sdPar is a dummy variable for passing the two parameters--c and d--into QuadSD_ak1 by reference\r\n                   var sdPar = new Object(),    \r\n                   // TYPE = 3 indicates the quadratic is almost a factor of K\r\n                       dumFlag = 3;\t\r\n\r\n                   // Synthetic division of K by the quadratic 1, u, v\r\n                   sdPar.b =  sdPar.a = 0.0;\r\n                   QuadSD_ak1(N, u, v, K, qk, sdPar);\r\n                   iPar.c = sdPar.a;\r\n                   iPar.d = sdPar.b;\r\n\r\n                   if (Math.abs(iPar.c) <= (100.0*DBL_EPSILON*Math.abs(K[N - 1]))) {\r\n                       if (Math.abs(iPar.d) <= (100.0*DBL_EPSILON*Math.abs(K[N - 2])))  return dumFlag;\r\n                   } \r\n\r\n                   iPar.h = v*b;\r\n                   if (Math.abs(iPar.d) >= Math.abs(iPar.c)){\r\n                         // TYPE = 2 indicates that all formulas are divided by d\r\n                       dumFlag = 2;\t\t\r\n                       iPar.e = a/(iPar.d);\r\n                       iPar.f = (iPar.c)/(iPar.d);\r\n                       iPar.g = u*b;\r\n                       iPar.a3 = (iPar.e)*((iPar.g) + a) + (iPar.h)*(b/(iPar.d));\r\n                       iPar.a1 = -a + (iPar.f)*b;\r\n                       iPar.a7 = (iPar.h) + ((iPar.f) + u)*a;\r\n                   } \r\n                   else {\r\n                       // TYPE = 1 indicates that all formulas are divided by c;\r\n                       dumFlag = 1;\t\t\r\n                       iPar.e = a/(iPar.c);\r\n                       iPar.f = (iPar.d)/(iPar.c);\r\n                       iPar.g = (iPar.e)*u;\r\n                       iPar.a3 = (iPar.e)*a + ((iPar.g) + (iPar.h)/(iPar.c))*b;\r\n                       iPar.a1 = -(a*((iPar.d)/(iPar.c))) + b;\r\n                       iPar.a7 = (iPar.g)*(iPar.d) + (iPar.h)*(iPar.f) + a;\r\n                   } \r\n                   return dumFlag;\r\n               } \r\n\r\n               function nextK_ak1(DBL_EPSILON, N, tFlag, a, b, iPar, K, qk, qp){\r\n                   // Computes the next K polynomials using the scalars computed in calcSC_ak1\r\n                   // iPar is a dummy variable for passing in three parameters--a1, a3, and a7\r\n                   var temp;\r\n                   if (tFlag == 3){\t// Use unscaled form of the recurrence\r\n                       K[1] = K[0] = 0.0;\r\n                       for (var i = 2; i < N; i++)\t { K[i] = qk[i - 2]; }\r\n                       return;\r\n                   } \r\n\r\n                   temp = ((tFlag == 1) ? b : a);\r\n                   if (Math.abs(iPar.a1) > (10.0*DBL_EPSILON*Math.abs(temp))){\r\n                       // Use scaled form of the recurrence\r\n                       iPar.a7 /= iPar.a1;\r\n                       iPar.a3 /= iPar.a1;\r\n                       K[0] = qp[0];\r\n                       K[1] = -(qp[0]*iPar.a7) + qp[1];\r\n                       for (var i = 2; i < N; i++)\t K[i] = -(qp[i - 1]*iPar.a7) + qk[i - 2]*iPar.a3 + qp[i];\r\n                   } \r\n                   else {\r\n                       // If a1 is nearly zero, then use a special form of the recurrence\r\n                       K[0] = 0.0;\r\n                       K[1] = -(qp[0]*iPar.a7);\r\n                       for (var i = 2; i < N; i++) { K[i] = -(qp[i - 1]*iPar.a7) + qk[i - 2]*iPar.a3; }\r\n                   } \r\n                   return;\r\n               }\r\n\r\n               function newest_ak1(tFlag, iPar, a, a1, a3, a7, b, c, d, f, g, h, u, v, K, N, p){\r\n                   // Compute new estimates of the quadratic coefficients using the scalars computed in calcSC_ak1\r\n                   // iPar is a dummy variable for passing in the two parameters--uu and vv--by reference\r\n                   // iPar.a = uu, iPar.b = vv\r\n\r\n                   var a4, a5, b1, b2, c1, c2, c3, c4, temp;\r\n                   iPar.b = iPar.a = 0.0;// The quadratic is zeroed\r\n\r\n                   if (tFlag != 3){\r\n                       if (tFlag != 2){\r\n                           a4 = a + u*b + h*f;\r\n                           a5 = c + (u + v*f)*d;\r\n                       } \r\n                       else { \r\n                           a4 = (a + g)*f + h;\r\n                           a5 = (f + u)*c + v*d;\r\n                       } \r\n\r\n                       // Evaluate new quadratic coefficients\r\n                       b1 = -(K[N - 1]/p[N]);\r\n                       b2 = -(K[N - 2] + b1*p[N - 1])/p[N];\r\n                       c1 = v*b2*a1;\r\n                       c2 = b1*a7;\r\n                       c3 = b1*b1*a3;\r\n                       c4 = -(c2 + c3) + c1;\r\n                       temp = -c4 + a5 + b1*a4;\r\n                       if (temp != 0.0) {\r\n                           iPar.a = -((u*(c3 + c2) + v*(b1*a1 + b2*a7))/temp) + u;\r\n                           iPar.b = v*(1.0 + c4/temp);\r\n                       } \r\n                   } \r\n                   return;\r\n               } \r\n\r\n               function Quad_ak1(a, b1, c, iPar){\r\n                   // Calculates the zeros of the quadratic a*Z^2 + b1*Z + c\r\n                   // The quadratic formula, modified to avoid overflow, is used to find the larger zero if the\r\n                   // zeros are real and both zeros are complex. The smaller real zero is found directly from\r\n                   // the product of the zeros c/a.\r\n\r\n                   // iPar is a dummy variable for passing in the four parameters--sr, si, lr, and li--by reference\r\n\r\n                   var b, d, e;\r\n                   iPar.sr = iPar.si = iPar.lr = iPar.li = 0.0;\r\n\r\n                   if (a == 0) {\r\n                       iPar.sr = ((b1 != 0) ? -(c/b1) : iPar.sr);\r\n                       return;\r\n                   } \r\n                   if (c == 0){\r\n                       iPar.lr = -(b1/a);\r\n                       return;\r\n                   } \r\n\r\n                   // Compute discriminant avoiding overflow\r\n                   b = b1/2.0;\r\n                   if (Math.abs(b) < Math.abs(c)){\r\n                       e = ((c >= 0) ? a : -a);\r\n                       e = -e + b*(b/Math.abs(c));\r\n                       d = Math.sqrt(Math.abs(e))*Math.sqrt(Math.abs(c));\r\n                   } \r\n                   else { \r\n                       e = -((a/b)*(c/b)) + 1.0;\r\n                       d = Math.sqrt(Math.abs(e))*(Math.abs(b));\r\n                   } \r\n\r\n                   if (e >= 0) {\r\n                       // Real zeros\r\n                       d = ((b >= 0) ? -d : d);\r\n                       iPar.lr = (-b + d)/a;\r\n                       iPar.sr = ((iPar.lr != 0) ? (c/(iPar.lr))/a : iPar.sr);\r\n                   }\r\n                   else { \r\n                       // Complex conjugate zeros\r\n                       iPar.lr = iPar.sr = -(b/a);\r\n                       iPar.si = Math.abs(d/a);\r\n                       iPar.li = -(iPar.si);\r\n                   } \r\n                   return;\r\n               }  \r\n\r\n               function QuadIT_ak1(DBL_EPSILON, N, iPar, uu, vv, qp, NN, sdPar, p, qk, calcPar, K){\r\n                   // Variable-shift K-polynomial iteration for a quadratic factor converges only if the\r\n                   // zeros are equimodular or nearly so.\r\n                   // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\r\n                   // sdPar is a dummy variable for passing the two parameters--a and b--in by reference\r\n                   // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --in by reference\r\n\r\n                   // qPar is a dummy variable for passing the four parameters--szr, szi, lzr, and lzi--into Quad_ak1 by reference\r\n                   var qPar = new Object(),    \r\n                       ee, mp, omp, relstp, t, u, ui, v, vi, zm,\r\n                       i, j = 0, tFlag, triedFlag = 0;   // Integer variables\r\n\r\n                   iPar.NZ = 0;// Number of zeros found\r\n                   u = uu; // uu and vv are coefficients of the starting quadratic\r\n                   v = vv;\r\n\r\n                   do {\r\n                       qPar.li = qPar.lr =  qPar.si = qPar.sr = 0.0;\r\n                       Quad_ak1(1.0, u, v, qPar);\r\n                       iPar.szr = qPar.sr;\r\n                       iPar.szi = qPar.si;\r\n                       iPar.lzr = qPar.lr;\r\n                       iPar.lzi = qPar.li;\r\n\r\n                       // Return if roots of the quadratic are real and not close to multiple or nearly\r\n                       // equal and of opposite sign.\r\n                       if (Math.abs(Math.abs(iPar.szr) - Math.abs(iPar.lzr)) > 0.01*Math.abs(iPar.lzr))  break;\r\n\r\n                       // Evaluate polynomial by quadratic synthetic division\r\n\r\n                       QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n\r\n                       mp = Math.abs(-((iPar.szr)*(sdPar.b)) + (sdPar.a)) + Math.abs((iPar.szi)*(sdPar.b));\r\n\r\n                       // Compute a rigorous bound on the rounding error in evaluating p\r\n\r\n                       zm = Math.sqrt(Math.abs(v));\r\n                       ee = 2.0*Math.abs(qp[0]);\r\n                       t = -((iPar.szr)*(sdPar.b));\r\n\r\n                       for (i = 1; i < N; i++)  { ee = ee*zm + Math.abs(qp[i]); }\r\n\r\n                       ee = ee*zm + Math.abs(t + sdPar.a);\r\n                       ee = (9.0*ee + 2.0*Math.abs(t) - 7.0*(Math.abs((sdPar.a) + t) + zm*Math.abs((sdPar.b))))*DBL_EPSILON;\r\n\r\n                       // Iteration has converged sufficiently if the polynomial value is less than 20 times this bound\r\n                       if (mp <= 20.0*ee){\r\n                           iPar.NZ = 2;\r\n                           break;\r\n                       } \r\n\r\n                       j++;\r\n                       // Stop iteration after 20 steps\r\n                       if (j > 20)  break;\r\n                       if (j >= 2){\r\n                           if ((relstp <= 0.01) && (mp >= omp) && (!triedFlag)){\r\n                               // A cluster appears to be stalling the convergence. Five fixed shift\r\n                               // steps are taken with a u, v close to the cluster.\r\n                               relstp = ((relstp < DBL_EPSILON) ? Math.sqrt(DBL_EPSILON) : Math.sqrt(relstp));\r\n                               u -= u*relstp;\r\n                               v += v*relstp;\r\n\r\n                               QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                               for (i = 0; i < 5; i++){\r\n                                   tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                                   nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\r\n                               } \r\n\r\n                               triedFlag = 1;\r\n                               j = 0;\r\n\r\n                           } \r\n                       }\r\n                       omp = mp;\r\n\r\n                       // Calculate next K polynomial and new u and v\r\n                       tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                       nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\r\n                       tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                       newest_ak1(tFlag, sdPar, sdPar.a, calcPar.a1, calcPar.a3, calcPar.a7, sdPar.b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\r\n                       ui = sdPar.a;\r\n                       vi = sdPar.b;\r\n\r\n                       // If vi is zero, the iteration is not converging\r\n                       if (vi != 0){\r\n                           relstp = Math.abs((-v + vi)/vi);\r\n                           u = ui;\r\n                           v = vi;\r\n                       } \r\n                   } while (vi != 0); \r\n                   return;\r\n               } \r\n\r\n               function RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk){\r\n                   // Variable-shift H-polynomial iteration for a real zero\r\n                   // sss\t- starting iterate = sdPar.a\r\n                   // NZ\t\t- number of zeros found = iPar.NZ\r\n                   // dumFlag\t- flag to indicate a pair of zeros near real axis, returned to iFlag\r\n\r\n                   var ee, kv, mp, ms, omp, pv, s, t,\r\n                       dumFlag, i, j, nm1 = N - 1;   // Integer variables\r\n\r\n                   iPar.NZ = j = dumFlag = 0;\r\n                   s = sdPar.a;\r\n\r\n                   for ( ; ; ) {\r\n                       pv = p[0];\r\n\r\n                       // Evaluate p at s\r\n                       qp[0] = pv;\r\n                       for (i = 1; i < NN; i++)  { qp[i] = pv = pv*s + p[i]; }\r\n                       mp = Math.abs(pv);\r\n\r\n                       // Compute a rigorous bound on the error in evaluating p\r\n                       ms = Math.abs(s);\r\n                       ee = 0.5*Math.abs(qp[0]);\r\n                       for (i = 1; i < NN; i++)  { ee = ee*ms + Math.abs(qp[i]); }\r\n\r\n                       // Iteration has converged sufficiently if the polynomial value is less than\r\n                       // 20 times this bound\r\n                       if (mp <= 20.0*DBL_EPSILON*(2.0*ee - mp)){\r\n                           iPar.NZ = 1;\r\n                           iPar.szr = s;\r\n                           iPar.szi = 0.0;\r\n                           break;\r\n                       } \r\n                       j++;\r\n                       // Stop iteration after 10 steps\r\n                       if (j > 10)  break;\r\n\r\n                       if (j >= 2){\r\n                           if ((Math.abs(t) <= 0.001*Math.abs(-t + s)) && (mp > omp)){\r\n                               // A cluster of zeros near the real axis has been encountered.\r\n                               // Return with iFlag set to initiate a quadratic iteration.\r\n                               dumFlag = 1;\r\n                               iPar.a = s;\r\n                               break;\r\n                           } // End if ((fabs(t) <= 0.001*fabs(s - t)) && (mp > omp))\r\n                       } //End if (j >= 2)\r\n\r\n                       // Return if the polynomial value has increased significantly\r\n                       omp = mp;\r\n\r\n                       // Compute t, the next polynomial and the new iterate\r\n                       qk[0] = kv = K[0];\r\n                       for (i = 1; i < N; i++)\t { qk[i] = kv = kv*s + K[i]; }\r\n\r\n                       if (Math.abs(kv) > Math.abs(K[nm1])*10.0*DBL_EPSILON){\r\n                           // Use the scaled form of the recurrence if the value of K at s is non-zero\r\n                           t = -(pv/kv);\r\n                           K[0] = qp[0];\r\n                           for (i = 1; i < N; i++) { K[i] = t*qk[i - 1] + qp[i]; }\r\n                       }\r\n                       else { \r\n                           // Use unscaled form\r\n                           K[0] = 0.0;\r\n                           for (i = 1; i < N; i++)\t K[i] = qk[i - 1];\r\n                       }\r\n\r\n                       kv = K[0];\r\n                       for (i = 1; i < N; i++) { kv = kv*s + K[i]; }\r\n                       t = ((Math.abs(kv) > (Math.abs(K[nm1])*10.0*DBL_EPSILON)) ? -(pv/kv) : 0.0);\r\n                       s += t;\r\n                   } \r\n                   return dumFlag;\r\n               } \r\n\r\n               function Fxshfr_ak1(DBL_EPSILON, MDP1, L2, sr, v, K, N, p, NN, qp, u, iPar){\r\n\r\n                   // Computes up to L2 fixed shift K-polynomials, testing for convergence in the linear or\r\n                   // quadratic case. Initiates one of the variable shift iterations and returns with the\r\n                   // number of zeros found.\r\n                   // L2\tlimit of fixed shift steps\r\n                   // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\r\n                   // NZ\tnumber of zeros found\r\n                   var sdPar = new Object(),    // sdPar is a dummy variable for passing the two parameters--a and b--into QuadSD_ak1 by reference\r\n                       calcPar = new Object(),\r\n                       // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --into calcSC_ak1 by reference\r\n\r\n                       qk = new Array(MDP1),\r\n                       svk = new Array(MDP1),\r\n                       a, b, betas, betav, oss, ots, otv, ovv, s, ss, ts, tss, tv, tvv, ui, vi, vv,\r\n                       fflag, i, iFlag = 1, j, spass, stry, tFlag, vpass, vtry;     // Integer variables\r\n\r\n                   iPar.NZ = 0;\r\n                   betav = betas = 0.25;\r\n                   oss = sr;\r\n                   ovv = v;\r\n\r\n                   //Evaluate polynomial by synthetic division\r\n                   sdPar.b =  sdPar.a = 0.0;\r\n                   QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                   a = sdPar.a;\r\n                   b = sdPar.b;\r\n                   calcPar.h = calcPar.g = calcPar.f = calcPar.e = calcPar.d = calcPar.c = calcPar.a7 = calcPar.a3 = calcPar.a1 = 0.0;\r\n                   tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n\r\n                   for (j = 0; j < L2; j++){\r\n                       fflag = 1;\r\n\r\n                       // Calculate next K polynomial and estimate v\r\n                       nextK_ak1(DBL_EPSILON, N, tFlag, a, b, calcPar, K, qk, qp);\r\n                       tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n\r\n                       // Use sdPar for passing in uu and vv instead of defining a brand-new variable.\r\n                       // sdPar.a = ui, sdPar.b = vi\r\n                       newest_ak1(tFlag, sdPar, a, calcPar.a1, calcPar.a3, calcPar.a7, b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\r\n                       ui = sdPar.a;\r\n                       vv = vi = sdPar.b;\r\n\r\n                       // Estimate s\r\n                       ss = ((K[N - 1] != 0.0) ? -(p[N]/K[N - 1]) : 0.0);\r\n                       ts = tv = 1.0;\r\n\r\n                       if ((j != 0) && (tFlag != 3)){\r\n                           // Compute relative measures of convergence of s and v sequences\r\n                           tv = ((vv != 0.0) ? Math.abs((vv - ovv)/vv) : tv);\r\n                           ts = ((ss != 0.0) ? Math.abs((ss - oss)/ss) : ts);\r\n\r\n                           // If decreasing, multiply the two most recent convergence measures\r\n                           tvv = ((tv < otv) ? tv*otv : 1.0);\r\n                           tss = ((ts < ots) ? ts*ots : 1.0);\r\n\r\n                           // Compare with convergence criteria\r\n                           vpass = ((tvv < betav) ? 1 : 0);\r\n                           spass = ((tss < betas) ? 1 : 0);\r\n\r\n                           if ((spass) || (vpass)){\r\n\r\n                               // At least one sequence has passed the convergence test.\r\n                               // Store variables before iterating\r\n\r\n                               for (i = 0; i < N; i++) { svk[i] = K[i]; }\r\n                               s = ss;\r\n\r\n                               // Choose iteration according to the fastest converging sequence\r\n\r\n                                 stry = vtry = 0;\r\n\r\n                               for ( ; ; ) {\r\n                                   if ((fflag && ((fflag = 0) == 0)) && ((spass) && (!vpass || (tss < tvv)))){\r\n                                       ;// Do nothing. Provides a quick \"short circuit\".\r\n                                   } \r\n                                   else { \r\n                                       QuadIT_ak1(DBL_EPSILON, N, iPar, ui, vi, qp, NN, sdPar, p, qk, calcPar, K);\r\n                                       a = sdPar.a;\r\n                                       b = sdPar.b;\r\n\r\n                                       if ((iPar.NZ) > 0) return;\r\n\r\n                                       // Quadratic iteration has failed. Flag that it has been tried and decrease the\r\n                                       // convergence criterion\r\n                                       iFlag = vtry = 1;\r\n                                       betav *= 0.25;\r\n\r\n                                       // Try linear iteration if it has not been tried and the s sequence is converging\r\n                                       if (stry || (!spass)){\r\n                                           iFlag = 0;\r\n                                       }\r\n                                       else {\r\n                                           for (i = 0; i < N; i++) K[i] = svk[i];\r\n                                       } \r\n                                   }\r\n                                   //fflag = 0;\r\n                                   if (iFlag != 0){\r\n                                       // Use sdPar for passing in s instead of defining a brand-new variable.\r\n                                       // sdPar.a = s\r\n                                       sdPar.a = s;\r\n                                       iFlag = RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk);\r\n                                       s = sdPar.a;\r\n\r\n                                       if ((iPar.NZ) > 0) return;\r\n\r\n                                       // Linear iteration has failed. Flag that it has been tried and decrease the\r\n                                       // convergence criterion\r\n                                       stry = 1;\r\n                                       betas *= 0.25;\r\n\r\n                                       if (iFlag != 0){\r\n                                           // If linear iteration signals an almost double real zero, attempt quadratic iteration\r\n                                           ui = -(s + s);\r\n                                           vi = s*s;\r\n                                           continue;\r\n\r\n                                       } \r\n                                   } \r\n\r\n                                   // Restore variables\r\n                                   for (i = 0; i < N; i++) K[i] = svk[i];\r\n\r\n                                   // Try quadratic iteration if it has not been tried and the v sequence is converging\r\n                                   if (!vpass || vtry) break;\t\t// Break out of infinite for loop\r\n\r\n                               } \r\n\r\n                               // Re-compute qp and scalar values to continue the second stage\r\n\r\n                               QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                               a = sdPar.a;\r\n                               b = sdPar.b;\r\n\r\n                               tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n                           } \r\n                       } \r\n                       ovv = vv;\r\n                       oss = ss;\r\n                       otv = tv;\r\n                       ots = ts;\r\n                   } \r\n                   return;\r\n               }  \r\n\r\n               function rpSolve(degPar, p, zeror, zeroi){ \r\n                   var N = degPar.Degree,\r\n                       RADFAC = 3.14159265358979323846/180,  // Degrees-to-radians conversion factor = PI/180\r\n                       LB2 = Math.LN2,// Dummy variable to avoid re-calculating this value in loop below\r\n                       MDP1 = degPar.Degree + 1,\r\n                       K = new Array(MDP1),\r\n                       pt = new Array(MDP1),\r\n                       qp = new Array(MDP1),\r\n                       temp = new Array(MDP1),\r\n                       // qPar is a dummy variable for passing the four parameters--sr, si, lr, and li--by reference\r\n                       qPar = new Object(),\r\n                       // Fxshfr_Par is a dummy variable for passing parameters by reference : NZ, lzi, lzr, szi, szr);\r\n                       Fxshfr_Par = new Object(),\r\n                       bnd, DBL_EPSILON, df, dx, factor, ff, moduli_max, moduli_min, sc, x, xm,\r\n                       aa, bb, cc, sr, t, u, xxx,\r\n                       j, jj, l, NM1, NN, zerok;// Integer variables\r\n\r\n                   // Calculate the machine epsilon and store in the variable DBL_EPSILON.\r\n                   // To calculate this value, just use existing variables rather than create new ones that will be used only for this code block\r\n                   aa = 1.0;\r\n                   do {\r\n                       DBL_EPSILON = aa;\r\n                       aa /= 2;\r\n                       bb = 1.0 + aa;\r\n                   } while (bb > 1.0);\r\n\r\n                   var LO = Number.MIN_VALUE/DBL_EPSILON,\r\n                       cosr = Math.cos(94.0*RADFAC),// = -0.069756474\r\n                       sinr = Math.sin(94.0*RADFAC),// = 0.99756405\r\n                       xx = Math.sqrt(0.5),// = 0.70710678\r\n                       yy = -xx;\r\n\r\n                   Fxshfr_Par.NZ = j = 0;\r\n                   Fxshfr_Par.szr = Fxshfr_Par.szi =  Fxshfr_Par.lzr = Fxshfr_Par.lzi = 0.0;\r\n\r\n                   // Remove zeros at the origin, if any\r\n                   while (p[N] == 0){\r\n                       zeror[j] = zeroi[j] = 0;\r\n                       N--;\r\n                       j++;\r\n                   }\r\n                   NN = N + 1;\r\n\r\n                   // >>>>> Begin Main Loop <<<<<\r\n                   while (N >= 1){ // Main loop\r\n                       // Start the algorithm for one zero\r\n                       if (N <= 2){\r\n                           // Calculate the final zero or pair of zeros\r\n                           if (N < 2){\r\n                               zeror[degPar.Degree - 1] = -(p[1]/p[0]);\r\n                               zeroi[degPar.Degree - 1] = 0;\r\n                           } \r\n                           else { \r\n                               qPar.li = qPar.lr =  qPar.si = qPar.sr = 0.0;\r\n                               Quad_ak1(p[0], p[1], p[2], qPar);\r\n                               zeror[degPar.Degree - 2] = qPar.sr;\r\n                               zeroi[degPar.Degree - 2] = qPar.si;\r\n                               zeror[degPar.Degree - 1] = qPar.lr;\r\n                               zeroi[degPar.Degree - 1] = qPar.li;\r\n                           } \r\n                             break;\r\n                       } \r\n\r\n                       // Find the largest and smallest moduli of the coefficients\r\n                       moduli_max = 0.0;\r\n                       moduli_min = Number.MAX_VALUE;\r\n\r\n                       for (i = 0; i < NN; i++){\r\n                           x = Math.abs(p[i]);\r\n                           if (x > moduli_max) moduli_max = x;\r\n                           if ((x != 0) && (x < moduli_min)) moduli_min = x;\r\n                       }\r\n\r\n                       // Scale if there are large or very small coefficients\r\n                       // Computes a scale factor to multiply the coefficients of the polynomial. The scaling\r\n                       // is done to avoid overflow and to avoid undetected underflow interfering with the\r\n                       // convergence criterion.\r\n                       // The factor is a power of the base.\r\n                       sc = LO/moduli_min;\r\n\r\n                       if (((sc <= 1.0) && (moduli_max >= 10)) || ((sc > 1.0) && (Number.MAX_VALUE/sc >= moduli_max))){\r\n                           sc = ((sc == 0) ? Number.MIN_VALUE : sc);\r\n                           l = Math.floor(Math.log(sc)/LB2 + 0.5);\r\n                           factor = Math.pow(2.0, l);\r\n                           if (factor != 1.0){\r\n                               for (i = 0; i < NN; i++) p[i] *= factor;\r\n                           } \r\n                       } \r\n\r\n                       // Compute lower bound on moduli of zeros\r\n                       for (var i = 0; i < NN; i++) pt[i] = Math.abs(p[i]);\r\n                       pt[N] = -(pt[N]);\r\n                       NM1 = N - 1;\r\n\r\n                       // Compute upper estimate of bound\r\n                       x = Math.exp((Math.log(-pt[N]) - Math.log(pt[0]))/N);\r\n\r\n                       if (pt[NM1] != 0) {\r\n                           // If Newton step at the origin is better, use it\r\n                           xm = -pt[N]/pt[NM1];\r\n                           x = ((xm < x) ? xm : x);\r\n                       } \r\n\r\n                       // Chop the interval (0, x) until ff <= 0\r\n                       xm = x;\r\n                       do {\r\n                           x = xm;\r\n                           xm = 0.1*x;\r\n                           ff = pt[0];\r\n                           for (var i = 1; i < NN; i++) { ff = ff *xm + pt[i]; }\r\n                       } while (ff > 0); // End do-while loop\r\n\r\n                       dx = x;\r\n                       // Do Newton iteration until x converges to two decimal places\r\n\r\n                       do {\r\n                           df = ff = pt[0];\r\n                           for (var i = 1; i < N; i++){\r\n                               ff = x*ff + pt[i];\r\n                               df = x*df + ff;\r\n                           } // End for i\r\n                           ff = x*ff + pt[N];\r\n                           dx = ff/df;\r\n                           x -= dx;\r\n                       } while (Math.abs(dx/x) > 0.005); // End do-while loop\r\n\r\n                       bnd = x;\r\n\r\n                       // Compute the derivative as the initial K polynomial and do 5 steps with no shift\r\n                       for (var i = 1; i < N; i++) K[i] = (N - i)*p[i]/N;\r\n                       K[0] = p[0];\r\n                       aa = p[N];\r\n                       bb = p[NM1];\r\n                       zerok = ((K[NM1] == 0) ? 1 : 0);\r\n\r\n                       for (jj = 0; jj < 5; jj++) {\r\n                           cc = K[NM1];\r\n                               if (zerok){\r\n                                   // Use unscaled form of recurrence\r\n                                   for (var i = 0; i < NM1; i++){\r\n                                       j = NM1 - i;\r\n                                       K[j] = K[j - 1];\r\n                                   } // End for i\r\n                                   K[0] = 0;\r\n                                   zerok = ((K[NM1] == 0) ? 1 : 0);\r\n                               } \r\n                               else { \r\n                                   // Used scaled form of recurrence if value of K at 0 is nonzero\r\n                                   t = -aa/cc;\r\n                                   for (var i = 0; i < NM1; i++){\r\n                                       j = NM1 - i;\r\n                                       K[j] = t*K[j - 1] + p[j];\r\n                                   } // End for i\r\n                                   K[0] = p[0];\r\n                                   zerok = ((Math.abs(K[NM1]) <= Math.abs(bb)*DBL_EPSILON*10.0) ? 1 : 0);\r\n                               } \r\n                       } \r\n\r\n                       // Save K for restarts with new shifts\r\n                       for (var i = 0; i < N; i++) temp[i] = K[i];\r\n\r\n                       // Loop to select the quadratic corresponding to each new shift\r\n                       for (jj = 1; jj <= 20; jj++){\r\n\r\n                           // Quadratic corresponds to a double shift to a non-real point and its\r\n                           // complex conjugate. The point has modulus BND and amplitude rotated\r\n                           // by 94 degrees from the previous shift.\r\n\r\n                           xxx = -(sinr*yy) + cosr*xx;\r\n                           yy = sinr*xx + cosr*yy;\r\n                           xx = xxx;\r\n                           sr = bnd*xx;\r\n                           u = -(2.0*sr);\r\n\r\n                           // Second stage calculation, fixed quadratic\r\n                           Fxshfr_ak1(DBL_EPSILON, MDP1, 20*jj, sr, bnd, K, N, p, NN, qp, u, Fxshfr_Par);\r\n\r\n                           if (Fxshfr_Par.NZ != 0){\r\n                               // The second stage jumps directly to one of the third stage iterations and\r\n                               // returns here if successful. Deflate the polynomial, store the zero or\r\n                               // zeros, and return to the main algorithm.\r\n                               j = degPar.Degree - N;\r\n                               zeror[j] = Fxshfr_Par.szr;\r\n                               zeroi[j] = Fxshfr_Par.szi;\r\n                               NN = NN - Fxshfr_Par.NZ;\r\n                               N = NN - 1;\r\n                               for (var i = 0; i < NN; i++) p[i] = qp[i];\r\n                               if (Fxshfr_Par.NZ != 1){\r\n                                   zeror[j + 1] = Fxshfr_Par.lzr;\r\n                                   zeroi[j + 1] = Fxshfr_Par.lzi;\r\n                               }\r\n                               break;\r\n                           } \r\n                           else { \r\n                             // If the iteration is unsuccessful, another quadratic is chosen after restoring K\r\n                             for (var i = 0; i < N; i++) { K[i] = temp[i]; }\r\n                           } \r\n                       } \r\n                       // Return with failure if no convergence with 20 shifts\r\n                       if (jj > 20) {\r\n                           degPar.Degree -= N;\r\n                           break;\r\n                       } \r\n                   }\r\n                   // >>>>> End Main Loop <<<<<\r\n                   return;\r\n               }\r\n                //--> End Jenkins-Traub\r\n                rpSolve(degreePar, p, zeror, zeroi);\r\n\r\n                var l = zeroi.length;\r\n                //format the output\r\n                for( i=0; i<l; i++ ) {\r\n                    // We round the imaginary part to avoid having something crazy like 5.67e-16.\r\n                    var img = round( zeroi[i], decp+8 ),\r\n                        real = round( zeror[i], decp+8 );\r\n                    // Did the rounding pay off? If the rounding did nothing more than chop off a few digits then no.\r\n                    // If the rounding results in a a number at least 3 digits shorter we'll keep it else we'll keep \r\n                    // the original otherwise the rounding was worth it.\r\n                    real = decp - String( real ).length > 2 ? real : zeror[i];\r\n                    var sign = img < 0 ? '-' : '';\r\n\r\n                    // Remove the zeroes\r\n                    if( real === 0 ) { real = ''; }\r\n                    if( img === 0 ) { img = ''; }\r\n\r\n                    // Remove 1 as the multiplier and discard imaginary part if there isn't one.\r\n                    img = Math.abs( img ) === 1 ? sign+'i' : ( img ? img+'*i' : '' );\r\n\r\n                    var num = ( real && img ) ? real + '+' + img : real+img;\r\n                    zeror[i] = num.replace(/\\+\\-/g, '-');\r\n                }\r\n                return zeror;\r\n            } \r\n         },\r\n        roots: function(symbol) {\r\n            \r\n            if(symbol.isConstant(true, true)) {\r\n                return core.Utils.nroots(symbol);\r\n            }\r\n            var roots = __.proots(symbol).map(function(x) {\r\n                return _.parse(x);\r\n            });\r\n            return core.Vector.fromArray(roots);\r\n        },\r\n        froot: function(f, guess, dx) { \r\n            var newtonraph = function(xn) {\r\n                var mesh = 1e-12,\r\n                    // If the derivative was already provided then don't recalculate.\r\n                    df = dx ? dx : core.Utils.build(core.Calculus.diff(f.clone())),\r\n                    \r\n                    // If the function was passed in as a function then don't recalculate.\r\n                    fn = f instanceof Function ? f : core.Utils.build(f),\r\n                    max = 10000,\r\n                    done = false, \r\n                    safety = 0;\r\n                while( !done ) { \r\n                    var x = xn-(fn(xn)/df(xn));\r\n                    //absolute values for both x & xn ensures that we indeed have the radius    \r\n                    var r = Math.abs(x) - Math.abs(xn),\r\n                        delta = Math.abs(r);\r\n                    xn = x; \r\n\r\n                    if( delta < mesh ) done = true;\r\n                    else if( safety > max ) {\r\n                        xn = null;\r\n                        done = true;\r\n                    }\r\n                    \r\n                    safety++;\r\n                }\r\n                return xn;\r\n            };\r\n            return newtonraph( Number( guess ) );\r\n        },\r\n        quad: function(a, b, c) {\r\n            var q = function(a, b, c, sign) {\r\n                return _.parse('-('+b+'+'+sign+'*sqrt(('+b+')^2-4*('+a+')*('+c+')))/(2*'+a+')');\r\n            };\r\n            return [q(a, b, c, 1), q(a, b, c, -1)];\r\n        },\r\n        sumProd: function(a, b) {\r\n            return __.quad(-b, a, -1).map(function(x){\r\n                return x.invert(); \r\n            });\r\n        },\r\n        coeffs: function(symbol, wrt, coeffs) {\r\n            wrt = String(wrt); \r\n            symbol = _.expand(symbol);\r\n            coeffs = coeffs || [new Symbol(0)];\r\n            //we cannot get coeffs for group EX\r\n            if(symbol.group === EX && symbol.contains(wrt, true))\r\n                _.error('Unable to get coefficients using expression '+symbol.toString());\r\n            var vars = variables(symbol);\r\n            if(vars.length <=1 && vars[0] === wrt) {\r\n                var a = new Polynomial(symbol).coeffs.map(function(x) {\r\n                    return new Symbol(x);\r\n                });\r\n                for(var i=0,l=a.length;i<l; i++)  {\r\n                    var coeff = a[i],\r\n                        e = coeffs[i]; \r\n                    if(e)\r\n                        coeff = _.add(e, coeff);\r\n                    coeffs[i] = coeff; //transfer it all over\r\n                }\r\n            }\r\n            else { \r\n                if(!wrt)\r\n                    _.error('Polynomial contains more than one variable. Please specify which variable is to be used!');\r\n                //if the variable isn't part of this polynomial then we're looking at x^0\r\n                \r\n                if(vars.indexOf(wrt) === -1) {\r\n                    coeffs[0] = _.add(symbol, coeffs[0]);\r\n                }\r\n                else {\r\n                    coeffs = coeffs || [new Symbol(0)];\r\n                    if(symbol.group === CB) {\r\n                        var s = symbol.symbols[wrt];\r\n                        if(!s)\r\n                            _.error('Expression is not a polynomial!');\r\n                        var p = Number(s.power);\r\n                        coeff = _.divide(symbol.clone(), s.clone());\r\n                        if(coeff.contains(wrt, true) || p < 0 || !isInt(p))\r\n                            _.error('Expression is not a polynomial!');\r\n                        var e = coeffs[p];\r\n                        if(e)\r\n                            coeff = _.add(e, coeff);\r\n                        coeffs[p] = coeff;\r\n                    }\r\n                    else if(symbol.group === CP) {\r\n                        symbol.each(function(x) {\r\n                           __.coeffs(x.clone(), wrt, coeffs);\r\n                        }, true);\r\n                    }\r\n                }\r\n            }\r\n            //fill holes\r\n            for(var i=0,l=coeffs.length; i<l; i++) \r\n                if(typeof coeffs[i] === 'undefined')\r\n                    coeffs[i] = new Symbol(0);\r\n\r\n            return coeffs;    \r\n        },\r\n        /**\r\n         * Get's all the powers of a particular polynomial including the denominators. The denominators powers\r\n         * are returned as negative. All remaining polynomials are returned as zero order polynomials.\r\n         * for example polyPowers(x^2+1/x+y+t) will return [ '-1', 0, '2' ]\r\n         * @param {Symbol} e\r\n         * @param {String} for_variable\r\n         * @param {Array} powers\r\n         * @returns {Array} An array of the powers\r\n         */\r\n        //assumes you've already verified that it's a polynomial\r\n        polyPowers: function(e, for_variable, powers) { \r\n            powers = powers || [];\r\n            var g = g = e.group; \r\n            if(g ===  PL && for_variable === e.value) {\r\n                powers = powers.concat(keys(e.symbols)); \r\n            }\r\n            else if(g === CP) { \r\n                for(var s in e.symbols) {\r\n                    var symbol = e.symbols[s]; \r\n                    var g = symbol.group, v = symbol.value; \r\n                    if(g === S && for_variable === v) powers.push(symbol.power);\r\n                    else if(g === PL || g === CP) powers = __.polyPowers(symbol, for_variable, powers);\r\n                    else if(g === CB && symbol.contains(for_variable)) {\r\n                        var t = symbol.symbols[for_variable];\r\n                        if(t) powers.push((t.power));\r\n                    }\r\n                    else if(g === N || for_variable !== v) powers.push(0);\r\n                }\r\n            }\r\n            else if(g === CB && e.contains(for_variable)) {\r\n                powers.push(core.Utils.decompose_fn(e, for_variable, true).x.power);\r\n            }\r\n            return core.Utils.arrayUnique(powers).sort();\r\n        },\r\n        //The factor object\r\n        Factor: {\r\n            //splits the symbol in symbol and constant\r\n            split: function(symbol) {\r\n                var c = new Symbol(1); //the constants part\r\n                var s = new Symbol(1); //the symbolic part\r\n                __.Factor.factor(symbol, new Factors()).each(function(x) {\r\n                    var t = _.parse(x);\r\n                    if(x.isConstant(true)) {\r\n                        c = _.multiply(c, t);\r\n                    }\r\n                    else {\r\n                        s = _.multiply(s, t);\r\n                    }\r\n                });\r\n                return [c, s];\r\n            },\r\n            mix: function(o, include_negatives) {\r\n                var factors = keys(o);\r\n                var l = factors.length;\r\n                var m = [];//create a row which we'r going to be mixing\r\n                for(var i=0; i<l; i++) {\r\n                    var factor = factors[i],\r\n                        p = o[factor];\r\n                    var ll = m.length;\r\n                    for(var j=0; j<ll; j++) {\r\n                        var t = m[j]*factor;\r\n                        m.push(t);\r\n                        if(include_negatives) m.push(-t);\r\n                    }\r\n \r\n                    for(var j=1; j<=p; j++)\r\n                        m.push(Math.pow(factor, j));\r\n                }\r\n                return m;\r\n            },\r\n            //TODO: this method is to replace common factoring\r\n            common: function(symbol, factors) {\r\n                try {\r\n                    if(symbol.group === CP) { \r\n                        //this may have the unfortunate side effect of expanding and factoring again\r\n                        //to only end up with the same result. \r\n                        //TODO: try to avoid this\r\n                        //collect the symbols and sort to have the longest first. Thinking is that the longest terms \r\n                        //has to contain the variable in order for it to be factorable\r\n                        var symbols = _.expand(symbol.clone(), true).collectSymbols(null, null, function(a, b) {\r\n                            return (b.length || 1) - (a.length || 1);\r\n                        });\r\n                        \r\n                        var map = {}; //create a map of common factors\r\n                        var coeffs = [];\r\n                        for(var i=0; i<symbols.length; i++) {\r\n                            var sym = symbols[i]; \r\n                            coeffs.push(sym.multiplier.clone());\r\n                            sym.each(function(x) {\r\n                                var p = Number(x.power);\r\n                                //This check exits since we have a symbolic power.\r\n                                //For the future... think about removing this check and modify for symbolic powers\r\n                                if(isNaN(p))\r\n                                    throw new Error('exiting');\r\n                                //loop through the symbols and lump together common terms\r\n                                if(x.value in map) {\r\n                                    if(p < map[x.value][0])\r\n                                        map[x.value][0] = p;\r\n                                    map[x.value][1].push(x);\r\n                                }\r\n                                else\r\n                                    map[x.value] = [p, [x]];\r\n                            });\r\n                        }\r\n                        //the factor\r\n                        var factor = new Symbol(1);\r\n                        for(var x in map) {\r\n                            //if this factor is found in all terms since the length of \r\n                            //matching variable terms matches the number of original terms\r\n                            if(map[x][1].length === symbols.length) {\r\n                                //generate a symbol and multiply into the factor\r\n                                factor = _.multiply(factor, _.pow(new Symbol(x), new Symbol(map[x][0])));\r\n                            }\r\n                        }\r\n                        //get coefficient factor\r\n                        var c = core.Math2.QGCD.apply(null, coeffs);\r\n\r\n                        if(!c.equals(1)) {\r\n                            factors.add(new Symbol(c));\r\n                            for(var i=0; i<symbols.length; i++) {\r\n                                symbols[i].multiplier = symbols[i].multiplier.divide(c);\r\n                            }\r\n                        }\r\n                            \r\n                        //if we actuall found any factors\r\n                        if(!factor.equals(1)) { \r\n                            factors.add(factor);\r\n                            symbol = new Symbol(0);\r\n                            for(var i=0; i<symbols.length; i++) {\r\n                                symbol = _.add(symbol, _.divide(symbols[i], factor.clone()));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch(e){;}\r\n\r\n                return symbol;\r\n            },\r\n            zeroes: function(symbol, factors) {\r\n                var exit = function() {\r\n                    throw new core.exceptions.ValueLimitExceededError('Exiting');\r\n                };\r\n                try {\r\n                    var vars, term, sum, p, e;\r\n                    symbol = _.expand(symbol.clone());\r\n                    e = symbol.toString();\r\n                    vars = variables(symbol);\r\n\r\n                    sum = new Symbol(0);\r\n                    \r\n                    var terms = [];\r\n                    var powers = [];\r\n                    \r\n                    //start setting each variable to zero\r\n                    for(var i=0, l=vars.length; i<vars.length; i++) {\r\n                        var subs = {};\r\n                        //we want to create a subs object with all but the current variable set to zero\r\n                        for(var j=0; j<l; j++) \r\n                            if(i !== j) //make sure we're not looking at the same variable\r\n                                subs[vars[j]] = 0;\r\n                        term = _.parse(e, subs);\r\n                        var tp = term.power;\r\n                        //the temporary power has to be an integer as well\r\n                        if(!isInt(tp))\r\n                            exit();\r\n                        terms.push(term);\r\n                        powers.push(term.power);\r\n                    }\r\n\r\n                    //get the gcd. This will be the p in (a^n+b^m)^p\r\n                    //if the gcd equals 1 meaning n = m then we need a tie breakder\r\n                    if(core.Utils.allSame(powers)) { \r\n                        //get p given x number of terms\r\n                        var n_terms = symbol.length;\r\n                        //the number of zeroes determines\r\n                        var n_zeroes = terms.length;\r\n                        if(n_zeroes === 2) {\r\n                            p = new Frac(powers[0]/(n_terms-1));\r\n                        }\r\n                        if(n_zeroes === 3) {\r\n                            p = new Frac(powers[0]/Math.round((Math.sqrt(8*n_terms-1)-3)/2));\r\n                        }\r\n                        /*\r\n                        //get the lowest possible power\r\n                        //e.g. given b^4+2*a^2*b^2+a^4, the power we're looking for would be 2\r\n                        symbol.each(function(x) {\r\n                            if(x.group === CB)\r\n                                x.each(function(y) {\r\n                                    if(!p || y.power.lessThan(p))\r\n                                        //p = Number(y.power);\r\n                                        p = y.power;\r\n                                });\r\n                            else if(!p || x.power.lessThan(p))\r\n                                //p = Number(x.power);\r\n                                p = x.power;\r\n                        });\r\n                        */\r\n                    }\r\n                    else\r\n                        //p is just the gcd of the powers\r\n                        p = core.Math2.QGCD.apply(null, powers);\r\n\r\n                    //if we don't have an integer then exit\r\n                    if(!isInt(p))\r\n                        exit();\r\n\r\n                    //build the factor\r\n                    for(var i=0; i<terms.length; i++) {\r\n                        var t = terms[i];\r\n                        var n = t.power.clone().divide(p);\r\n                        t.multiplier = new Frac(Math.pow(t.multiplier, 1/n));\r\n                        t.power = p.clone();\r\n                        sum = _.add(sum, t);\r\n                    }\r\n\r\n                    //by now we have the factor of zeroes. We'll know if we got it right because \r\n                    //we'll get a remainder of zero each time we divide by it\r\n                    if(sum.group !== CP)\r\n                        return symbol; //nothing to do\r\n\r\n                    while(true) {\r\n                        var d = __.div(symbol.clone(), sum.clone());\r\n                        if(d[1].equals(0)) {\r\n                            symbol = d[0];\r\n                            factors.add(sum.clone());\r\n                            if(symbol.equals(1)) //we've reached 1 so done.\r\n                                break;\r\n                        }\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                catch(e){};\r\n                \r\n                return symbol;\r\n            },\r\n            factor: function(symbol, factors) {\r\n                var _symbol = _.parse(symbol);\r\n                var retval = __.Factor._factor(_symbol, factors);\r\n                \r\n                if(retval.equals(symbol)) {\r\n                    return retval;\r\n                }\r\n                \r\n                if(retval.group === CB) {\r\n                    var t = new Symbol(1);\r\n                    /* \r\n                     * NOTE: for sign issues with factor START DEBUGGING HERE\r\n                     */\r\n                    //move the sign to t\r\n                    if(retval.multiplier.lessThan(0)) {\r\n                        t.negate();\r\n                        retval.negate();\r\n                    }\r\n                    retval.each(function(x) {\r\n                        var factored = __.Factor._factor(x);\r\n                        \r\n                        if(factored.group === CB) {\r\n                            factored.each(function(y) {\r\n                                var _factored = __.Factor._factor(y);\r\n                                t = _.multiply(t, _factored);\r\n                            });\r\n                        }\r\n                        else {\r\n                            t = _.multiply(t, factored);\r\n                        }\r\n                    });\r\n                    retval = t;\r\n                }  \r\n                return retval;\r\n            },\r\n            quadFactor: function(symbol, factors) {\r\n                if(symbol.isPoly() && __.degree(symbol.equals(2))) {\r\n                    //We've  already checked that we're dealing with a polynomial\r\n                    var v = core.Utils.variables(symbol)[0]; //get the variable\r\n                    var coeffs = __.coeffs(symbol, v);\r\n                    //factor the lead coefficient\r\n                    var cf = __.Factor._factor(coeffs[2].clone());\r\n                    //check if we have factors\r\n                    if(cf.group === CB) {\r\n                        var symbols = cf.collectSymbols();\r\n                        //if the factors are greater than 2 we're done so exit\r\n                        if(symbols.length > 2)\r\n                            return symbol; \r\n                        //if we have two factors then attempt to factor the polynomial\r\n                        //let the factors be f1 and f1\r\n                        //let the factors be (ax+b)(cx+d)\r\n                        //let the coefficients be c1x^2+c2x+c3\r\n                        //then a(x1)+c(x2)=c2 and x1*x2=c3\r\n                        //we can solve for x1 and x2\r\n                        var c = _.multiply(_.parse(coeffs[0]), _.parse(symbols[0]));\r\n                        var b = _.parse(coeffs[1]).negate();\r\n                        var a = _.parse(symbols[1]);\r\n                        //solve the system\r\n                        var root = __.quad(a, b, c).filter(function(x) {\r\n                            if(core.Utils.isInt(x))\r\n                                return x;\r\n                        });\r\n                        //if we have one root then find the other one by dividing the constant\r\n                        if(root.length === 1) {\r\n                            var root1 = root[0];\r\n                            var root2 = _.divide(coeffs[0], _.parse(root1));\r\n                            if(core.Utils.isInt(root2)) {\r\n                                //we found them both\r\n                                factors.add(_.parse(format('({0})*({1})+({2})', symbols[1], v, root2)));\r\n                                factors.add(_.parse(format('({0})*({1})+({2})', symbols[0], v, root1)));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return symbol;    \r\n            },\r\n            _factor: function(symbol, factors) {\r\n                //some items cannot be factored any further so return those right away\r\n                if(symbol.group === FN) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.group === S && arg.isSimple())\r\n                        return symbol;\r\n                }\r\n                else if(symbol.group === S && symbol.isSimple())\r\n                    return symbol;\r\n                \r\n                //expand the symbol to get it in a predictable form. If this step\r\n                //is skipped some factors are missed.\r\n                if(symbol.group === CP) {\r\n                    symbol.distributeMultiplier();\r\n                    var t = new Symbol(0);\r\n                    symbol.each(function(x) {\r\n                        if((x.group === CP && x.power.greaterThan(1) || x.group === CB))\r\n                            x = _.expand(x);\r\n                        t = _.add(t, x);\r\n                    });\r\n                    t.power = symbol.power;\r\n                    \r\n                    symbol = t;\r\n                }\r\n                \r\n                if(symbol.group === FN && symbol.fname !== 'sqrt')\r\n                    symbol = core.Utils.evaluate(symbol);\r\n                //make a copy of the symbol to return if something goes wrong\r\n                var untouched = symbol.clone();\r\n                try {\r\n                    if(symbol.group === CB) { \r\n                        var den_array, num_array, den, num, dfact, nfact;\r\n                        //grab the denominator and strip the multiplier and power. Store them in an array\r\n                        den_array = __.Simplify.strip(symbol.getDenom());\r\n                        num_array = __.Simplify.strip(symbol.getNum());\r\n                        den = den_array.pop();\r\n                        num = num_array.pop();\r\n\r\n                        //if the numerator equals the symbol then we've hit the simplest form and then we're done\r\n                        if(num.equals(symbol))\r\n                            return symbol;\r\n                        nfact = __.Factor.factor(num);\r\n                        dfact = __.Factor.factor(den);\r\n                        var n = __.Simplify.unstrip(num_array, nfact);\r\n                        var d = __.Simplify.unstrip(den_array, dfact);\r\n                        var retval = _.divide(n, d);\r\n                        return retval;\r\n                    }\r\n                    if(symbol.group === S) \r\n                        return symbol; //absolutely nothing to do\r\n\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol.equals(1))\r\n                            return symbol.clone();\r\n                        var ret = core.Math2.factor(symbol);\r\n                        return ret;\r\n                    }\r\n\r\n                    var p = symbol.power.clone();\r\n                    \r\n                    if(isInt(p) && !(p.lessThan(0) && symbol.group === FN)) { \r\n                        var sign = p.sign();\r\n                        symbol.toLinear();\r\n                        factors = factors || new Factors();\r\n                        var map = {};\r\n                        symbol = _.parse(core.Utils.subFunctions(symbol, map));\r\n                        if(keys(map).length > 0) { //it might have functions\r\n                            factors.preAdd = function(factor) {\r\n                                var ret = _.parse(factor, core.Utils.getFunctionsSubs(map));\r\n                                return ret;\r\n                            };\r\n                        }\r\n\r\n                        //strip the power\r\n                        if(!symbol.isLinear()) {\r\n                            factors.pFactor = symbol.power.toString();\r\n                            symbol.toLinear();\r\n                        } \r\n                        \r\n                        var vars = variables(symbol);\r\n                        //bypass for imaginary. TODO: find a better solution\r\n                        if(symbol.isImaginary()) {\r\n                            vars.push(core.Settings.IMAGINARY);\r\n                        }\r\n                        var multiVar = vars.length > 1;\r\n                        \r\n                        //minor optimization. Seems to cut factor time by half in some cases.\r\n                        if(multiVar) { \r\n                            var all_S = true, all_unit = true;\r\n                            symbol.each(function(x) {\r\n                                if(x.group !== S) all_S = false;\r\n                                if(!x.multiplier.equals(1)) all_unit = false;\r\n                            });       \r\n                            if(all_S && all_unit) {\r\n                                return _.pow(_.parse(symbol, core.Utils.getFunctionsSubs(map)), _.parse(p));\r\n                            }\r\n                        }\r\n                        //factor the coefficients\r\n                        var coeff_factors = new Factors();\r\n                        \r\n                        symbol = __.Factor.coeffFactor(symbol, coeff_factors);\r\n                        \r\n                        coeff_factors.each(function(x) {\r\n                            if(sign < 0)\r\n                                x.invert();\r\n                            factors.add(x);\r\n                        });\r\n                        //factor the power\r\n                        var power_factors = new Factors();\r\n                        symbol = __.Factor.powerFactor(symbol, power_factors);  \r\n                        power_factors.each(function(x) {\r\n                            if(sign < 0)\r\n                                x.invert();\r\n                            factors.add(x);\r\n                        });\r\n                        \r\n                        if(!multiVar) { \r\n                            //pass in vars[0] for safety\r\n                            var v = vars[0];\r\n                            symbol = __.Factor.squareFree(symbol, factors, v);\r\n                            \r\n                            var t_factors = new Factors();\r\n                            symbol = __.Factor.trialAndError(symbol, t_factors, v);\r\n                            \r\n                            //generate a symbol based off the last factors\r\n                            var tf_symbol = t_factors.toSymbol();\r\n                            //if nothing was factored then return the factors\r\n                            if(tf_symbol.equals(untouched))\r\n                                return tf_symbol;\r\n                            for(var x in t_factors.factors) {\r\n                                //store the current factor in t_factor\r\n                                var t_factor = t_factors.factors[x];\r\n                                factors.add(_.pow(t_factor, _.parse(p)));\r\n                            }\r\n                            //if we still don't have a factor and it's quadratic then let's just do a quad factor\r\n                            if(symbol.equals(untouched))\r\n                                symbol = __.Factor.quadFactor(symbol, factors);\r\n                           \r\n                        }\r\n                        else {\r\n                            symbol = __.Factor.mfactor(symbol, factors);\r\n                            \r\n                            //put back the sign of power\r\n                            factors.each(function(x) {\r\n                                if(sign < 0)\r\n                                    x.power.negate();\r\n                            });\r\n                        }\r\n                        \r\n                        //last minute clean up\r\n                        symbol = _.parse(symbol, core.Utils.getFunctionsSubs(map));\r\n                        factors.add(_.pow(symbol, _.parse(p)));\r\n                        \r\n                        var retval = factors.toSymbol();\r\n                        return retval;\r\n                    }\r\n                    \r\n                    return symbol;    \r\n                }\r\n                catch(e) {\r\n                    //console.log(e);\r\n                    //no need to stop the show because something went wrong :). Just return the unfactored.\r\n                    return untouched;\r\n                }\r\n            },\r\n            reduce: function(symbol, factors) {\r\n                if(symbol.group === CP && symbol.length === 2) {\r\n                    var symbols = symbol.collectSymbols().sort(function(a, b) {\r\n                        return b.multiplier - a.multiplier;\r\n                    });\r\n                    if(symbols[0].power.equals(symbols[1].power)) {\r\n                        //x^n-a^n\r\n                        var n = _.parse(symbols[0].power),\r\n                            a = symbols[0].clone().toLinear(),\r\n                            b = symbols[1].clone().toLinear();\r\n                    \r\n                        //apply rule: (a-b)*sum(a^(n-i)*b^(i-1),1,n)\r\n                        factors.add(_.add(a.clone(), b.clone()));\r\n                        //flip the sign\r\n                        b.negate();\r\n                        //turn n into a number\r\n                        var nn = Number(n);\r\n                        //the remainder\r\n                        var result = new Symbol(0);\r\n                        for(var i=1; i<=nn; i++) {\r\n                            var aa = _.pow(a.clone(), _.subtract(n.clone(), new Symbol(i))),\r\n                                bb = _.pow(b.clone(), _.subtract(new Symbol(i), new Symbol(1)));\r\n                            result = _.add(result, _.multiply(aa, bb));\r\n                        }\r\n                        return result;\r\n                    }\r\n                }\r\n                return symbol;\r\n            },\r\n            /**\r\n             * Makes Symbol square free\r\n             * @param {Symbol} symbol\r\n             * @param {Factors} factors\r\n             * @@param {String} variable The variable which is being factored \r\n             * @returns {[Symbol, Factor]}\r\n             */\r\n            squareFree: function(symbol, factors, variable) {\r\n                if(symbol.isConstant() || symbol.group === S) return symbol;\r\n                var poly = new Polynomial(symbol, variable);\r\n                var sqfr = poly.squareFree();\r\n                var p = sqfr[2];\r\n                //if we found a square then the p entry in the array will be non-unit\r\n                if(p !== 1) {\r\n                    //make sure the remainder doesn't have factors\r\n                    var t = sqfr[1].toSymbol();\r\n                    t.power = t.power.multiply(new Frac(p));\r\n                    //send the factor to be fatored to be sure it's completely factored\r\n                    factors.add(__.Factor.factor(t));\r\n                    return __.Factor.squareFree(sqfr[0].toSymbol(), factors);\r\n                }\r\n                return symbol;\r\n            },\r\n            /**\r\n             * Factors the powers such that the lowest power is a constant\r\n             * @param {Symbol} symbol\r\n             * @param {Factors} factors\r\n             * @returns {[Symbol, Factor]}\r\n             */\r\n            powerFactor: function(symbol, factors) {\r\n                //only PL need apply\r\n                if(symbol.group !== PL || symbol.previousGroup === EX) \r\n                    return symbol; \r\n                var k = keys(symbol.symbols);\r\n                //we expect only numeric powers so return all else\r\n                if(!core.Utils.allNumeric(k))\r\n                    return symbol;\r\n                \r\n                var d = core.Utils.arrayMin(k);\r\n                var retval = new Symbol(0);\r\n                var q = _.parse(symbol.value+'^'+d);\r\n                symbol.each(function(x) {\r\n                    x = _.divide(x, q.clone());\r\n                    retval = _.add(retval, x);\r\n                });\r\n\r\n                factors.add(q);\r\n                return retval;\r\n            },\r\n            /**\r\n             * Removes GCD from coefficients\r\n             * @param {Symbol} symbol\r\n             * @param {Factor} factors\r\n             * @returns {Symbol}\r\n             */\r\n            coeffFactor: function(symbol, factors) {\r\n                if(symbol.isComposite()) {\r\n                    var gcd = core.Math2.QGCD.apply(null, symbol.coeffs());\r\n                    if(!gcd.equals(1)) { \r\n                        symbol.each(function(x) {\r\n                            if(x.isComposite()) {\r\n                                x.each(function(y){\r\n                                    y.multiplier = y.multiplier.divide(gcd);\r\n                                });\r\n                            }\r\n                            else x.multiplier = x.multiplier.divide(gcd);\r\n                        });\r\n                        \r\n                    }\r\n                    symbol.updateHash();\r\n                    if(factors) \r\n                        factors.add(new Symbol(gcd));\r\n                }\r\n                \r\n                return symbol;\r\n            },\r\n            /**\r\n             * The name says it all :)\r\n             * @param {Symbol} symbol\r\n             * @param {Factor} factors\r\n             * @@param {String} variable \r\n             * @returns {Symbol}\r\n             */\r\n            trialAndError: function(symbol, factors, variable) {\r\n                if(symbol.isConstant() || symbol.group === S) return symbol;\r\n                var poly = new Polynomial(symbol, variable),\r\n                    cnst = poly.coeffs[0],\r\n                    cfactors = core.Math2.ifactor(cnst),\r\n                    roots = __.proots(symbol);\r\n                for(var i=0; i<roots.length; i++) {\r\n                    var r = roots[i],\r\n                        p = 1;\r\n                    if(!isNaN(r)) { //if it's a number\r\n                        for(var x in cfactors) {\r\n                            //check it's raised to a power\r\n                            var n = core.Utils.round(Math.log(x)/Math.log(Math.abs(r)), 8);\r\n                            if(isInt(n)) {\r\n                                r = x; //x must be the root since n gave us a whole\r\n                                p = n; break;\r\n                            }\r\n                        }\r\n                        var root = new Frac(r),\r\n                            terms = [new Frac(root.num).negate()];\r\n                        terms[p] = new Frac(root.den);\r\n                            //convert to Frac. The den is coeff of LT and the num is coeff of constant\r\n                        var div = Polynomial.fromArray(terms, poly.variable).fill(),\r\n                            t = poly.divide(div);\r\n                        if(t[1].equalsNumber(0)) { //if it's zero we have a root and divide it out\r\n                            poly = t[0];\r\n                            factors.add(div.toSymbol());\r\n                        }\r\n                    }\r\n                }\r\n                if(!poly.equalsNumber(1)) {\r\n                    poly = __.Factor.search(poly, factors);\r\n                }\r\n\r\n                return poly.toSymbol();\r\n            },\r\n            search: function(poly, factors, base) {\r\n                base = base || 10; //I like 10 because numbers exhibit similar behaviours at 10\r\n                var v = poly.variable; //the polynmial variable name\r\n                /**\r\n                 * Attempt to remove a root by division given a number by first creating\r\n                 * a polynomial fromt he given information\r\n                 * @param {int} c1 - coeffient for the constant\r\n                 * @param {int} c2 - coefficient for the LT\r\n                 * @param {int} n - the number to be used to construct the polynomial\r\n                 * @param {int} p - the power at which to create the polynomial\r\n                 * @returns {null|Polynomial} - returns polynomial if successful otherwise null\r\n                 */\r\n                var check = function(c1, c2, n, p) {\r\n                    var candidate = Polynomial.fit(c1, c2, n, base, p, v);\r\n                    if(candidate && candidate.coeffs.length > 1) {\r\n                        var t = poly.divide(candidate);\r\n                        if(t[1].equalsNumber(0)) {\r\n                            factors.add(candidate.toSymbol());\r\n                            return [t[0], candidate];\r\n                        }\r\n                    }\r\n                    return null;\r\n                };\r\n                var cnst = poly.coeffs[0],\r\n                    cfactors = core.Math2.ifactor(cnst),\r\n                    lc = poly.lc(),\r\n                    ltfactors = core.Math2.ifactor(lc),\r\n                    subbed = poly.sub(base),\r\n                    nfactors = __.Factor.mix(core.Math2.ifactor(subbed), subbed < 0),\r\n                    cp = Math.ceil(poly.coeffs.length/2),\r\n                    lc_is_neg = lc.lessThan(0),\r\n                    cnst_is_neg = cnst.lessThan(0);\r\n                ltfactors['1'] = 1;\r\n                cfactors['1'] = 1;\r\n                while(cp--) {\r\n                    for(var x in ltfactors) {\r\n                        for(var y in cfactors) {\r\n                            for(var i=0; i<nfactors.length; i++) {\r\n                                var factor_found = check(x, y, nfactors[i], cp);\r\n                                if(factor_found) {\r\n                                    poly = factor_found[0];\r\n                                    if(!core.Utils.isPrime(poly.sub(base)))\r\n                                        poly = __.Factor.search(poly, factors);\r\n                                    return poly;\r\n                                }\r\n                                else if(!factor_found) {\r\n                                    if(lc_is_neg && cnst_is_neg)\r\n                                        factor_found = check(-x, -y, nfactors[i], cp);\r\n                                    else if(lc_is_neg) \r\n                                        factor_found = check(-x, y, nfactors[i], cp); //check a negative lc\r\n                                    else if(cnst_is_neg) \r\n                                        factor_found = check(x, -y, nfactors[i], cp); //check a negative constant\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return poly;\r\n            },\r\n            /**\r\n             * Equivalent of square free factor for multivariate polynomials\r\n             * @param {type} symbol\r\n             * @param {type} factors\r\n             * @returns {AlgebraL#18.Factor.mSqfrFactor.symbol|Array|AlgebraL#18.__.Factor.mSqfrFactor.d}\r\n             */\r\n            mSqfrFactor: function(symbol, factors) {\r\n                if(symbol.group !== FN) {\r\n                    var vars = variables(symbol).reverse();\r\n                    for(var i=0; i<vars.length; i++) {\r\n                        do {\r\n                            if(vars[i] === symbol.value){\r\n                                //the derivative tells us nothing since this symbol is already the factor\r\n                                factors.add(symbol);\r\n                                symbol = new Symbol(1);\r\n                                continue;\r\n                            }\r\n                            var diff = core.Calculus.diff(symbol, vars[i]);\r\n                            var d = __.Factor.coeffFactor(diff);\r\n\r\n                            if(d.equals(0)) \r\n                                break;\r\n                            \r\n                            //trial division to see if factors have whole numbers. \r\n                            //This can be optimized by stopping as soon as can_divide is false\r\n                            //this will also need utilize big number at some point\r\n                            var can_divide = true;\r\n                            if(d.isConstant() && symbol.isComposite()) {\r\n                                //check the coefficients\r\n                                \r\n                                symbol.each(function(x) {\r\n                                    if(x.multiplier % d !== 0)\r\n                                        can_divide = false;\r\n                                }, true);\r\n                            }\r\n                            \r\n                            //if we can divide then do so\r\n                            if(can_divide) {\r\n                                var div = __.div(symbol, d.clone()),\r\n                                is_factor = div[1].equals(0);\r\n\r\n                                if(div[0].isConstant()) {\r\n                                    factors.add(div[0]);\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else\r\n                                is_factor = false;\r\n                                \r\n                            if(is_factor) {\r\n                                factors.add(div[0]);\r\n                                symbol = d;\r\n                            }\r\n                        }\r\n                        while(is_factor)\r\n                    }\r\n                }\r\n                \r\n                return symbol;\r\n            },\r\n            //difference of squares factorization\r\n            sqdiff: function(symbol, factors) { \r\n                try {\r\n                    var remove_square = function(x) {\r\n                        return core.Utils.block('POSITIVE_MULTIPLIERS', function() {\r\n                            return Symbol.unwrapPARENS(math.sqrt(math.abs(x)));\r\n                        }, true);\r\n                    }; \r\n                    var separated = core.Utils.separate(symbol.clone());\r\n                    var obj_array = [];\r\n                    //get the unique variables\r\n                    for(var x in separated) {\r\n                        if(x !== 'constants') {\r\n                            obj_array.push(separated[x]);\r\n                        }\r\n                    }\r\n                    obj_array.sort(function(a, b) {\r\n                        return b.power - a.power;\r\n                    });\r\n\r\n                    //if we have the same number of variables as unique variables then we can apply the difference of squares\r\n                    if(obj_array.length === 2) { \r\n                        var a, b;\r\n                        a = obj_array.pop();\r\n                        b = obj_array.pop();\r\n                        if(a.isComposite() && b.power.equals(2)) {\r\n                            //remove the square from b\r\n                            b = remove_square(b);\r\n                            var f = __.Factor.factor(_.add(a, separated.constants));\r\n                            if(f.power.equals(2)) {\r\n                                f.toLinear();\r\n                                factors.add(_.subtract(f.clone(), b.clone()));\r\n                                factors.add(_.add(f, b));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                        else {\r\n                            a = a.powSimp();\r\n                            b = b.powSimp();\r\n                            \r\n                            if((a.group === S || a.fname === '') && a.power.equals(2) && (b.group === S || b.fname === '') && b.power.equals(2)) {\r\n                                if(a.multiplier.lessThan(0)) {\r\n                                    var t = b; b = a; a = t;\r\n                                }\r\n                                if(a.multiplier.greaterThan(0)) {\r\n                                    a = remove_square(a);\r\n                                    b = remove_square(b);\r\n                                }\r\n                                factors.add(_.subtract(a.clone(), b.clone()));\r\n                                factors.add(_.add(a, b));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch(e){;}\r\n                \r\n                return symbol;\r\n            },\r\n            //factoring for multivariate\r\n            mfactor: function(symbol, factors) {  \r\n                \r\n                if(symbol.group === FN) { \r\n                    if(symbol.fname === 'sqrt') {\r\n                        var factors2 = new Factors(),\r\n                            arg = __.Factor.common(symbol.args[0].clone(), factors2);\r\n                        arg = __.Factor.coeffFactor(arg, factors2);\r\n                        symbol = _.multiply(_.symfunction('sqrt', [arg]), _.parse(symbol.multiplier));\r\n                        factors2.each(function(x) {\r\n                            symbol = _.multiply(symbol, _.parse(core.Utils.format('sqrt({0})', x)));\r\n                        });\r\n                    }\r\n                    else\r\n                        factors.add(symbol);\r\n                    \r\n                }\r\n                else { \r\n                    //square free factorization\r\n                    symbol = __.Factor.mSqfrFactor(symbol, factors);\r\n                    \r\n                    //try factor out common factors\r\n                    //symbol = __.Factor.common(symbol, factors);\r\n                    \r\n                    var vars = variables(symbol),\r\n                        symbols = symbol.collectSymbols().map(function(x) {\r\n                            return Symbol.unwrapSQRT(x);\r\n                        }),\r\n                        sorted = {},\r\n                        maxes = {},\r\n                        l = vars.length, n = symbols.length;\r\n                    //take all the variables in the symbol and organize by variable name\r\n                    //e.g. a^2+a^2+b*a -> {a: {a^3, a^2, b*a}, b: {b*a}}\r\n                    \r\n                    for(var i=0; i<l; i++) {\r\n                        var v = vars[i];\r\n                        sorted[v] = new Symbol(0);\r\n                        for(var j=0; j<n; j++) {\r\n                            var s = symbols[j];\r\n                            if(s.contains(v)) {\r\n                                var p = s.value === v ? s.power.toDecimal() : s.symbols[v].power.toDecimal();\r\n                                if(!maxes[v] || p < maxes[v]) maxes[v] = p;\r\n                                sorted[v] = _.add(sorted[v], s.clone());\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    for(var x in sorted) {\r\n                        var r = _.parse(x+'^'+maxes[x]); \r\n                        var div = _.divide(sorted[x], r);\r\n                        var new_factor = _.expand(div); \r\n                        \r\n                        if(new_factor.equals(1))\r\n                            break; //why divide by one. Just move \r\n                        var divided = __.div(symbol.clone(), new_factor); \r\n                        if(divided[0].equals(0)) { \r\n                            //cant factor anymore\r\n                            break;\r\n                        }\r\n                        \r\n                        var neg_numeric_factor = isInt(new_factor) && new_factor.lessThan(0);\r\n                        \r\n                        if(divided[1].equals(0) && !neg_numeric_factor) { //we found at least one factor\r\n                            \r\n                            //factors.add(new_factor);\r\n                            var d = __.div(symbol.clone(), divided[0].clone());\r\n                            var r = d[0];\r\n                            symbol = d[1];\r\n                            //we don't want to just flip the sign. If the remainder is -1 then we accomplished nothing\r\n                            //and we just return the symbol;\r\n                            //If r equals zero then there's nothing left to do so we're done\r\n                            \r\n                            if(r.equals(-1) && !symbol.equals(0))\r\n                                return symbol;\r\n\r\n                            var factor = divided[0]; \r\n                            if(symbol.equals(factor)) {\r\n                                var rem = __.Factor.reduce(factor, factors);\r\n                                \r\n                                if(!symbol.equals(rem)) \r\n                                    return __.Factor.mfactor(rem, factors);\r\n                            }\r\n                            else {\r\n                                factors.add(factor); \r\n                                //if the remainder of the symbol is zero then we're done. TODO: Rethink this logic a bit.\r\n                                if(symbol.equals(0))\r\n                                    return r;\r\n                            }\r\n                            \r\n                            if(r.isConstant('all')) { \r\n                                factors.add(r);\r\n                                return r;\r\n                            }\r\n                            \r\n                            return __.Factor.mfactor(r, factors);\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n                \r\n                //difference of squares factorization\r\n                symbol = __.Factor.sqdiff(symbol, factors);\r\n                //factors by fishing for zeroes\r\n                symbol = __.Factor.zeroes(symbol, factors);\r\n                \r\n                return symbol;\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a set of \"equations\" is linear. \r\n         * @param {type} set\r\n         * @returns {Boolean}\r\n         */\r\n        allLinear: function(set) {\r\n            var l = set.length;\r\n            for(var i=0; i<l; i++) {\r\n                if(!__.isLinear(set[i])) return false;\r\n            }\r\n            return true;\r\n        },\r\n        /*\r\n         * Checks to see if the \"equation\" is linear\r\n         * @param {Symbol} e\r\n         * @returns {boolean}\r\n         */\r\n        isLinear: function(e) {\r\n            var status = false, g = e.group;\r\n            if(g === PL || g === CP) {\r\n                status = true;\r\n                for(var s in e.symbols) {\r\n                    var symbol = e.symbols[s], sg = symbol.group;\r\n                    if(sg === FN || sg === EX) { \r\n                        status = false;\r\n                    }\r\n                    if(sg === CB) {\r\n                        //needs further checking since it might be imaginary\r\n                        status = variables(symbol).length === 1;\r\n                    }\r\n                    else {\r\n                        if(sg === PL || sg === CP) status = __.isLinear(symbol);\r\n                        else {\r\n                            if(symbol.group !== N && symbol.power.toString() !== '1') { status = false; break; }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if(g === S && e.power === 1) status = true;\r\n            return status;\r\n        },\r\n        gcd: function() {\r\n            var args;\r\n            if(arguments.length === 1 && arguments[0] instanceof core.Vector)\r\n                args = arguments[0].elements;\r\n            else args = core.Utils.arguments2Array(arguments);\r\n            \r\n            //short-circuit early\r\n            if (args.length === 0) \r\n                return new Symbol(1);\r\n            else if (args.length === 1) \r\n                return args[0];\r\n            \r\n            var appeared = [], evaluate = false;\r\n            for(var i = 0; i < args.length; i++) {\r\n                if(args[i].group === FN && args[i].fname === 'gcd')\r\n                {\r\n                    //compress gcd(a,gcd(b,c)) into gcd(a,b,c)\r\n                    args = args.concat(arguments[i].args);\r\n                    //do not keep gcd in args\r\n                    args.splice(i, 1);\r\n                }\r\n                else\r\n                {\r\n                    //Look if there are any common variables such that\r\n                    //gcd(a,b) => gcd(a,b); gcd(a,a) => a\r\n                    var vars = variables(args[i]);\r\n                    if(core.Utils.haveIntersection(vars, appeared))\r\n                    {\r\n                        //Ok, there are common variables\r\n                        evaluate = true;\r\n                        break;\r\n                    }\r\n                    else appeared = appeared.concat(vars);\r\n                }\r\n            }\r\n            \r\n            //appeared.length is 0 when all arguments are group N\r\n            if (evaluate || appeared.length === 0) {\r\n                //TODO: distribute exponent so that (a^-1*b^-1)^-1 => a*b\r\n                if(args.every(function(symbol){return symbol.getDenom().equals(1)})) {\r\n                    var aggregate = args[0];\r\n                    \r\n                    for(var i = 1; i < args.length; i++) {\r\n                        aggregate = __.gcd_(args[i], aggregate);\r\n                    }\r\n                    return aggregate;\r\n                }\r\n                else {\r\n                    //gcd_ cannot handle denominators correctly\r\n                    return _.divide(__.gcd.apply(null, args.map(function(symbol){return symbol.getNum(); })),\r\n                                    __.lcm.apply(null, args.map(function(symbol){return symbol.getDenom(); })));\r\n                }\r\n            }\r\n            else return _.symfunction('gcd', args);\r\n        },\r\n        gcd_: function(a, b) { \r\n            if(a.group === FN || a.group === P)\r\n                a = core.Utils.block('PARSE2NUMBER', function() {\r\n                   return _.parse(a); \r\n                });\r\n\t\t\r\n            if(b.group === FN)\r\n                b = core.Utils.block('PARSE2NUMBER', function() {\r\n                   return _.parse(b); \r\n                });\r\n\t\t\r\n            if(a.isConstant() && b.isConstant()) { \r\n                // return core.Math2.QGCD(new Frac(+a), new Frac(+b));\r\n                return new Symbol(core.Math2.QGCD(new Frac(+a), new Frac(+b)));\r\n            }\r\n\r\n            var den = _.multiply(a.getDenom() || new Symbol(1), b.getDenom() || new Symbol(1)).invert();\r\n            a = _.multiply(a.clone(), den.clone());\r\n            b = _.multiply(b.clone(), den.clone());\r\n\t\t\r\n            //feels counter intuitive but it works. Issue #123 (nerdamer(\"gcd(x+y,(x+y)^2)\"))\r\n            a = _.expand(a);\r\n            b = _.expand(b);\r\n\r\n            if(a.group === CB || b.group === CB) {\r\n                var q = _.divide(a.clone(), b.clone()); //get the quotient\r\n                var t = _.multiply(b.clone(), q.getDenom().invert());//multiply by the denominator\r\n                //if they have a common factor then the result will not equal one \r\n                if(!t.equals(1))\r\n                    return t;\r\n            }\r\n            \r\n            //just take the gcd of each component when either of them is in group EX\r\n            if(a.group === EX || b.group === EX)\r\n            {\r\n                var gcd_m = new Symbol(core.Math2.GCD(a.multiplier, b.multiplier));\r\n                var gcd_v = __.gcd_(a.value === CONST_HASH ? new Symbol(1) : _.parse(a.value), b.value === CONST_HASH ? new Symbol(1) : _.parse(b.value));\r\n                var gcd_p = __.gcd_(_.parse(a.power), _.parse(b.power));\r\n                return _.multiply(gcd_m, _.pow(gcd_v, gcd_p));\r\n            }\r\n            \t\t  \r\n            if(a.length < b.length) { //swap'm\r\n                var t = a; a = b; b = t;\r\n            }\r\n            var vars_a = variables(a), vars_b = variables(b);\r\n            if((vars_a.length === vars_b.length && vars_a.length === 1 && vars_a[0] === vars_b[0]) \r\n                    || vars_a.length === 1 && vars_b.length === 0 \r\n                    || vars_a.length === 0 && vars_b.length === 1) {\r\n                a = new Polynomial(a); b = new Polynomial(b);\r\n                return _.divide(a.gcd(b).toSymbol(), den);\r\n            }\r\n            else { \r\n                //get the gcd of the multipiers\r\n                //get rid of gcd in coeffs\r\n                var multipliers = [];\r\n                a.each(function(x) {\r\n                    multipliers.push(x.multiplier);\r\n                });\r\n                b.each(function(x) {\r\n                    multipliers.push(x.multiplier);\r\n                });\r\n                \r\n                var T;\r\n                while(!b.equals(0)) {  \r\n                    var t = b.clone(); \r\n                    a = a.clone(); \r\n                    T = __.div(a, t);\r\n                    \r\n                    b = T[1]; \r\n                    if(T[0].equals(0)) {\r\n                        //return _.multiply(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), b);\r\n                        return _.divide(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), den);\r\n                    }\r\n                    a = t; \r\n                }\r\n                \r\n                var gcd = core.Math2.QGCD.apply(undefined, multipliers);\r\n\r\n                if(!gcd.equals(1)) {\r\n                    a.each(function(x) {\r\n                        x.multiplier = x.multiplier.divide(gcd);\r\n                    });\r\n                }\r\n                \r\n                //return symbolic function for gcd in indeterminate form\r\n                if(a.equals(1) && !a.isConstant() && !b.isConstant())\r\n                    return _.divide(_.symfunction('gcd', arguments), den);\r\n                \r\n                return _.divide(a, den);\r\n            }\r\n        },\r\n        lcm: function() { \r\n            //https://math.stackexchange.com/a/319310\r\n            //generalization of the 2-variable formula of lcm\r\n            \r\n            var args;\r\n            if(arguments.length === 1)\r\n                if (arguments[0] instanceof core.Vector) args = arguments[0].elements;\r\n                else _.error('lcm expects either 1 vector or 2 or more arguments');\r\n            else args = core.Utils.arguments2Array(arguments);\r\n\r\n            //product of all arguments\r\n            //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\r\n            var numer = args.reduce(function(prev,curr){return _.multiply(prev, curr.clone())}, new Symbol(1));\r\n            \r\n            //gcd of complementary terms\r\n            var denom_args = \r\n                //https://stackoverflow.com/a/18223072\r\n                //take all complementary terms, e.g.\r\n                //[a,b,c] => [a*b, b*c, a*c]\r\n                //[a,b,c,d] => [a*b*c, a*b*d, a*c*d, b*c*d]\r\n                (function(input, size) {\r\n                    var results = [], result, mask, i, total = Math.pow(2, input.length);\r\n                    for (mask = size; mask < total; mask++) {\r\n                        result = [];\r\n                        i = input.length - 1;\r\n\r\n                        do {\r\n                            if ((mask & (1 << i)) !== 0) {\r\n                                result.push(input[i]);\r\n                            }\r\n                        } while (i--);\r\n\r\n                        if (result.length == size) {\r\n                        results.push(result);\r\n                    }\r\n                }\r\n                return results; \r\n                //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\r\n            })(arguments,arguments.length-1).map(function(x){return x.reduce(function(prev,curr){return _.multiply(prev,curr.clone())},new Symbol(1))});\r\n             \r\n            //don't eat the gcd term if all arguments are symbols\r\n            if(args.every(function(x){return core.Utils.isVariableSymbol(x)}))\r\n                var denom = _.symfunction('gcd', core.Utils.arrayUnique(denom_args));\r\n            else\r\n                var denom = __.gcd.apply(null, denom_args);\r\n            \r\n            //divide product of all arguments by gcd of complementary terms\r\n            return _.divide(numer, denom);\r\n        },\r\n        /**\r\n         * Divides one expression by another\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Array}\r\n         */\r\n        divide: function(symbol1, symbol2) {\r\n            var result, remainder, factored, den;\r\n            factored = core.Algebra.Factor.factor(symbol1.clone());\r\n            den = factored.getDenom();\r\n            if(!den.isConstant('all')) {\r\n                symbol1 = _.expand(Symbol.unwrapPARENS(_.multiply(factored, den.clone())));\r\n            }\r\n            else\r\n                //reset the denominator since we're not dividing by it anymore\r\n                den = new Symbol(1); \r\n            result = __.div(symbol1, symbol2);\r\n            remainder = _.divide(result[1], symbol2);\r\n            return _.divide(_.add(result[0], remainder), den);\r\n        },\r\n        div: function(symbol1, symbol2) {\r\n            //division by constants\r\n            if(symbol2.isConstant()) {\r\n                symbol1.each(function(x) { \r\n                    x.multiplier = x.multiplier.divide(symbol2.multiplier);\r\n                });\r\n                return [symbol1, new Symbol(0)];\r\n            }\r\n            //so that factorized symbols don't affect the result\r\n\t    symbol1 = _.expand(symbol1);\r\n\t    symbol2 = _.expand(symbol2);\r\n            //special case. May need revisiting\r\n            if(symbol1.group === S && symbol2.group === CP) { \r\n                var x = symbol1.value;\r\n                var f = core.Utils.decompose_fn(symbol2.clone(), x, true);\r\n                if(symbol1.isLinear() && f.x && f.x.isLinear() && symbol2.isLinear()) {\r\n                    var k = Symbol.create(symbol1.multiplier);\r\n                    return [_.divide(k.clone(), f.a.clone()), _.divide(_.multiply(k, f.b), f.a).negate()];\r\n                }\r\n            }\r\n            if(symbol1.group === S && symbol2.group === S) {\r\n                var r = _.divide(symbol1.clone(), symbol2.clone());\r\n                if(r.isConstant()) //we have a whole\r\n                    return [r, new Symbol(0)];\r\n                return [new Symbol(0), symbol1.clone()];\r\n            }\r\n            var symbol1_has_func = symbol1.hasFunc(),\r\n                symbol2_has_func = symbol2.hasFunc(),\r\n                parse_funcs = false;\r\n            \r\n            //substitute out functions so we can treat them as regular variables\r\n            if(symbol1_has_func || symbol2_has_func) {\r\n                parse_funcs = true;\r\n                var map = {},\r\n                    symbol1 = _.parse(core.Utils.subFunctions(symbol1, map)),\r\n                    symbol2 = _.parse(core.Utils.subFunctions(symbol2, map)),\r\n                    subs = core.Utils.getFunctionsSubs(map);\r\n            }\r\n            //get a list of the variables\r\n            var vars = core.Utils.arrayUnique(variables(symbol1).concat(variables(symbol2))),\r\n                quot, rem;\r\n        \r\n            //treat imaginary numbers as variables\r\n            if(symbol1.isImaginary() || symbol2.isImaginary()) {\r\n                vars.push(core.Settings.IMAGINARY);\r\n            }\r\n            \r\n            if(vars.length === 1) { \r\n                var q = new Polynomial(symbol1).divide(new Polynomial(symbol2));\r\n                quot = q[0].toSymbol();\r\n                rem = q[1].toSymbol();\r\n            }\r\n            else {\r\n                vars.push(CONST_HASH); //this is for the numbers\r\n                var reconvert = function(arr) {\r\n                    var symbol = new Symbol(0);\r\n                    for(var i=0; i<arr.length; i++) {\r\n                        var x = arr[i].toSymbol();\r\n                        symbol = _.add(symbol, x);\r\n                    }\r\n                    return symbol;\r\n                };\r\n                //Silly Martin. This is why you document. I don't remember now\r\n                var get_unique_max = function(term, any) {\r\n                    var max = Math.max.apply(null, term.terms),\r\n                        count = 0, idx;\r\n\r\n                    if(!any) {\r\n                        for(var i=0; i<term.terms.length; i++) {\r\n                            if(term.terms[i].equals(max)) {\r\n                                idx = i; count++;\r\n                            }\r\n                            if(count > 1) return;\r\n                        }\r\n                    }\r\n                    if(any) {\r\n                        for(i=0; i<term.terms.length; i++) \r\n                            if(term.terms[i].equals(max)) {\r\n                                idx = i; break;\r\n                            }\r\n                    }\r\n                    return [max, idx, term];\r\n                };\r\n                //tries to find an LT in the dividend that will satisfy division\r\n                var get_det = function(s, lookat) { \r\n                    lookat = lookat || 0;\r\n                    var det = s[lookat], l = s.length; \r\n                    if(!det) return;\r\n                    //eliminate the first term if it doesn't apply\r\n                    var umax = get_unique_max(det); \r\n                    for(var i=lookat+1; i<l; i++) {\r\n                        var term = s[i],   \r\n                            is_equal = det.sum.equals(term.sum);\r\n                        if(!is_equal && umax) { \r\n                            break;\r\n                        } \r\n                        if(is_equal) {\r\n                            //check the differences of their maxes. The one with the biggest difference governs\r\n                            //e.g. x^2*y^3 vs x^2*y^3 is unclear but this isn't the case in x*y and x^2\r\n                            var max1, max2, idx1, idx2, l2 = det.terms.length;\r\n                            for(var j=0; j<l2; j++) {\r\n                                var item1 = det.terms[j], item2 = term.terms[j];\r\n                                if(typeof max1 === 'undefined' || item1.greaterThan(max1)) {\r\n                                    max1 = item1; idx1 = j;\r\n                                }\r\n                                if(typeof max2 === 'undefined' || item2.greaterThan(max2)) {\r\n                                    max2 = item2; idx2 = j;\r\n                                }\r\n                            }\r\n                            //check their differences\r\n                            var d1 = max1.subtract(term.terms[idx1]),\r\n                                d2 = max2.subtract(det.terms[idx2]);\r\n                            if(d2 > d1) {\r\n                                umax = [max2, idx2, term];\r\n                                break;\r\n                            }\r\n                            if(d1 > d2) {\r\n                                umax = [max1, idx1, det];\r\n                                break;\r\n                            }\r\n                        }\r\n                        else { \r\n                            //check if it's a suitable pick to determine the order\r\n                            umax = get_unique_max(term); \r\n                            //if(umax) return umax;\r\n                            if(umax) break;\r\n                        }\r\n                        umax = get_unique_max(term); //calculate a new unique max\r\n                    }\r\n\r\n                    //if still no umax then any will do since we have a tie\r\n                    if(!umax) return get_unique_max(s[0], true);\r\n                    var e, idx;\r\n                    for(var i=0; i<s2.length; i++) {\r\n                        var cterm = s2[i].terms;\r\n                        //confirm that this is a good match for the denominator\r\n                        idx = umax[1];\r\n                        if(idx === cterm.length - 1) return ;\r\n                        e = cterm[idx]; \r\n                        if(!e.equals(0)) break;\r\n                    }\r\n                    if(e.equals(0)) return get_det(s, ++lookat); //look at the next term\r\n\r\n                    return umax;\r\n                };\r\n\r\n                var t_map = core.Utils.toMapObj(vars);\r\n                var init_sort = function(a, b) {\r\n                    return b.sum.subtract(a.sum);\r\n                };\r\n                var is_larger = function(a, b) { \r\n                    if(!a || !b) return false; //it's empty so...\r\n                    for(var i=0; i<a.terms.length; i++) {\r\n                        if(a.terms[i].lessThan(b.terms[i])) return false;\r\n                    }\r\n                    return true;\r\n                };\r\n                var s1 = symbol1.tBase(t_map).sort(init_sort),\r\n                    s2 = symbol2.tBase(t_map).sort(init_sort);\r\n                var target = is_larger(s1[0], s2[0]) && s1[0].count > s2[0].count ? s2 : s1; //since the num is already larger than we can get the det from denom\r\n                var det = get_det(target);//we'll begin by assuming that this will let us know which term \r\n                var quotient = [];\r\n                if(det) {\r\n                    var lead_var = det[1];\r\n                    var can_divide = function(a, b) { \r\n                        if(a[0].sum.equals(b[0].sum)) return a.length >= b.length;\r\n                        return true;\r\n                    };\r\n\r\n                    var try_better_lead_var = function(s1, s2, lead_var) {\r\n                        var checked = [];\r\n                        for(var i=0; i<s1.length; i++) { \r\n                            var t = s1[i];\r\n                            for(var j=0; j<t.terms.length; j++) {\r\n                                var cf = checked[j], tt = t.terms[j];\r\n                                if(i === 0) checked[j] = tt; //add the terms for the first one\r\n                                else if(cf && !cf.equals(tt)) checked[j] = undefined;\r\n                            }\r\n                        }\r\n                        for(var i=0; i<checked.length; i++) {\r\n                            var t = checked[i];\r\n                            if(t && !t.equals(0)) return i;\r\n                        }\r\n                        return lead_var;\r\n                    };\r\n                    var sf = function(a, b){ \r\n                        var l1 = a.len(), l2 = b.len();\r\n                        var blv = b.terms[lead_var], alv = a.terms[lead_var];\r\n                        if(l2 > l1 && blv.greaterThan(alv)) return l2 - l1;\r\n                        return blv.subtract(alv); \r\n                    };\r\n\r\n                    //check to see if there's a better lead_var\r\n                    lead_var = try_better_lead_var(s1, s2, lead_var);\r\n                    //reorder both according to the max power\r\n                    s1.sort(sf); //sort them both according to the leading variable power\r\n                    s2.sort(sf);\r\n\r\n                    //try to adjust if den is larger\r\n                    var fdt = s2[0], fnt = s1[0];\r\n\r\n                    var den = new MVTerm(new Frac(1), [], fnt.map);\r\n                    if(fdt.sum.greaterThan(fnt.sum)&& fnt.len() > 1) {\r\n                        for(var i=0; i<fnt.terms.length; i++) {\r\n                            var d = fdt.terms[i].subtract(fnt.terms[i]);\r\n                            if(!d.equals(0)) {\r\n                                var nd = d.add(new Frac(1));\r\n                                den.terms[i] = d;\r\n                                for(var j=0; j<s1.length; j++) {\r\n                                    s1[j].terms[i] = s1[j].terms[i].add(nd);\r\n                                }\r\n                            }\r\n                            else den.terms[i] = new Frac(0);\r\n                        }\r\n                    }\r\n\r\n                    var dividend_larger = is_larger(s1[0], s2[0]);\r\n\r\n                    while(dividend_larger && can_divide(s1, s2)) {\r\n                        var q = s1[0].divide(s2[0]);\r\n\r\n                        quotient.push(q); //add what's divided to the quotient\r\n                        s1.shift();//the first one is guaranteed to be gone so remove from dividend\r\n                        for(var i=1; i<s2.length; i++) { //loop through the denominator\r\n                            var t = s2[i].multiply(q).generateImage(), \r\n                                l2 = s1.length;\r\n                            //if we're subtracting from 0\r\n                            if(l2 === 0) { \r\n                                t.coeff = t.coeff.neg();\r\n                                s1.push(t); \r\n                                s1.sort(sf);\r\n                            }\r\n\r\n                            for(var j=0; j<l2; j++) {\r\n                                var cur = s1[j];\r\n                                if(cur.getImg() === t.getImg()) {\r\n                                    cur.coeff = cur.coeff.subtract(t.coeff);\r\n                                    if(cur.coeff.equals(0)) {\r\n                                        core.Utils.remove(s1, j);\r\n                                        j--; //adjust the iterator\r\n                                    }\r\n                                    break;\r\n                                }\r\n                                if(j === l2 - 1) { \r\n                                    t.coeff = t.coeff.neg();\r\n                                    s1.push(t); \r\n                                    s1.sort(sf);\r\n                                }\r\n                            }\r\n                        }\r\n                        dividend_larger = is_larger(s1[0], s2[0]);\r\n\r\n                        if(!dividend_larger && s1.length >= s2.length) {\r\n                            //One more try since there might be a terms that is larger than the LT of the divisor\r\n                            for(var i=1; i<s1.length; i++) {\r\n                                dividend_larger = is_larger(s1[i], s2[0]);\r\n                                if(dividend_larger) {\r\n                                    //take it from its current position and move it to the front\r\n                                    s1.unshift(core.Utils.remove(s1, i)); \r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                quot = reconvert(quotient);\r\n                rem = reconvert(s1);\r\n\r\n                if(typeof den !== 'undefined') {\r\n                    den = den.toSymbol();\r\n                    quot = _.divide(quot, den.clone());\r\n                    rem = _.divide(rem, den);\r\n                }\r\n            }\r\n\r\n            //put back the functions\r\n            if(parse_funcs) {\r\n                quot = _.parse(quot.text(), subs);\r\n                rem = _.parse(rem.text(), subs);\r\n            }\r\n\r\n            return [quot, rem];\r\n        },\r\n        line: function(v1, v2, x) {\r\n            if(core.Utils.isArray(v1))\r\n                v1 = core.Utils.convertToVector(v1);\r\n            if(core.Utils.isArray(v2))\r\n                v2 = core.Utils.convertToVector(v2);\r\n            x = _.parse(x || 'x');\r\n            if(!core.Utils.isVector(v1)||!core.Utils.isVector(v2))\r\n                _.error('Line expects a vector! Received \"'+v1+'\" & \"'+v2+'\"');\r\n            var dx = _.subtract(v2.e(1).clone(), v1.e(1).clone()),\r\n                dy = _.subtract(v2.e(2).clone(), v1.e(2).clone()),\r\n                m = _.divide(dy, dx),\r\n                a = _.multiply(x, m.clone()),\r\n                b = _.multiply(v1.e(1).clone(),m);\r\n            return _.add(_.subtract(a, b), v1.e(2).clone());\r\n        },\r\n        PartFrac: {\r\n            createTemplate: function(den, denom_factors, f_array, v) {\r\n                //clean up the denominator function by factors so it reduces nicely\r\n                den = __.Factor.factor(den);\r\n                \r\n                //clean up factors. This is so inefficient but factors are wrapped in parens for safety\r\n                den.each(function(x, key) {\r\n                    if(x.group === FN && x.fname === '' && x.args[0].group === S) {\r\n                        var y = x.args[0];\r\n                        if(this.symbols) {\r\n                            delete this.symbols[key];\r\n                            this.symbols[y.value] = y;\r\n                        }\r\n                        else {\r\n                            den = x.args[0];\r\n                        }\r\n                    }\r\n                });\r\n\r\n                var factors, factors_vec, f, p, deg, degrees, m;\r\n                factors = denom_factors.collectFactors();\r\n                factors_vec = []; //a vector for the template\r\n                degrees = [];\r\n                m = new Symbol(1);\r\n\r\n                for(var i=0; i<factors.length; i++) { //loop through the factors\r\n                    var factor = Symbol.unwrapPARENS(factors[i]);\r\n                    //if in he for P^n where P is polynomial and n = integer\r\n                    if(factor.power.greaterThan(1)) { \r\n                        p = Number(factor.power);\r\n                        f = factor.clone().toLinear(); //remove the power so we have only the function\r\n                        deg = Number(__.degree(f, v)); //get the degree of f\r\n                        //expand the factor\r\n                        for(var j=0; j<p; j++){\r\n                            var efactor = _.pow(f.clone(), new Symbol(j+1));\r\n                            f_array.push(efactor.clone());\r\n                            var d = _.divide(den.clone(), efactor.clone());\r\n                            degrees.push(deg);\r\n                            factors_vec.push(d);\r\n                        }\r\n                    }\r\n                    /*\r\n                    Possible bug.\r\n                    Removed: causes 1/(20+24*x+4*x^2) to result in (-1/64)*(5+x)^(-1)+(1/64)*(1+x)^(-1)\r\n                    else if(factor.isConstant('all')) {\r\n                        m = _.multiply(m, factor);\r\n                    }\r\n                    */\r\n                    else {\r\n                        //get the degree of the factor so we tack it on tot he factor. This should probably be an array\r\n                        //but for now we note it on the symbol\r\n                        deg = Number(__.degree(factor, v)); \r\n                        f_array.push(factor);\r\n                        var d = _.divide(den.clone(), factor.clone());\r\n                        d = _.expand(Symbol.unwrapPARENS(d));\r\n                        degrees.push(deg);\r\n                        factors_vec.push(d);\r\n                    }\r\n                }\r\n                //put back the constant\r\n                f_array = f_array.map(function(x) {\r\n                    return _.multiply(x, m.clone());\r\n                });\r\n                return [f_array, factors_vec, degrees];\r\n            },\r\n            partfrac: function(symbol, v, as_array) { \r\n                var vars = variables(symbol);\r\n                v = v || _.parse(vars[0]); //make wrt optional and assume first variable\r\n                try {\r\n                    var num, den, factors, tfactors, ofactors, nterms, degrees,\r\n                        dterms, max, M, c, powers, div, r, factors_vec, ks,\r\n                        template, tfactors;\r\n                    num = _.expand(symbol.getNum());\r\n                    den = _.expand(symbol.getDenom().toUnitMultiplier());\r\n                    //move the entire multipier to the numerator\r\n                    num.multiplier = symbol.multiplier;\r\n                    //we only have a meaningful change if n factors > 1. This means that\r\n                    //the returned group will be a CB\r\n                    //collect the terms wrt the x\r\n                    nterms = num.groupTerms(v);\r\n                    //divide out wholes if top is larger\r\n                    if(Number(__.degree(num, v)) >= Number(__.degree(den, v))) {\r\n                        div = __.div(num.clone(), _.expand(den.clone()));\r\n                        r = div[0]; //remove the wholes\r\n                        num = div[1]; //work with the remainder\r\n                        nterms = num.groupTerms(v); //recalculate the nterms\r\n                    }\r\n                    else\r\n                        r = new Symbol(0);\r\n                    \r\n                    if(Number(__.degree(den, v)) === 1) {\r\n                        var q = _.divide(num, den);\r\n                        if(as_array)\r\n                            return [r, q];\r\n                        return _.add(r, q);\r\n                    }\r\n                    //first factor the denominator. This means that the strength of this\r\n                    //algorithm depends on how well we can factor the denominator. \r\n                    ofactors = __.Factor.factor(den);\r\n                    //create the template. This method will create the template for solving \r\n                    //the partial fractions. So given x/(x-1)^2 the template creates A/(x-1)+B/(x-1)^2\r\n                    template = __.PartFrac.createTemplate(den.clone(), ofactors, [], v);\r\n                    tfactors = template[0]; //grab the factors\r\n                    factors_vec = template[1]; //grab the factor vectors\r\n                    degrees = template[2]; //grab the degrees\r\n                    //make note of the powers of each term\r\n                    powers = [nterms.length];\r\n                    //create the dterms vector\r\n                    dterms = [];\r\n                    factors = [];\r\n                    ks = []; \r\n                    var factor, deg;\r\n                    factors_vec.map(function(x, idx) { \r\n                        factor = tfactors[idx];\r\n                        deg = degrees[idx];\r\n                        for(var i=0; i<deg; i++) {\r\n                            factors.push(factor.clone());\r\n                            var k = Symbol.create(v, i);\r\n                            var t = _.expand(_.multiply(x, k.clone())).groupTerms(v);\r\n                            //make a note of the power which corresponds to the length of the array\r\n                            var p = t.length;\r\n                            powers.push(p); \r\n                            dterms.push(t);\r\n                            ks.push(k.clone());\r\n                        }\r\n                    });\r\n                    //get the max power\r\n                    max = core.Utils.arrayMax(powers);\r\n\r\n                    //fill the holes and create a matrix\r\n                    c = new core.Matrix(core.Utils.fillHoles(nterms, max)).transpose();\r\n                    //for each of the factors we do the same\r\n                    M = new core.Matrix();\r\n                    for(var i=0; i<dterms.length; i++) {\r\n                        M.elements.push(core.Utils.fillHoles(dterms[i], max));\r\n                    }\r\n\r\n                    //solve the system of equations\r\n                    var partials = _.multiply(M.transpose().invert(), c);\r\n                    //the results are backwards to reverse it\r\n                    //partials.elements.reverse();\r\n                    //convert it all back\r\n                    var retval = as_array ? [r] : r;\r\n                    partials.each(function(e, i) {\r\n                        var term = _.multiply(ks[i],_.divide(e, factors[i]));\r\n                        if(as_array)\r\n                            retval.push(term);\r\n                        else \r\n                            retval = _.add(retval, term);\r\n                    });\r\n\r\n                    //done\r\n                    return retval;\r\n                }\r\n                catch(e){};\r\n\r\n                return symbol;\r\n            }\r\n        },\r\n        degree: function(symbol, v, o) { \r\n            o = o || {\r\n                nd: [], //numeric\r\n                sd: [], //symbolic\r\n                depth: 0 //call depth\r\n            };\r\n            \r\n            if(!v) {\r\n                var vars = variables(symbol);\r\n                //The user must specify the variable for multivariate\r\n                if(vars.length > 1)\r\n                    throw new Error('You must specify the variable for multivariate polynomials!');\r\n                //if it's empty then we're dealing with a constant\r\n                if(vars.length === 0)\r\n                    return new Symbol(0);\r\n                //assume the variable for univariate\r\n                v = _.parse(vars[0]);\r\n            }\r\n\r\n            //store the group\r\n            var g = symbol.group;\r\n            //we're going to trust the user and assume no EX. Calling isPoly \r\n            //would eliminate this but no sense in checking twice. \r\n            if(symbol.isComposite()) { \r\n                symbol = symbol.clone();\r\n                symbol.distributeExponent();\r\n                symbol.each(function(x) {\r\n                    o.depth++; //mark a depth increase\r\n                    __.degree(x, v, o);\r\n                    o.depth--; //we're back\r\n                });\r\n            }\r\n            else if(symbol.group === CB) {\r\n                symbol.each(function(x) {\r\n                    o.depth++;\r\n                    __.degree(x, v, o);\r\n                    o.depth++;\r\n                });\r\n            }\r\n            else if(g === EX && symbol.value === v.value) { \r\n                o.sd.push(symbol.power.clone());\r\n            }\r\n            else if(g === S && symbol.value === v.value){ \r\n                o.nd.push(_.parse(symbol.power));\r\n            }\r\n            else\r\n                o.nd.push(new Symbol(0));\r\n            \r\n            //get the max out of the array\r\n            var deg = o.nd.length > 0 ? core.Utils.arrayMax(o.nd) : undefined;\r\n            \r\n            if(o.depth === 0 && o.sd.length > 0) {\r\n                if(deg !== undefined)\r\n                    o.sd.unshift(deg);\r\n                return _.symfunction('max', o.sd);\r\n            }\r\n            if(!core.Utils.isSymbol(deg))\r\n                deg = _.parse(deg);\r\n            //return the degree\r\n            return deg;\r\n        },\r\n        /**\r\n         * Attempts to complete the square of a polynomial\r\n         * @param {type} symbol\r\n         * @param {type} v\r\n         * @param {type} raw\r\n         * @throws {Error} \r\n         * @returns {Object|Symbol[]}\r\n         */\r\n        sqComplete: function(symbol, v, raw) {\r\n            if(!core.Utils.isSymbol(v))\r\n                v = _.parse(v);\r\n            var stop = function(msg) {\r\n                msg = msg || 'Stopping';\r\n                throw new core.exceptions.ValueLimitExceededError(msg);\r\n            };\r\n            //if not CP then nothing to do\r\n            if(!symbol.isPoly()) \r\n                stop('Must be a polynomial!');\r\n            //declare vars\r\n            var deg, a, b, c, d, e, coeffs, sign, br, sym, sqrt_a;\r\n\r\n            br = core.Utils.inBrackets;\r\n            //make a copy\r\n            symbol = symbol.clone();\r\n            deg = core.Algebra.degree(symbol, v); //get the degree of polynomial\r\n            //must be in form ax^2 +/- bx +/- c\r\n            if(!deg.equals(2))\r\n                stop('Cannot complete square for degree '+deg);\r\n            //get the coeffs\r\n            coeffs = core.Algebra.coeffs(symbol, v);\r\n            a = coeffs[2];\r\n            //store the sign\r\n            sign = coeffs[1].sign(); \r\n            //divide the linear term by two and square it\r\n            b = _.divide(coeffs[1], new Symbol(2));\r\n            //add the difference to the constant\r\n            c = _.pow(b.clone(), new Symbol(2));\r\n            if(raw)\r\n                return [a, b, d];\r\n            sqrt_a = math.sqrt(a);\r\n            e = _.divide(math.sqrt(c), sqrt_a.clone());\r\n            //calculate d which is the constant\r\n            d = _.subtract(coeffs[0], _.pow(e.clone(), new Symbol(2)));\r\n            //compute the square part\r\n            sym = _.parse(br(sqrt_a.clone()+'*'+v+(sign < 0 ? '-' : '+')+e));\r\n            return {\r\n                a: sym,\r\n                c: d,\r\n                f: _.add(_.pow(sym.clone(), new Symbol(2)), d.clone())\r\n            };\r\n        },\r\n        Simplify: {\r\n            strip: function(symbol) {\r\n                var c = _.parse(symbol.multiplier);\r\n                symbol.toUnitMultiplier();\r\n                var p = _.parse(symbol.power);\r\n                symbol.toLinear();\r\n                return [c, p, symbol];\r\n            },\r\n            unstrip: function(cp, symbol) {\r\n                var c = cp[0];\r\n                var p = cp[1];\r\n                return _.multiply(c, _.pow(symbol, p));\r\n            },\r\n            complexSimp: function(num, den) {\r\n                var ac, bd, bc, ad, cd, r1, r2, i1, i2;\r\n                r1 = num.realpart();\r\n                i1 = num.imagpart();\r\n                r2 = den.realpart();\r\n                i2 = den.imagpart();\r\n                //apply complex arithmatic rule\r\n                ac = _.multiply(r1.clone(), r2.clone());\r\n                bd = _.multiply(i1.clone(), i2.clone());\r\n                bc = _.multiply(r2.clone(), i1);\r\n                ad = _.multiply(r1, i2.clone());\r\n                cd = _.add(_.pow(r2, new Symbol(2)), _.pow(i2, new Symbol(2)));\r\n                \r\n                return _.divide(_.add(_.add(ac, bd), _.multiply(_.subtract(bc, ad), Symbol.imaginary())), cd);\r\n            },\r\n            trigSimp: function(symbol) { \r\n                if(symbol.containsFunction(['cos', 'sin', 'tan'])) {\r\n                    symbol = symbol.clone();\r\n                    //remove power and multiplier\r\n                    var sym_array = __.Simplify.strip(symbol);\r\n                    symbol = sym_array.pop();\r\n                    //the default return value is the symbol\r\n                    var retval = symbol.clone();\r\n\r\n                    //rewrite the symbol\r\n                    if(symbol.group === CP) {\r\n                        var sym = new Symbol(0);\r\n                        symbol.each(function(x) {\r\n                            //rewrite the function\r\n                            var tr = __.Simplify.trigSimp(x.fnTransform());\r\n                            sym = _.add(sym, tr);\r\n                        }, true);\r\n                        //put back the power and multiplier and return\r\n                        retval = _.pow(_.multiply(new Symbol(symbol.multiplier), sym), new Symbol(symbol.power));\r\n                    }\r\n                    else if(symbol.group === CB) {\r\n                        //try for tangent\r\n                        var n = symbol.getNum();\r\n                        var d = symbol.getDenom();\r\n                        if(n.fname === 'sin' && d.fname === 'cos' && n.args[0].equals(d.args[0]) && n.power.equals(d.power)) {\r\n                            retval =_.parse(core.Utils.format('({0})*({1})*tan({2})^({3})', d.multiplier, n.multiplier, n.args[0], n.power));\r\n                        }\r\n                        if(retval.group === CB) {\r\n                            var t = new Symbol(1);\r\n                            retval.each(function(x) {\r\n                                if(x.fname === 'tan') {\r\n                                    x = _.parse(core.Utils.format('({0})*sin({1})^({2})/cos({1})^({2})', x.multiplier, __.Simplify.simplify(x.args[0]), x.power));\r\n                                }\r\n                                t = _.multiply(t, x);\r\n                            });\r\n                            retval = t;\r\n                        }\r\n                    }\r\n\r\n                    retval = __.Simplify.unstrip(sym_array, retval).distributeMultiplier();\r\n                    \r\n                    symbol = retval;\r\n                }\r\n                \r\n                return symbol;\r\n            },\r\n            fracSimp: function(symbol) {\r\n                //try a quick simplify of imaginary numbers\r\n                var den = symbol.getDenom();\r\n                var num = symbol.getNum();\r\n                if(num.isImaginary() && den.isImaginary())\r\n                    symbol = __.Simplify.complexSimp(num, den);\r\n                \r\n                if(symbol.isComposite()) {\r\n                    var symbols = symbol.collectSymbols();\r\n                    //assumption 1.\r\n                    //since it's a composite, it has a length of at least 1\r\n                    var retval, a, b, d1, d2, n1, n2, x, y, c, den, num;\r\n                    a = symbols.pop(); //grab the first symbol\r\n                    //loop through each term and make denominator common\r\n                    while(symbols.length) {\r\n                        b = symbols.pop(); //grab the second symbol\r\n                        d1 = _.parse(a.getDenom());\r\n                        d2 = _.parse(b.getDenom());\r\n                        n1 = a.getNum();\r\n                        n2 = b.getNum();\r\n                        c = _.multiply(d1.clone(), d2.clone());\r\n                        x = _.multiply(n1, d2);\r\n                        y = _.multiply(n2, d1);\r\n                        a = _.divide(_.add(x, y), c);\r\n                    }\r\n                    den = _.expand(a.getDenom());\r\n                    num = _.expand(a.getNum());\r\n                    \r\n                    //simplify imaginary\r\n                    if(num.isImaginary() && den.isImaginary()) {\r\n                        retval = __.Simplify.complexSimp(num, den);\r\n                    }\r\n                    else {\r\n                        retval = _.divide(num, den);\r\n                    }\r\n\r\n                    //we've already hit the simplest form so return that\r\n                    if(retval.equals(symbol))\r\n                        return retval;\r\n                    //otherwise simplify it some more\r\n                    return __.Simplify.simplify(retval);\r\n                }\r\n                return symbol;\r\n            },\r\n            ratSimp: function(symbol) {\r\n                if(symbol.group === CB) {\r\n                    var den = __.Simplify.fracSimp(symbol.getDenom());\r\n                    var num = __.Simplify.fracSimp(symbol.getNum());\r\n                    symbol = _.divide(num, den);\r\n                }\r\n                return symbol;\r\n            },\r\n            simplify: function(symbol) { \r\n                //remove the multiplier to make calculation easier;\r\n                var sym_array = __.Simplify.strip(symbol);\r\n                symbol = sym_array.pop();\r\n                \r\n                //remove gcd from denominator\r\n                symbol = __.Simplify.fracSimp(symbol);\r\n\r\n                //nothing more to do\r\n                if(symbol.isConstant() || symbol.group === core.groups.S) {\r\n                    sym_array.push(symbol);\r\n                    var ret = __.Simplify.unstrip(sym_array, symbol);\r\n                    return ret;\r\n                }\r\n                    \r\n                var simplified;\r\n                symbol = symbol.clone(); //make a copy\r\n                ////1. Try cos(x)^2+sin(x)^2 \r\n\r\n                simplified = __.Simplify.trigSimp(symbol);\r\n\r\n                //simplify common denominators\r\n                simplified = __.Simplify.ratSimp(simplified);\r\n\r\n                //first go for the \"cheapest\" simplification which may eliminate \r\n                //your problems right away. factor -> evaluate. Remember\r\n                //that there's no need to expand since factor already does that\r\n                simplified = __.Factor.factor(simplified);\r\n\r\n                //If the simplfied is a sum then we can make a few more simplifications\r\n                //e.g. simplify(1/(x-1)+1/(1-x)) as per issue #431\r\n                if(simplified.group === core.groups.CP && simplified.isLinear()) {\r\n                    var m = simplified.multiplier.clone();\r\n                    simplified.toUnitMultiplier(); //strip the multiplier\r\n                    var r = new Symbol(0);\r\n                    //return the sum of simplifications\r\n                    simplified.each(function(x) {\r\n                        var s = __.Simplify.simplify(x);\r\n                        r = _.add(r, s);\r\n                    });\r\n                    simplified = r;\r\n                    //put back the multiplier\r\n                    r.multiplier = r.multiplier.multiply(m);\r\n                }\r\n                //place back multiplier and return\r\n                var retval = __.Simplify.unstrip(sym_array, evaluate(simplified));\r\n\r\n                return retval;\r\n            }\r\n        },\r\n            \r\n        Classes: {\r\n            Polynomial: Polynomial,\r\n            Factors: Factors,\r\n            MVTerm: MVTerm\r\n        }\r\n    };\r\n\r\n    nerdamer.useAlgebraDiv = function() {\r\n        var divide = __.divideFn = _.divide;\r\n        var calls = 0; //keep track of how many calls were made\r\n        _.divide = function(a, b) {\r\n            calls++;\r\n            var ans;\r\n            if(calls === 1) //check if this is the first call. If it is use algebra divide\r\n                ans = core.Algebra.divide(a, b);\r\n            else //otherwise use parser divide\r\n                ans = divide(a, b);\r\n            calls = 0; //reset the number of calls back to none\r\n            return ans;\r\n        };\r\n    };\r\n    \r\n    nerdamer.useParserDiv = function() {\r\n        if(__.divideFn)\r\n            _.divide = __.divideFn;\r\n        delete __.divideFn;\r\n    };\r\n\t\r\n    nerdamer.register([\r\n        {\r\n            name: 'factor',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function() { return __.Factor.factor; }\r\n        },\r\n        {\r\n            name: 'simplify',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function() { return __.Simplify.simplify; }\r\n        },\r\n        {\r\n            name: 'gcd',\r\n            visible: true,\r\n            numargs: [1, ],\r\n            build: function() { return __.gcd; }\r\n        },\r\n        {\r\n            name: 'lcm',\r\n            visible: true,\r\n            numargs: [1, ],\r\n            build: function() { return __.lcm; }\r\n        },\r\n        {\r\n            name: 'roots',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function() { return __.roots; }\r\n        },\r\n        {\r\n            name: 'divide',\r\n            visible: true,\r\n            numargs: 2,\r\n            build: function() { return __.divide; }\r\n        },\r\n        {\r\n            name: 'div',\r\n            visible: true,\r\n            numargs: 2,\r\n            build: function() { return __.div; }\r\n        },\r\n        {\r\n            name: 'partfrac',\r\n            visible: true,\r\n            numargs: [1,2],\r\n            build: function() { return __.PartFrac.partfrac; }\r\n        },\r\n        {\r\n            name: 'deg',\r\n            visible: true,\r\n            numargs: [1,2],\r\n            build: function() { return __.degree; }\r\n        },\r\n        {\r\n            name: 'coeffs',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function() { \r\n                var f = function() {\r\n                    var coeffs = __.coeffs.apply(__, arguments);\r\n                    return new core.Vector(coeffs);\r\n                };\r\n                return f;\r\n            }\r\n        },\r\n        {\r\n            name: 'line',\r\n            visible: true,\r\n            numargs: [2, 3],\r\n            build: function() { return __.line; }\r\n        },\r\n        {\r\n            name: 'sqcomp',\r\n            visible: true,\r\n            numargs: [1,2],\r\n            build: function() { \r\n                var f = function(x, v) {\r\n                    try {\r\n                        v = v || variables(x)[0];\r\n                        var sq = __.sqComplete(x.clone(), v);\r\n                        return sq.f;\r\n                    }\r\n                    catch(e) {\r\n                        return x;\r\n                    }\r\n                };\r\n                return f;\r\n            }\r\n        }\r\n    ]);\r\n    nerdamer.api();\r\n})();\r\n","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n/* global module */\r\n\r\nif ((typeof module) !== 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Calculus.js');\r\n    require('./Algebra.js');\r\n}\r\n\r\n(function () {\r\n    //handle imports\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            _A = core.Algebra,\r\n            _C = core.Calculus,\r\n            explode = _C.integration.decompose_arg,\r\n            evaluate = core.Utils.evaluate,\r\n            remove = core.Utils.remove,\r\n            format = core.Utils.format,\r\n            build = core.Utils.build,\r\n            Symbol = core.Symbol,\r\n            isSymbol = core.Utils.isSymbol,\r\n            variables = core.Utils.variables,\r\n            S = core.groups.S,\r\n            PL = core.groups.PL,\r\n            CB = core.groups.CB,\r\n            CP = core.groups.CP,\r\n            FN = core.groups.FN,\r\n            Settings = core.Settings,\r\n            range = core.Utils.range,\r\n            isArray = core.Utils.isArray;\r\n\r\n    \r\n    // The search radius for the roots\r\n    core.Settings.SOLVE_RADIUS = 1000;\r\n    // The maximum number to fish for on each side of the zero\r\n    core.Settings.ROOTS_PER_SIDE = 10;\r\n    // Covert the number to multiples of pi if possible\r\n    core.Settings.make_pi_conversions = true;\r\n    // The step size\r\n    core.Settings.STEP_SIZE = 0.1;\r\n    //the maximum iterations for Newton's method\r\n    core.Settings.MAX_NEWTON_ITERATIONS = 200;\r\n    //the maximum number of time non-linear solve tries another jump point\r\n    core.Settings.MAX_NON_LINEAR_TRIES = 12;\r\n    //the amount of iterations the function will start to jump at\r\n    core.Settings.NON_LINEAR_JUMP_AT = 50;\r\n    //the size of the jump\r\n    core.Settings.NON_LINEAR_JUMP_SIZE = 100;\r\n    //the original starting point for nonlinear solving\r\n    core.Settings.NON_LINEAR_START = 0.01;\r\n    //When points are generated as starting points for Newton's method, they are sliced into small\r\n    //slices to make sure that we have convergence on the right point. This defines the \r\n    //size of the slice\r\n    core.Settings.NEWTON_SLICES = 200;\r\n    //The epsilon used in Newton's iteration\r\n    core.Settings.NEWTON_EPSILON = Number.EPSILON*2;\r\n    //The distance in which two solutions are deemed the same\r\n    core.Settings.SOLUTION_PROXIMITY = 1e-14;\r\n    //Indicate wheter to filter the solutions are not\r\n    core.Settings.FILTER_SOLUTIONS = true;\r\n    //the maximum number of recursive calls\r\n    core.Settings.MAX_SOLVE_DEPTH = 10;\r\n    \r\n    core.Symbol.prototype.hasTrig = function () {\r\n        return this.containsFunction(['cos', 'sin', 'tan', 'cot', 'csc', 'sec']);\r\n    };\r\n\r\n    core.Symbol.prototype.hasNegativeTerms = function () {\r\n        if (this.isComposite()) {\r\n            for (var x in this.symbols) {\r\n                var sym = this.symbols[x];\r\n                if (sym.group === PL && sym.hasNegativeTerms() || this.symbols[x].power.lessThan(0))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    \r\n    /* nerdamer version 0.7.x and up allows us to make better use of operator overloading\r\n     * As such we can have this data type be supported completely outside of the core.\r\n     * This is an equation that has a left hand side and a right hand side\r\n     */\r\n    function Equation(lhs, rhs) {\r\n        if (rhs.isConstant() && lhs.isConstant() && !lhs.equals(rhs) || lhs.equals(core.Settings.IMAGINARY) || rhs.equals(core.Settings.IMAGINARY))\r\n            throw new core.exceptions.NerdamerValueError(lhs.toString() + ' does not equal ' + rhs.toString());\r\n        this.LHS = lhs; //left hand side\r\n        this.RHS = rhs; //right and side\r\n    };\r\n    \r\n    //UTILS ##!!\r\n\r\n    Equation.prototype = {\r\n        toString: function () {\r\n            return this.LHS.toString() + '=' + this.RHS.toString();\r\n        },\r\n        text: function (option) {\r\n            return this.LHS.text(option) + '=' + this.RHS.text(option);\r\n        },\r\n        toLHS: function (expand) {\r\n            expand = typeof expand === 'undefined' ? true : false;\r\n            var eqn;\r\n            if(!expand) {\r\n                eqn = this.clone();\r\n            }\r\n            else {\r\n                eqn = this.removeDenom();\r\n            }\r\n            var _t = _.subtract(eqn.LHS, eqn.RHS);\r\n            var retval = expand ? _.expand(_t) : _t;\r\n            return retval;\r\n        },\r\n        removeDenom: function () { \r\n            var a = this.LHS.clone();\r\n            var b = this.RHS.clone();\r\n            //remove the denominator on both sides\r\n            var den = _.multiply(a.getDenom(), b.getDenom());\r\n            a = _.expand(_.multiply(a, den.clone()));\r\n            b = _.expand(_.multiply(b, den));\r\n            //swap the groups\r\n            if (b.group === CP && b.group !== CP) {\r\n                var t = a;\r\n                a = b;\r\n                b = t; //swap\r\n            }\r\n\r\n            //scan to eliminate denominators\r\n            if (a.group === CB) {\r\n                var t = new Symbol(a.multiplier),\r\n                        newRHS = b.clone();\r\n                a.each(function (y) {\r\n                    if (y.power.lessThan(0))\r\n                        newRHS = _.divide(newRHS, y);\r\n                    else\r\n                        t = _.multiply(t, y);\r\n                });\r\n                a = t;\r\n                b = newRHS;\r\n\r\n            }\r\n            else if (a.group === CP) {\r\n                //the logic: loop through each and if it has a denominator then multiply it out on both ends\r\n                //and then start over\r\n                for (var x in a.symbols) {\r\n                    var sym = a.symbols[x];\r\n                    if (sym.group === CB) {\r\n                        for (var y in sym.symbols) {\r\n                            var sym2 = sym.symbols[y];\r\n                            if (sym2.power.lessThan(0)) {\r\n                                return new Equation(\r\n                                        _.expand(_.multiply(sym2.clone().toLinear(), a)),\r\n                                        _.expand(_.multiply(sym2.clone().toLinear(), b))\r\n                                        );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return new Equation(a, b);\r\n        },\r\n        clone: function () {\r\n            return new Equation(this.LHS.clone(), this.RHS.clone());\r\n        },\r\n        sub: function (x, y) {\r\n            var clone = this.clone();\r\n            clone.LHS = clone.LHS.sub(x.clone(), y.clone());\r\n            clone.RHS = clone.RHS.sub(x.clone(), y.clone());\r\n            return clone;\r\n        },\r\n        isZero: function () {\r\n            return core.Utils.evaluate(this.toLHS()).equals(0);\r\n        },\r\n        latex: function (option) {\r\n            return [this.LHS.latex(option), this.RHS.latex(option)].join('=');\r\n        }\r\n    };\r\n    //overwrite the equals function\r\n    _.equals = function (a, b) {\r\n        return new Equation(a, b);\r\n    };\r\n    \r\n    /**\r\n     * Sets two expressions equal\r\n     * @param {Symbol} symbol\r\n     * @returns {Expression}\r\n     */\r\n    core.Expression.prototype.equals = function(symbol) {\r\n        if(symbol instanceof core.Expression)\r\n            symbol = symbol.symbol; //grab the symbol if it's an expression\r\n        var eq = new Equation(this.symbol, symbol);\r\n        return eq;\r\n    };\r\n    \r\n    core.Expression.prototype.solveFor = function (x) {\r\n        var symbol;\r\n        if(this.symbol instanceof Equation) {\r\n            //exit right away if we already have the answer\r\n            //check the LHS\r\n            if(this.symbol.LHS.isConstant() && this.symbol.RHS.equals(x))\r\n                return new core.Expression(this.symbol.LHS);\r\n            \r\n            //check the RHS\r\n            if(this.symbol.RHS.isConstant() && this.symbol.LHS.equals(x))\r\n                return new core.Expression(this.symbol.RHS);\r\n            \r\n            //otherwise just bring it to LHS\r\n            symbol = this.symbol.toLHS();\r\n        }\r\n        else  {\r\n            symbol = this.symbol;\r\n        }\r\n            \r\n        \r\n        return solve(symbol, x).map(function (x) {\r\n            return new core.Expression(x);\r\n        });\r\n    };\r\n\r\n    core.Expression.prototype.expand = function () {\r\n        if (this.symbol instanceof Equation) {\r\n            var clone = this.symbol.clone();\r\n            clone.RHS = _.expand(clone.RHS);\r\n            clone.LHS = _.expand(clone.LHS);\r\n            return new core.Expression(clone);\r\n        }\r\n        return new core.Expression(_.expand(this.symbol));\r\n    };\r\n\r\n    core.Expression.prototype.variables = function () {\r\n        if (this.symbol instanceof Equation)\r\n            return core.Utils.arrayUnique(variables(this.symbol.LHS).concat(variables(this.symbol.RHS)));\r\n        return variables(this.symbol);\r\n    };\r\n    \r\n    core.Matrix.jacobian = function(eqns, vars) {\r\n        var jacobian = new core.Matrix();\r\n        //get the variables if not supplied\r\n        if(!vars) {\r\n            vars = __.getSystemVariables(eqns);\r\n        }\r\n        \r\n        vars.forEach(function(v, i) {\r\n            eqns.forEach(function(eq, j) {\r\n                var e = core.Calculus.diff(eq.clone(), v);\r\n                jacobian.set(j, i, e);\r\n            });\r\n        });\r\n        \r\n        return jacobian;\r\n    };\r\n    \r\n    core.Matrix.prototype.max = function() {\r\n        var max = new Symbol(0);\r\n        this.each(function(x) {\r\n            var e = x.abs();\r\n            if(e.gt(max))\r\n                max = e;\r\n        });\r\n        return max;\r\n    };\r\n    \r\n    core.Matrix.cMatrix = function(value, vars) {\r\n        var m = new core.Matrix();\r\n        //make an initial guess\r\n        vars.forEach(function(v, i) {\r\n            m.set(i, 0, _.parse(value));\r\n        });\r\n        return m;\r\n    };\r\n\r\n    var setEq = function (a, b) {\r\n        return _.equals(a, b);\r\n    };\r\n\r\n    //link the Equation class back to the core\r\n    core.Equation = Equation;\r\n    \r\n    //Loops through an array and attempts to fails a test. Stops if manages to fail.\r\n    var checkAll = core.Utils.checkAll = function (args, test) {\r\n        for (var i = 0; i < args.length; i++)\r\n            if (test(args[i]))\r\n                return false;\r\n        return true;\r\n    };\r\n    \r\n    //version solve\r\n    var __ = core.Solve = {\r\n        version: '2.0.3',\r\n        solutions: [],\r\n        solve: function (eq, variable) {\r\n            var solution = solve(eq, String(variable));\r\n            return new core.Vector(solution);\r\n            //return new core.Vector(solve(eq.toString(), variable ? variable.toString() : variable));\r\n        },\r\n        /**\r\n         * Brings the equation to LHS. A string can be supplied which will be converted to an Equation\r\n         * @param {Equation|String} eqn\r\n         * @returns {Symbol}\r\n         */\r\n        toLHS: function (eqn, expand) {            \r\n            if(isSymbol(eqn))\r\n                return eqn;\r\n            //If it's an equation then call its toLHS function instead\r\n            if (!(eqn instanceof Equation)) {\r\n                var es = eqn.split('=');\r\n                //convert falsey values to zero\r\n                es[1] = es[1] || '0';\r\n                eqn = new Equation(_.parse(es[0]), _.parse(es[1]));\r\n            }\r\n            return eqn.toLHS(expand);\r\n        },\r\n        getSystemVariables: function(eqns) {\r\n            vars = variables(eqns[0], null, null, true);\r\n\r\n            //get all variables\r\n            for (var i = 1, l=eqns.length; i < l; i++)\r\n                vars = vars.concat(variables(eqns[i]));\r\n            //remove duplicates\r\n            vars = core.Utils.arrayUnique(vars).sort();\r\n            \r\n            //done\r\n            return vars;\r\n        },\r\n        solveNonLinearSystem: function(eqns, tries, start) {\r\n            if(tries < 0)\r\n                return [];//can't find a solution\r\n            start = typeof start === 'undefined' ? core.Settings.NON_LINEAR_START : start;\r\n\r\n            //the maximum number of times to jump\r\n            var max_tries = core.Settings.MAX_NON_LINEAR_TRIES;\r\n            \r\n            //halfway through the tries\r\n            var halfway = Math.floor(max_tries/2);\r\n            \r\n            //initialize the number of tries to 10 if not specified\r\n            tries = typeof tries === 'undefined' ? max_tries : tries;\r\n            \r\n            //a point at which we check to see if we're converging. By inspection it seems that we can\r\n            //use around 20 iterations to see if we're converging. If not then we retry a jump of x\r\n            var jump_at = core.Settings.NON_LINEAR_JUMP_AT; \r\n            \r\n            //we jump by this many points at each pivot point\r\n            var jump = core.Settings.NON_LINEAR_JUMP_SIZE;\r\n            \r\n            //used to check if we actually found a solution or if we gave up. Assume we will find a solution.\r\n            var found = true;\r\n            \r\n            var create_subs = function(vars, matrix) {\r\n                return vars.map(function(x, i) {\r\n                    return Number(matrix.get(i, 0));\r\n                });\r\n            };\r\n            \r\n            var vars = __.getSystemVariables(eqns);\r\n            var jacobian = core.Matrix.jacobian(eqns, vars, function(x) {\r\n                return build(x, vars);\r\n            }, true);\r\n            \r\n            var max_iter = core.Settings.MAX_NEWTON_ITERATIONS;\r\n            var o, y, iters, xn1, norm, lnorm, xn, d;\r\n            \r\n            var f_eqns = eqns.map(function(eq) {\r\n                return build(eq, vars);\r\n            });\r\n            \r\n            var J = jacobian.map(function(e) {\r\n                return build(e, vars);\r\n            }, true);\r\n            //initial values\r\n            xn1 = core.Matrix.cMatrix(0, vars);;\r\n            //initialize the c matrix with something close to 0. \r\n            var c = core.Matrix.cMatrix(start, vars);\r\n            \r\n            iters = 0;\r\n            \r\n            //start of algorithm\r\n            do {\r\n                //if we've reached the max iterations then exit\r\n                if(iters > max_iter) {\r\n                    break;\r\n                    found = false;\r\n                }\r\n                \r\n                //set the substitution object\r\n                o = create_subs(vars, c);\r\n                \r\n                //set xn\r\n                xn = c.clone();\r\n                \r\n                //make all the substitutions for each of the equations\r\n                f_eqns.forEach(function(f, i) {\r\n                    c.set(i, 0, f.apply(null, o));\r\n                });\r\n                \r\n                var m = new core.Matrix();\r\n                J.each(function(fn, i, j) {\r\n                    var ans = fn.apply(null, o);\r\n                    m.set(i, j, ans);\r\n                });\r\n\r\n                m = m.invert();\r\n                \r\n                //preform the elimination\r\n                y = _.multiply(m, c).negate();\r\n                \r\n                //the callback is to avoid overflow in the coeffient denonimator\r\n                //it converts it to a decimal and then back to a fraction. Some precision\r\n                //is lost be it's better than overflow. \r\n                d = y.subtract(xn1, function(x) { return _.parse(Number(x)); });\r\n\r\n                xn1 = xn.add(y, function(x) { return _.parse(Number(x)); });\r\n\r\n                //move c is now xn1\r\n                c = xn1;\r\n                \r\n                //get the norm\r\n                \r\n                //the expectation is that we're converging to some answer as this point regardless of where we start\r\n                //this may have to be adjusted at some point because of erroneous assumptions\r\n                if(iters >= jump_at) {\r\n                    //check the norm. If the norm is greater than one then it's time to try another point\r\n                    if(norm > 1) {\r\n                        //reset the start point at halway\r\n                        if(tries === halfway)\r\n                            start = 0;\r\n                        var sign = tries > halfway ? 1 : -1; //which side are we incrementing\r\n                        //we increment +n at one side and -n at the other. \r\n                        n = (tries % Math.floor(halfway))+1;\r\n                        //adjust the start point\r\n                        start += (sign*n*jump);\r\n                        //call restart\r\n                        return __.solveNonLinearSystem(eqns, --tries, start);\r\n                    }\r\n                }\r\n                lnorm = norm;\r\n                iters++;\r\n                norm = d.max();\r\n                \r\n                //exit early. Revisit if we get bugs\r\n                if(Number(norm) === Number(lnorm))\r\n                    break;\r\n                \r\n            }\r\n            while(Number(norm) >= Number.EPSILON)\r\n            \r\n            //return a blank set if nothing was found;\r\n            if(!found) \r\n                return [];\r\n            \r\n            //return c since that's the answer\r\n            return __.systemSolutions(c, vars, true, function(x) {\r\n                return core.Utils.round(Number(x), 14);\r\n            });\r\n        },\r\n        systemSolutions: function(result, vars, expand_result, callback) {\r\n            var solutions = core.Settings.SOLUTIONS_AS_OBJECT ? {} : [];\r\n            \r\n            result.each(function (e, idx) {\r\n                var solution = (expand_result ? _.expand(e) : e).valueOf();\r\n                if(callback)\r\n                    solution = callback.call(e, solution);\r\n                var variable = vars[idx];\r\n                if (core.Settings.SOLUTIONS_AS_OBJECT) {\r\n                    solutions[variable] = solution;\r\n                }\r\n                else\r\n                    solutions.push([variable, solution]); /*NO*/\r\n            });\r\n            //done\r\n            return solutions;\r\n        },\r\n        //https://www.lakeheadu.ca/sites/default/files/uploads/77/docs/RemaniFinal.pdf\r\n        solveSystem: function (eqns, var_array) {\r\n            //check if a var_array was specified\r\n            //nerdamer.clearVars();// this deleted ALL variables: not what we want\r\n            //parse all the equations to LHS. Remember that they come in as strings\r\n            for (var i = 0; i < eqns.length; i++)\r\n                eqns[i] = __.toLHS(eqns[i]);\r\n\r\n            var l = eqns.length,\r\n                m = new core.Matrix(),\r\n                c = new core.Matrix(),\r\n                expand_result = false,\r\n                vars;\r\n\r\n            if (typeof var_array === 'undefined') {\r\n                //check to make sure that all the equations are linear\r\n                if (!_A.allLinear(eqns))\r\n                    return __.solveNonLinearSystem(eqns);\r\n                    //core.err('System must contain all linear equations!');\r\n                \r\n                vars = __.getSystemVariables(eqns);\r\n                // deletes only the variables of the linear equations in the nerdamer namespace\r\n                for (var i = 0; i < vars.length; i++) {\r\n                    nerdamer.setVar(vars[i], \"delete\");\r\n                }\r\n                // populate the matrix\r\n                for (var i = 0; i < l; i++) {\r\n                    var e = eqns[i]; //store the expression\r\n                    for (var j = 0; j < l; j++) {\r\n                        var v = vars[j];\r\n                        var coeffs = [];\r\n                        e.each(function(x) {\r\n                            if(x.contains(v)) {\r\n                                coeffs = coeffs.concat(x.coeffs());\r\n                            }\r\n                        });\r\n\r\n                        var cf = core.Utils.arraySum(coeffs);\r\n                        m.set(i, j, cf);\r\n                    }\r\n\r\n                    //strip the variables from the symbol so we're left with only the zeroth coefficient\r\n                    //start with the symbol and remove each variable and its coefficient\r\n                    var num = e.clone();\r\n                    vars.map(function(e) {\r\n                        num = num.stripVar(e, true);\r\n                    });\r\n                    c.set(i, 0, num.negate());\r\n                }\r\n            }\r\n            else {\r\n                /**\r\n                 * The idea is that we loop through each equation and then expand it. Afterwards we loop\r\n                 * through each term and see if and check to see if it matches one of the variables.\r\n                 * When a match is found we mark it. No other match should be found for that term. If it\r\n                 * is we stop since it's not linear.\r\n                 */\r\n                vars = var_array;\r\n                expand_result = true;\r\n                for (i = 0; i < l; i++) {\r\n                    //prefill\r\n                    c.set(i, 0, new Symbol(0));\r\n                    var e = _.expand(eqns[i]).collectSymbols(); //expand and store\r\n                    //go trough each of the variables\r\n                    for (var j = 0; j < var_array.length; j++) {\r\n                        m.set(i, j, new Symbol(0));\r\n                        var v = var_array[j];\r\n                        //go through the terms and sort the variables\r\n                        for (var k = 0; k < e.length; k++) {\r\n                            var term = e[k],\r\n                                    check = false;\r\n                            for (var z = 0; z < var_array.length; z++) {\r\n                                //check to see if terms contain multiple variables\r\n                                if (term.contains(var_array[z])) {\r\n                                    if (check)\r\n                                        core.err('Multiple variables found for term ' + term);\r\n                                    check = true;\r\n                                }\r\n                            }\r\n                            //we made sure that every term contains one variable so it's safe to assume that if the\r\n                            //variable is found then the remainder is the coefficient.\r\n                            if (term.contains(v)) {\r\n                                var tparts = explode(remove(e, k), v);\r\n                                m.set(i, j, _.add(m.get(i, j), tparts[0]));\r\n                            }\r\n                        }\r\n                    }\r\n                    //all the remaining terms go to the c matrix\r\n                    for (k = 0; k < e.length; k++) {\r\n                        c.set(i, 0, _.add(c.get(i, 0), e[k]));\r\n                    }\r\n                }\r\n                //consider case (a+b)*I+u\r\n            }\r\n\r\n            //check if the system has a distinct solution\r\n            if(m.determinant().equals(0))\r\n                throw new core.exceptions.SolveError('System does not have a distinct solution');\r\n            // Use M^-1*c to solve system\r\n            m = m.invert();\r\n            var result = m.multiply(c);\r\n            //correct the sign as per issue #410\r\n            if (core.Utils.isArray(var_array))\r\n                result.each(function (x) {\r\n                    return x.negate();\r\n                });\r\n            \r\n            \r\n            return __.systemSolutions(result, vars, expand_result);\r\n        },\r\n        /**\r\n         * The quadratic function but only one side.\r\n         * @param {Symbol} c\r\n         * @param {Symbol} b\r\n         * @param {Symbol} a\r\n         * @returns {Symbol}\r\n         */\r\n        quad: function (c, b, a) {\r\n            var discriminant = _.subtract(_.pow(b.clone(), Symbol(2)), _.multiply(_.multiply(a.clone(), c.clone()), Symbol(4)))/*b^2 - 4ac*/;\r\n            var det = _.pow(discriminant, Symbol(0.5));\r\n            var retval = [\r\n                _.parse(_.divide(_.add(b.clone().negate(), det.clone()), _.multiply(new Symbol(2), a.clone()))),\r\n                _.parse(_.divide(_.subtract(b.clone().negate(), det.clone()), _.multiply(new Symbol(2), a.clone())))\r\n            ];\r\n            return retval;\r\n        },\r\n        /**\r\n         * The cubic equation\r\n         * http://math.stackexchange.com/questions/61725/is-there-a-systematic-way-of-solving-cubic-equations\r\n         * @param {Symbol} d_o\r\n         * @param {Symbol} c_o\r\n         * @param {Symbol} b_o\r\n         * @param {Symbol} a_o\r\n         * @returns {Array}\r\n         */\r\n        cubic:function (d_o, c_o, b_o, a_o) {\r\n            //convert everything to text\r\n            var a = a_o.text(), b = b_o.text(), c = c_o.text(), d = d_o.text();\r\n            var d0s = '({1})^2-3*({0})*({2})',\r\n                    d0 = _.parse(format(d0s, a, b, c)),\r\n                    Q = _.parse(format('((2*({1})^3-9*({0})*({1})*({2})+27*({0})^2*({3}))^2-4*(({1})^2-3*({0})*({2}))^3)^(1/2)', a, b, c, d)),\r\n                    C = _.parse(format('((1/2)*(({4})+2*({1})^3-9*({0})*({1})*({2})+27*({0})^2*({3})))^(1/3)', a, b, c, d, Q));\r\n            //check if C equals 0\r\n            var scope = {};\r\n            //populate the scope object\r\n            variables(C).map(function (x) {\r\n                scope[x] = 1;\r\n            });\r\n\r\n            var Ct = core.Utils.block('PARSE2NUMBER', function () {\r\n                return _.parse(C, scope);\r\n            });\r\n\r\n            if (Number(d0) === 0 && Number(Ct) === 0) //negate Q such that C != 0\r\n                C = _.parse(format('((1/2)*(-({4})+2*({1})^3-9*({0})*({1})*({2})+27*({0})^2*({3})))^(1/3)', a, b, c, d, Q));\r\n\r\n            var xs = [\r\n                '-(b/(3*a))-C/(3*a)-(((b^2-3*a*c))/(3*a*C))',\r\n                '-(b/(3*a))+(C*(1+i*sqrt(3)))/(6*a)+((1-i*sqrt(3))*(b^2-3*a*c))/(6*a*C)'.replace(/i/g, core.Settings.IMAGINARY),\r\n                '-(b/(3*a))+(C*(1-i*sqrt(3)))/(6*a)+((1+i*sqrt(3))*(b^2-3*a*c))/(6*a*C)'.replace(/i/g, core.Settings.IMAGINARY)\r\n            ];\r\n\r\n            return xs.map(function (e, i) {\r\n                var o = {a: a_o.clone(), b: b_o.clone(), c: c_o.clone(), d: d_o.clone(), C: C.clone()};\r\n                return _.parse(e, o);\r\n            });\r\n        },\r\n        /**\r\n         * The quartic equation\r\n         * @param {Symbol} e\r\n         * @param {Symbol} d\r\n         * @param {Symbol} c\r\n         * @param {Symbol} b\r\n         * @param {Symbol} a\r\n         * @returns {Array}\r\n         */\r\n        quartic: function (e, d, c, b, a) {\r\n            var scope = {};\r\n            core.Utils.arrayUnique(variables(a).concat(variables(b))\r\n                    .concat(variables(c)).concat(variables(d)).concat(variables(e)))\r\n                    .map(function (x) {\r\n                        scope[x] = 1;\r\n                    });\r\n            a = a.toString();\r\n            b = b.toString();\r\n            c = c.toString();\r\n            d = d.toString();\r\n            e = e.toString();\r\n            var p, q, D, D0, D1, Q, x1, x2, x3, x4;\r\n            /*var D = core.Utils.block('PARSE2NUMBER', function() {\r\n             return _.parse(format(\"256*({0})^3*({4})^3-192*({0})^2*({1})*({3})*({4})^2-128*({0})^2*({2})^2*({4})^2+144*({0})^2*({2})*({3})^2*({4})\"+\r\n             \"-27*({0})^2*({3})^4+144*({0})*({1})^2*({2})*({4})^2-6*({0})*({1})^2*({3})^2*({4})-80*({0})*({1})*({2})^2*({3})*({4})+18*({0})*({1})*({2})*({3})^3\"+\r\n             \"+16*({0})*({2})^4*({4})-4*({0})*({2})^3*({3})^2-27*({1})^4*({4})^2+18*({1})^3*({2})*({3})*({4})-4*({1})^3*({3})^3-4*({1})^2*({2})^3*({4})+({1})^2*({2})^2*({3})^2\", \r\n             a, b, c, d, e), scope);\r\n             });*/\r\n\r\n            p = _.parse(format(\"(8*({0})*({2})-3*({1})^2)/(8*({0})^2)\", a, b, c)).toString(); //a, b, c\r\n            q = _.parse(format(\"(({1})^3-4*({0})*({1})*({2})+8*({0})^2*({3}))/(8*({0})^3)\", a, b, c, d)).toString();//a, b, c, d, e\r\n            D0 = _.parse(format(\"12*({0})*({4})-3*({1})*({3})+({2})^2\", a, b, c, d, e)).toString(); //a, b, c, d, e\r\n            D1 = _.parse(format(\"2*({2})^3-9*({1})*({2})*({3})+27*({1})^2*({4})+27*({0})*({3})^2-72*({0})*({2})*({4})\", a, b, c, d, e)).toString(); //a, b, c, d, e\r\n            Q = _.parse(format(\"((({1})+(({1})^2-4*({0})^3)^(1/2))/2)^(1/3)\", D0, D1)).toString(); //D0, D1\r\n            S = _.parse(format(\"(1/2)*(-(2/3)*({1})+(1/(3*({0}))*(({2})+(({3})/({2})))))^(1/2)\", a, p, Q, D0)).toString(); //a, p, Q, D0\r\n            x1 = _.parse(format(\"-(({1})/(4*({0})))-({4})+(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x2 = _.parse(format(\"-(({1})/(4*({0})))-({4})-(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x3 = _.parse(format(\"-(({1})/(4*({0})))+({4})+(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x4 = _.parse(format(\"-(({1})/(4*({0})))+({4})-(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            return [x1, x2, x3, x4];\r\n        },\r\n        /**\r\n         * Breaks the equation up in its factors and tries to solve the smaller parts\r\n         * @param {Symbol} symbol\r\n         * @param {String} solve_for\r\n         * @returns {Array}\r\n         */\r\n        divideAndConquer: function (symbol, solve_for) {\r\n            var sols = [];\r\n            //see if we can solve the factors\r\n            var factors = core.Algebra.Factor.factor(symbol);\r\n            if (factors.group === CB) {\r\n                factors.each(function (x) {\r\n                    x = Symbol.unwrapPARENS(x);\r\n                    sols = sols.concat(solve(x, solve_for));\r\n                });\r\n            }\r\n            return sols;\r\n        },\r\n        /**\r\n         * Attempts to solve the equation assuming it's a polynomial with numeric coefficients\r\n         * @param {Symbol} eq\r\n         * @param {String} solve_for\r\n         * @returns {Array}\r\n         */\r\n        csolve: function (eq, solve_for) {\r\n            return core.Utils.block('IGNORE_E', function () {\r\n                var f, p, pn, n, pf, r, theta, sr, sp, roots;\r\n                roots = [];\r\n                f = core.Utils.decompose_fn(eq, solve_for, true);\r\n                if (f.x.group === S) {\r\n                    p = _.parse(f.x.power);\r\n                    pn = Number(p);\r\n                    n = _.pow(_.divide(f.b.negate(), f.a), p.invert());\r\n                    pf = Symbol.toPolarFormArray(n);\r\n                    r = pf[0];\r\n                    theta = pf[1];\r\n                    sr = r.toString();\r\n                    sp = p.toString();\r\n                    var k, root, str;\r\n                    for (var i = 0; i < pn; i++) {\r\n                        k = i;\r\n                        str = format('({0})*e^(2*{1}*pi*{2}*{3})', sr, k, p, core.Settings.IMAGINARY);\r\n                        root = _.parse(str);\r\n                        roots.push(root);\r\n                    }\r\n                }\r\n                return roots;\r\n            }, true);\r\n        },\r\n        /**\r\n         * Generates starting points for the Newton solver given an expression at zero.\r\n         * It beings by check if zero is a good point and starts expanding by a provided step size. \r\n         * Builds on the fact that if the sign changes over an interval then a zero\r\n         * must exist on that interval\r\n         * @param {Symbol} symbol\r\n         * @param {Number} step\r\n         * @param {Array} points\r\n         * @returns {Array}\r\n         */\r\n        getPoints: function (symbol, step, points) {\r\n            step = step || 0.01;\r\n            points = points || [];\r\n            var f = build(symbol);\r\n            var x0 = 0;\r\n                \r\n            var start = Math.round(x0),\r\n                    last = f(start),\r\n                    last_sign = last / Math.abs(last),\r\n                    rside = core.Settings.ROOTS_PER_SIDE, // the max number of roots on right side\r\n                    lside = rside; // the max number of roots on left side\r\n            // check around the starting point\r\n            points.push(Math.floor(start / 2)); //half way from zero might be a good start\r\n            points.push(Math.abs(start)); //|f(0)| could be a good start\r\n            points.push(start);//|f(0)| could be a good start\r\n            //adjust for log. A good starting point to include for log is 0.1\r\n            symbol.each(function (x) {\r\n                if (x.containsFunction(core.Settings.LOG))\r\n                    points.push(0.1);\r\n            });\r\n            \r\n            var left = range(-core.Settings.SOLVE_RADIUS, start, step),\r\n                right = range(start, core.Settings.SOLVE_RADIUS, step);\r\n            \r\n            var test_side = function(side, num_roots) {\r\n                var xi, val, sign;\r\n                var hits = [];\r\n                for(var i=0, l=side.length; i<l; i++) {\r\n                    xi = side[i]; //the point being evaluated\r\n                    val = f(xi);\r\n                    sign = val / Math.abs(val);\r\n                    //Don't add non-numeric values\r\n                    if (isNaN(val) || !isFinite(val) || hits.length > num_roots) { \r\n                        continue;\r\n                    }\r\n\r\n                    //compare the signs. The have to be different if they cross a zero\r\n                    if (sign !== last_sign) {\r\n                        hits.push(xi); //take note of the possible zero location\r\n                    }\r\n                    last_sign = sign;\r\n                }\r\n\r\n                points = points.concat(hits);\r\n            };\r\n            \r\n            test_side(left, lside);\r\n            test_side(right, rside);\r\n            \r\n            return points;\r\n        },\r\n        Newton: function (point, f, fp) {\r\n            var maxiter = core.Settings.MAX_NEWTON_ITERATIONS,\r\n                    iter = 0;\r\n            //first try the point itself. If it's zero viola. We're done\r\n            var x0 = point, x;\r\n            do {\r\n                var fx0 = f(x0); //store the result of the function\r\n                //if the value is zero then we're done because 0 - (0/d f(x0)) = 0\r\n                if (x0 === 0 && fx0 === 0) {\r\n                    x = 0;\r\n                    break;\r\n                }\r\n                \r\n                iter++;\r\n                if (iter > maxiter)\r\n                    return; //naximum iterations reached\r\n\r\n                x = x0 - fx0 / fp(x0);\r\n                var e = Math.abs(x - x0);\r\n                x0 = x;\r\n            }\r\n            while (e > Settings.NEWTON_EPSILON)\r\n            \r\n            //check if the number is indeed zero. 1e-13 seems to give the most accurate results\r\n            if(Math.abs(f(x)) <= 1e-13)\r\n                return x;\r\n        },\r\n        rewrite: function (rhs, lhs, for_variable) {\r\n            lhs = lhs || new Symbol(0);\r\n            if(rhs.isComposite() && rhs.isLinear()) {\r\n                //try to isolate the square root\r\n                //container for the square roots\r\n                var sqrts = [];\r\n                //all else\r\n                var rem = [];\r\n                rhs.each(function(x) {\r\n                    x = x.clone();\r\n                    if(x.fname === 'sqrt' && x.contains(for_variable)) {\r\n                        sqrts.push(x);\r\n                    }\r\n                    else {\r\n                        rem.push(x);\r\n                    }\r\n                }, true);\r\n\r\n                if(sqrts.length === 1) {\r\n                    //move the remainder to the RHS\r\n                    lhs = _.expand(_.pow(_.subtract(lhs, core.Utils.arraySum(rem)), new Symbol(2)));\r\n                    //square both sides\r\n                    rhs = _.expand(_.pow(Symbol.unwrapSQRT(sqrts[0]), new Symbol(2)));\r\n                }\r\n            }\r\n            else {\r\n                rhs = Symbol.unwrapSQRT(_.expand(rhs)); //expand the term expression go get rid of quotients when possible\r\n            }\r\n            \r\n            var c = 0, //a counter to see if we have all terms with the variable\r\n                    l = rhs.length;\r\n            //try to rewrite the whole thing\r\n            if (rhs.group === CP && rhs.contains(for_variable) && rhs.isLinear()) {\r\n                rhs.distributeMultiplier();\r\n                var t = new Symbol(0);\r\n                //first bring all the terms containing the variable to the lhs\r\n                rhs.each(function (x) {\r\n                    if (x.contains(for_variable)) {\r\n                        c++;\r\n                        t = _.add(t, x.clone());\r\n                    }\r\n                    else\r\n                        lhs = _.subtract(lhs, x.clone());\r\n                });\r\n                rhs = t;\r\n\r\n                //if not all the terms contain the variable so it's in the form\r\n                //a*x^2+x\r\n                if (c !== l) {\r\n                    return __.rewrite(rhs, lhs, for_variable);\r\n                }\r\n                else {\r\n                    return [rhs, lhs];\r\n                }\r\n            }\r\n            else if (rhs.group === CB && rhs.contains(for_variable) && rhs.isLinear()) {\r\n                if (rhs.multiplier.lessThan(0)) {\r\n                    rhs.multiplier = rhs.multiplier.multiply(new core.Frac(-1));\r\n                    lhs.multiplier = lhs.multiplier.multiply(new core.Frac(-1));\r\n                }\r\n                if (lhs.equals(0))\r\n                    return new Symbol(0);\r\n                else {\r\n                    var t = new Symbol(1);\r\n                    rhs.each(function (x) {\r\n                        if (x.contains(for_variable))\r\n                            t = _.multiply(t, x.clone());\r\n                        else\r\n                            lhs = _.divide(lhs, x.clone());\r\n                    });\r\n                    rhs = t;\r\n                    return __.rewrite(rhs, lhs, for_variable);\r\n\r\n                }\r\n            }\r\n            else if (!rhs.isLinear() && rhs.contains(for_variable)) {\r\n                var p = _.parse(rhs.power.clone().invert());\r\n                rhs = _.pow(rhs, p.clone());\r\n                lhs = _.pow(_.expand(lhs), p.clone());\r\n                return __.rewrite(rhs, lhs, for_variable);\r\n            }\r\n            else if (rhs.group === FN || rhs.group === S || rhs.group === PL) {\r\n                return [rhs, lhs];\r\n            }\r\n        },\r\n        sqrtSolve: function(symbol, v) {\r\n            var sqrts = new Symbol(0);\r\n            var rem = new Symbol(0);\r\n            if(symbol.isComposite()) {\r\n                symbol.each(function(x) {\r\n                    if(x.fname === 'sqrt' && x.contains(v)) {\r\n                        sqrts = _.add(sqrts, x.clone());\r\n                    }\r\n                    else {\r\n                        rem = _.add(rem, x.clone());\r\n                    }\r\n                });\r\n                //quick and dirty ATM\r\n                if(!sqrts.equals(0)) {\r\n                    var t = _.expand(_.multiply(_.parse(symbol.multiplier), _.subtract(_.pow(rem, new Symbol(2)), _.pow(sqrts, new Symbol(2)))));\r\n                    //square both sides\r\n                    var solutions = solve(t, v);\r\n                    //test the points. The dumb way of getting the answers\r\n                    solutions = solutions.filter(function(e) {\r\n                        if(e.isImaginary())\r\n                            return e;\r\n                        var subs = {};\r\n                        subs[v] = e;\r\n                        var point = evaluate(symbol, subs);\r\n                        if(point.equals(0))\r\n                            return e;\r\n                    });\r\n                    return solutions;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /*\r\n     * \r\n     * @param {String[]|String|Equation} eqns\r\n     * @param {type} solve_for\r\n     * @returns {Array}\r\n     */\r\n    var solve = function (eqns, solve_for, solutions, depth) {\r\n        depth = depth || 0;\r\n        \r\n        if(depth++ > Settings.MAX_SOLVE_DEPTH) {\r\n            return solutions;\r\n        }\r\n        \r\n        //make preparations if it's an Equation\r\n        if (eqns instanceof Equation) {\r\n            //if it's zero then we're done\r\n            if (eqns.isZero())\r\n                return [new Symbol(0)];\r\n            //if the lhs = x then we're done\r\n            if (eqns.LHS.equals(solve_for) && !eqns.RHS.contains(solve_for)) {\r\n                return [eqns.RHS];\r\n            }\r\n            //if the rhs = x then we're done\r\n            if (eqns.RHS.equals(solve_for) && !eqns.LHS.contains(solve_for)) {\r\n                return [eqns.LHS];\r\n            }\r\n        }\r\n\r\n        //unwrap the vector since what we want are the elements\r\n        if (eqns instanceof core.Vector)\r\n            eqns = eqns.elements;\r\n        solve_for = solve_for || 'x'; //assumes x by default\r\n        //If it's an array then solve it as a system of equations\r\n        if (isArray(eqns)) {\r\n            return __.solveSystem.apply(undefined, arguments);\r\n        }\r\n        \r\n        //parse out functions. Fix for issue #300\r\n        //eqns = core.Utils.evaluate(eqns);\r\n        solutions = solutions || [];\r\n        //mark existing solutions as not to have duplicates\r\n        var existing = {}; \r\n        //Is usued to add solutions to set. \r\n        //TODO: Set is now implemented and should be utilized\r\n        var add_to_result = function (r, has_trig) {\r\n            var r_is_symbol = isSymbol(r);\r\n            if (r === undefined || typeof r === 'number' && isNaN(r))\r\n                return;\r\n            if (isArray(r)) {\r\n                r.map(function(sol) {\r\n                    add_to_result(sol);\r\n                });\r\n            }\r\n            else {\r\n                if (r.valueOf() !== 'null') {\r\n                    if (!r_is_symbol)\r\n                        r = _.parse(r);\r\n                    //try to convert the number to multiples of pi\r\n                    if (core.Settings.make_pi_conversions && has_trig) {\r\n                        var temp = _.divide(r.clone(), new Symbol(Math.PI)),\r\n                                m = temp.multiplier,\r\n                                a = Math.abs(m.num),\r\n                                b = Math.abs(m.den);\r\n                        if (a < 10 && b < 10)\r\n                            r = _.multiply(temp, new Symbol('pi'));\r\n                    }\r\n                    //convert to a string so we can mark it as a known solution\r\n                    var r_str = r.toString();\r\n                    if (!existing[r_str])\r\n                        solutions.push(r); /*NO*/\r\n                    //mark the answer as seen\r\n                    existing[r_str] = true;\r\n                }\r\n            }\r\n        };\r\n        //maybe we get lucky\r\n        if (eqns.group === S && eqns.contains(solve_for)) {\r\n            add_to_result(new Symbol(0));\r\n            return solutions;\r\n        }\r\n        if (eqns.group === CB) {\r\n            var sf = String(solve_for); //everything else belongs to the coeff\r\n            //get the denominator and make sure it doesn't have x since we don't know how to solve for those\r\n            eqns.each(function (x) {\r\n                if (x.contains(sf))\r\n                    solve(x, solve_for, solutions);\r\n            });\r\n\r\n            return solutions;\r\n        }\r\n        \r\n        if(eqns.group === FN && eqns.fname === 'sqrt') {\r\n            eqns = _.pow(Symbol.unwrapSQRT(eqns), new Symbol(2));\r\n        }\r\n        //pass in false to not expand equations such as (x+y)^5.\r\n        //It suffices to solve for the numerator since there's no value in the denominator which yields a zero for the function\r\n        var eq = (core.Utils.isSymbol(eqns) ? eqns : __.toLHS(eqns, false)).getNum(),\r\n                vars = core.Utils.variables(eq), //get a list of all the variables\r\n                numvars = vars.length;//how many variables are we dealing with\r\n        \r\n        //it sufficient to solve (x+y) if eq is (x+y)^n since 0^n\r\n        if(core.Utils.isInt(eq.power) && eq.power > 0) {\r\n            eq = _.parse(eq).toLinear();\r\n        }\r\n       \r\n        //if we're dealing with a single variable then we first check if it's a \r\n        //polynomial (including rationals).If it is then we use the Jenkins-Traubb algorithm.     \r\n        //Don't waste time\r\n        if (eq.group === S || eq.group === CB && eq.contains(solve_for))\r\n            return [new Symbol(0)];\r\n        //force to polynomial. We go through each and then we look at what it would \r\n        //take for its power to be an integer\r\n        //if the power is a fractional we divide by the fractional power\r\n        var fractionals = {},\r\n                cfact;\r\n        var correct_denom = function (symbol) {\r\n            symbol = _.expand(symbol);\r\n            var original = symbol.clone(); //preserve the original\r\n            \r\n            if (symbol.symbols) {\r\n                for (var x in symbol.symbols) {\r\n                    var sym = symbol.symbols[x];\r\n                    \r\n                    //get the denominator of the sub-symbol\r\n                    var den = sym.getDenom();\r\n                    \r\n                    if(!den.isConstant(true) && symbol.isComposite()) {\r\n                        var t = new Symbol(0);\r\n                        symbol.each(function(e) {\r\n                            t = _.add(t, _.multiply(e, den.clone()));\r\n                        });\r\n\r\n                        return correct_denom(_.multiply(_.parse(symbol.multiplier), t));\r\n                    }\r\n                    \r\n                    var parts = explode(sym, solve_for);\r\n                    var is_sqrt = parts[1].fname === core.Settings.SQRT;\r\n                    var v = Symbol.unwrapSQRT(parts[1]);\r\n                    var p = v.power.clone();\r\n                    //circular logic with sqrt. Since sqrt(x) becomes x^(1/2) which then becomes sqrt(x), this continues forever\r\n                    //this needs to be terminated if p = 1/2\r\n                    if (!isSymbol(p) && !p.equals(1 / 2)) {\r\n                        if (p.den.gt(1)) {\r\n                            if (is_sqrt) {\r\n                                symbol = _.subtract(symbol, sym.clone());\r\n                                symbol = _.add(symbol, _.multiply(parts[0].clone(), v));\r\n                                return correct_denom(symbol);\r\n                            }\r\n                            var c = fractionals[p.den];\r\n                            fractionals[p.den] = c ? c++ : 1;\r\n                        }\r\n                        else if (p.sign() === -1) {\r\n                            var factor = _.parse(solve_for + '^' + Math.abs(p)); //this\r\n                            //unwrap the symbol's denoniator\r\n                            symbol.each(function (y, index) {\r\n                                if (y.contains(solve_for)) {\r\n                                    symbol.symbols[index] = _.multiply(y, factor.clone());\r\n                                }\r\n                            });\r\n                            fractionals = {};\r\n                            return correct_denom(_.parse(symbol));\r\n                        }\r\n                        else if (sym.group === PL) {\r\n                            var min_p = core.Utils.arrayMin(core.Utils.keys(sym.symbols));\r\n                            if (min_p < 0) {\r\n                                var factor = _.parse(solve_for + '^' + Math.abs(min_p));\r\n                                var corrected = new Symbol(0);\r\n                                original.each(function (x) {\r\n                                    corrected = _.add(corrected, _.multiply(x.clone(), factor.clone()));\r\n                                }, true);\r\n                                return corrected;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return symbol;\r\n        };\r\n\r\n        //separate the equation\r\n        var separate = function (eq) {\r\n            var lhs = new Symbol(0),\r\n                    rhs = new Symbol(0);\r\n            eq.each(function (x) {\r\n                if (x.contains(solve_for, true))\r\n                    lhs = _.add(lhs, x.clone());\r\n                else\r\n                    rhs = _.subtract(rhs, x.clone());\r\n            });\r\n            return [lhs, rhs];\r\n        };\r\n\r\n        __.inverseFunctionSolve = function(name, lhs, rhs) {\r\n            //ax+b comes back as [a, x, ax, b];\r\n            var parts = explode(lhs.args[0], solve_for);\r\n            //check if x is by itself\r\n            var x = parts[1];\r\n            if(x.group === S) {\r\n                return _.divide(_.symfunction(name, [_.divide(rhs, _.parse(lhs.multiplier))]), parts[0]);\r\n            }\r\n            \r\n        };\r\n        \r\n        //first remove any denominators\r\n        eq = correct_denom(eq);\r\n\r\n        if (eq.equals(0))\r\n            return [eq];\r\n        //correct fractionals. I can only handle one type right now\r\n        var fkeys = core.Utils.keys(fractionals);\r\n        if (fkeys.length === 1) {\r\n            //make a note of the factor\r\n            cfact = fkeys[0];\r\n            eq.each(function (x, index) {\r\n                if (x.contains(solve_for)) {\r\n                    var parts = explode(x, solve_for);\r\n                    var v = parts[1];\r\n                    var p = v.power;\r\n                    if (p.den.gt(1)) {\r\n                        v.power = p.multiply(new core.Frac(cfact));\r\n                        eq.symbols[index] = _.multiply(v, parts[0]);\r\n                    }\r\n                }\r\n            });\r\n            eq = _.parse(eq);\r\n        }\r\n        \r\n        //try for nested sqrts as per issue #486\r\n        add_to_result(__.sqrtSolve(eq, solve_for));\r\n        \r\n        //polynomial single variable\r\n        if (numvars === 1) {\r\n            if (eq.isPoly(true)) {\r\n                //try to factor and solve\r\n                var factors = new core.Algebra.Classes.Factors();\r\n                core.Algebra.Factor.factor(eq, factors);\r\n                //if the equation has more than one symbolic factor then solve those individually\r\n                if(factors.getNumberSymbolics() > 1) {\r\n                    for(var x in factors.factors) {\r\n                        add_to_result(solve(factors.factors[x], solve_for));\r\n                    }\r\n                }\r\n                else {\r\n                    var coeffs = core.Utils.getCoeffs(eq, solve_for),\r\n                            deg = coeffs.length - 1,\r\n                            was_calculated = false;\r\n                    if (vars[0] === solve_for) {\r\n                        //check to see if all the coefficients are constant\r\n                        if (checkAll(coeffs, function (x) {\r\n                            return x.group !== core.groups.N;\r\n                        })) {\r\n                            var roots = core.Algebra.proots(eq);\r\n                            //if all the roots are integers then return those\r\n                            if (checkAll(roots, function (x) {\r\n                                return !core.Utils.isInt(x);\r\n                            })) {\r\n                                //roots have been calculates\r\n                                was_calculated = true;\r\n                                roots.map(function (x) {\r\n                                    add_to_result(new Symbol(x));\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        if (!was_calculated) {\r\n                            eqns = _.parse(eqns);\r\n                            if(eqns instanceof core.Equation)\r\n                                eqns = eqns.toLHS();\r\n                            \r\n                            //we can solve algebraically for degrees 1, 2, 3. The remainder we switch to Jenkins-\r\n                            if (deg === 1)\r\n                                add_to_result(_.divide(coeffs[0], coeffs[1].negate()));\r\n                            else if (deg === 2) {\r\n                                add_to_result(_.expand(__.quad.apply(undefined, coeffs)));\r\n                            }\r\n                            else if (deg === 3) {\r\n                                var solutions = []; //set to blank\r\n                                //first try to factor and solve\r\n                                var factored = core.Algebra.Factor.factor(eqns);\r\n                                //if it was successfully factored\r\n                                var solutions = !factored.equals(eqns) ? solve(factored, solve_for) : [];\r\n                                if(solutions.length > 0)\r\n                                    add_to_result(solutions);\r\n                                else\r\n                                    add_to_result(__.cubic.apply(undefined, coeffs));\r\n                            }\r\n                            else {\r\n                                /*\r\n                                 var sym_roots = csolve(eq, solve_for); \r\n                                 if(sym_roots.length === 0)\r\n                                 sym_roots = divnconsolve(eq, solve_for);\r\n                                 if(sym_roots.length > 0) \r\n                                 add_to_result(sym_roots);\r\n                                 else\r\n                                 */\r\n                                _A.proots(eq).map(add_to_result);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                try {\r\n                    //Attempt Newton\r\n                    //since it's not a polynomial then we'll try to look for a solution using Newton's method\r\n                    //this is not a very broad search but takes the positions that something is better than nothing\r\n                    var has_trig = eq.hasTrig();\r\n                    // we get all the points where a possible zero might exist.\r\n                    var points1 = __.getPoints(eq, 0.1);\r\n                    var points2 = __.getPoints(eq, 0.05);\r\n                    var points3 = __.getPoints(eq, 0.01);\r\n                    var points = core.Utils.arrayUnique(points1.concat(points2).concat(points3)).sort(function(a, b) { return a-b});\r\n                    \r\n                    //generate slices\r\n                    //points = core.Utils.arrayAddSlices(points, Settings.NEWTON_SLICES); \r\n\r\n                    //compile the function and the derivative of the function\r\n                    var f = build(eq.clone());\r\n                    \r\n                    var d = _C.diff(eq.clone());\r\n                    \r\n                    var fp = build(d);\r\n                    for (var i = 0; i < points.length; i++) {\r\n                        var point = points[i];\r\n                        \r\n                        add_to_result(__.Newton(point, f, fp), has_trig);\r\n                    }\r\n                    solutions.sort();\r\n                }\r\n                catch(e) {\r\n                    console.log(e);\r\n                }   \r\n            }\r\n        }\r\n        else {\r\n            //The idea here is to go through the equation and collect the coefficients\r\n            //place them in an array and call the quad or cubic function to get the results\r\n            if (!eq.hasFunc(solve_for) && eq.isComposite()) {\r\n                try {\r\n                    var factored = core.Algebra.Factor.factor(eq.clone());\r\n                    \r\n                    if(factored.group === CB) {\r\n                        factored.each(function(x) {\r\n                            add_to_result(solve(x, solve_for));\r\n                        });\r\n                    }\r\n                    else {\r\n                        var coeffs = core.Utils.getCoeffs(eq, solve_for);\r\n\r\n                        var l = coeffs.length,\r\n                                deg = l - 1; //the degree of the polynomial\r\n                        //get the denominator and make sure it doesn't have x\r\n\r\n                        //handle the problem based on the degree\r\n                        switch (deg) {\r\n                            case 0:\r\n                                var separated = separate(eq);\r\n                                var lhs = separated[0],\r\n                                        rhs = separated[1];\r\n                                if (lhs.group === core.groups.EX) {\r\n                                    add_to_result(_.parse(core.Utils.format(core.Settings.LOG+'(({0})/({2}))/'+core.Settings.LOG+'({1})', rhs, lhs.value, lhs.multiplier)));\r\n                                }\r\n                                break;\r\n                            case 1:\r\n                                //nothing to do but to return the quotient of the constant and the LT\r\n                                //e.g. 2*x-1\r\n                                add_to_result(_.divide(coeffs[0], coeffs[1].negate()));\r\n                                break;\r\n                            case 2:\r\n                                add_to_result(__.quad.apply(undefined, coeffs));\r\n                                break;\r\n                            case 3:\r\n                                add_to_result(__.cubic.apply(undefined, coeffs));\r\n                                break;\r\n                            case 4:\r\n                                add_to_result(__.quartic.apply(undefined, coeffs));\r\n                                break;\r\n                            default:\r\n                                add_to_result(__.csolve(eq, solve_for));\r\n                                if (solutions.length === 0)\r\n                                    add_to_result(__.divideAndConquer(eq, solve_for));\r\n                        }\r\n                        \r\n                        if(solutions.length === 0) {\r\n                            //try factoring\r\n                            add_to_result(solve(factored, solve_for, solutions, depth));\r\n                        }\r\n                    }  \r\n                    \r\n                }\r\n                catch (e) { /*something went wrong. EXITING*/\r\n                    ;\r\n                }\r\n            }\r\n            else {\r\n                try {\r\n                    var rw = __.rewrite(eq, null, solve_for); \r\n                    var lhs = rw[0];\r\n                    var rhs = rw[1];\r\n                    if (lhs.group === FN) {\r\n                        if (lhs.fname === 'abs') {\r\n                            add_to_result([rhs.clone(), rhs.negate()]);\r\n                        }\r\n                        else if(lhs.fname === 'sin') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('asin', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === 'cos') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('acos', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === 'tan') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('atan', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === core.Settings.LOG) {\r\n                            //ax+b comes back as [a, x, ax, b];\r\n                            var parts = explode(lhs.args[0], solve_for);\r\n                            //check if x is by itself\r\n                            var x = parts[1];\r\n                            if(x.group === S) {\r\n                                rhs = _.divide(_.subtract(_.pow(lhs.args.length > 1 ? lhs.args[1] : new Symbol('e'), _.divide(rhs, _.parse(lhs.multiplier))), parts[3]), parts[0]);\r\n                                var eq = new Equation(x, rhs).toLHS();\r\n                                add_to_result(solve(eq, solve_for));\r\n                            }\r\n                            \r\n                        }\r\n                        else\r\n                            add_to_result(_.subtract(lhs, rhs));\r\n                    }\r\n                    else {\r\n                        var neq = new Equation(lhs, rhs).toLHS(); //create a new equation\r\n\r\n                        if(neq.equals(eq))\r\n                            throw new Error('Stopping. No stop condition exists');\r\n                        add_to_result(solve(neq, solve_for));\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    //Let's try this another way\r\n                    try {\r\n                        //1. if the symbol is in the form a*b*c*... then the solution is zero if \r\n                        //either a or b or c is zero.\r\n                        if (eq.group === CB)\r\n                            add_to_result(0);\r\n                        else if (eq.group === CP) {\r\n                            var separated = separate(eq);\r\n                            var lhs = separated[0],\r\n                                    rhs = separated[1];\r\n\r\n                            //reduce the equation\r\n                            if (lhs.group === core.groups.EX && lhs.value === solve_for) {\r\n                                //change the base of both sides\r\n                                var p = lhs.power.clone().invert();\r\n                                add_to_result(_.pow(rhs, p));\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        ;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (cfact) {\r\n            solutions = solutions.map(function (x) {\r\n                return _.pow(x, new Symbol(cfact));\r\n            });\r\n        }\r\n        \r\n        return solutions;\r\n    };\r\n    \r\n    //Register the functions for external use\r\n    nerdamer.register([\r\n        {\r\n            name: 'solveEquations',\r\n            parent: 'nerdamer',\r\n            numargs: -1,\r\n            visible: true,\r\n            build: function () {\r\n                return solve; //comment out to return a vector\r\n                /*\r\n                 return function() {\r\n                 return core.Utils.convertToVector(solve.apply(null, arguments));\r\n                 };\r\n                 */\r\n            }\r\n        },\r\n        {\r\n            name: 'solve',\r\n            parent: 'Solve',\r\n            numargs: 2,\r\n            visible: true,\r\n            build: function () {\r\n                return core.Solve.solve;\r\n            }\r\n        },\r\n        /*\r\n         {\r\n         name: 'polysolve',\r\n         parent: 'Solve',\r\n         visible: true,\r\n         build: function(){ return polysolve; }\r\n         },\r\n         */\r\n        {\r\n            name: 'setEquation',\r\n            parent: 'Solve',\r\n            visible: true,\r\n            build: function () {\r\n                return setEq;\r\n            }\r\n        }\r\n    ]);\r\n    nerdamer.api();\r\n})();","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/* global module */\r\n\r\n/*\r\n* Author : Martin Donk\r\n* Website : http://www.nerdamer.com\r\n* Email : martin.r.donk@gmail.com\r\n* Source : https://github.com/jiggzson/nerdamer\r\n*/\r\n\r\nif((typeof module) !== 'undefined' && typeof nerdamer === 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Algebra.js');\r\n}\r\n\r\n(function() {\r\n    \"use strict\";\r\n    \r\n    var core = nerdamer.getCore(),\r\n        _ = core.PARSER,\r\n        Frac = core.Frac,\r\n        Settings = core.Settings,\r\n        isSymbol = core.Utils.isSymbol,\r\n        FN = core.groups.FN,\r\n        Symbol = core.Symbol,\r\n        text = core.Utils.text,\r\n        inBrackets = core.Utils.inBrackets,\r\n        isInt = core.Utils.isInt,\r\n        format = core.Utils.format,\r\n        even = core.Utils.even,\r\n        evaluate = core.Utils.evaluate,\r\n        N = core.groups. N,\r\n        S = core.groups.S,\r\n        FN = core.groups.FN,\r\n        PL = core.groups.PL,\r\n        CP = core.groups.CP,\r\n        CB = core.groups.CB,\r\n        EX = core.groups.EX,\r\n        P = core.groups.P,\r\n        LOG = Settings.LOG, \r\n        EXP = 'exp', \r\n        ABS = 'abs', \r\n        SQRT = 'sqrt',\r\n        SIN = 'sin',  \r\n        COS = 'cos', \r\n        TAN = 'tan',\r\n        SEC = 'sec', \r\n        CSC = 'csc', \r\n        COT = 'cot',\r\n        ASIN = 'asin', \r\n        ACOS = 'acos', \r\n        ATAN = 'atan',\r\n        ASEC = 'asec', \r\n        ACSC = 'acsc', \r\n        ACOT = 'acot',\r\n        SINH = 'sinh',   \r\n        COSH = 'cosh',\r\n        TANH = 'tanh',\r\n        CSCH = 'csch',\r\n        SECH = 'sech',\r\n        COTH = 'coth',\r\n        ASECH = 'asech',\r\n        ACSCH = 'acsch',\r\n        ACOTH = 'acoth';\r\n        \r\n        \r\n    //custom errors\r\n    function NoIntegralFound(msg){\r\n        this.message = msg || \"\";\r\n    }\r\n    NoIntegralFound.prototype = new Error();\r\n    \r\n    //Preparations\r\n    Symbol.prototype.hasIntegral = function() {\r\n        return this.containsFunction('integrate');\r\n    };\r\n    //transforms a function\r\n    Symbol.prototype.fnTransform = function() { \r\n        if(this.group !== FN)\r\n            return this;\r\n        var retval, a = this.args[0];\r\n        var m = new Symbol(this.multiplier);\r\n        var sym = this.clone().toUnitMultiplier();\r\n        if(this.isLinear()) {\r\n            switch(this.fname) {\r\n                case SINH:\r\n                    retval = _.parse(format('(e^({0})-e^(-({0})))/2', a));\r\n                    break;\r\n                case COSH:\r\n                    retval = _.parse(format('(e^({0})+e^(-({0})))/2', a));\r\n                    break;\r\n                case TANH:\r\n                    retval = _.parse(format('(e^({0})-e^(-({0})))/(e^({0})+e^(-({0})))', a));\r\n                    break;\r\n                case TAN:\r\n                    retval = _.parse(format('sin({0})/cos({0})', a));\r\n                    break;\r\n                case CSC:\r\n                    retval = _.parse(format('1/sin({0})', a));\r\n                    break;\r\n                case SEC:\r\n                    retval = _.parse(format('1/cos({0})', a));\r\n                    break;\r\n                default:\r\n                    retval = sym;\r\n            }\r\n        }\r\n        else if(this.power.equals(2)) {\r\n            switch(this.fname) {\r\n                case SIN:\r\n                    retval = _.parse(format('1/2-cos(2*({0}))/2', a));\r\n                    break;\r\n                case COS:\r\n                    retval = _.parse(format('1/2+cos(2*({0}))/2', a));\r\n                    break;\r\n                case TAN:\r\n                    //retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))', a));\r\n                    retval = _.parse(format('sin({0})^2/cos({0})^2', a));\r\n                    break;\r\n                case COSH:\r\n                    retval = _.parse(format('1/2+cosh(2*({0}))/2', a));\r\n                    break;\r\n                case SINH:\r\n                    retval = _.parse(format('-1/2+cosh(2*({0}))/2', a));\r\n                    break;\r\n                case TANH:\r\n                    retval = _.parse(format('(1+cosh(2*({0})))/(-1+cosh(2*({0})))', a));\r\n                    break;\r\n                case SEC:\r\n                    retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))+1', a));\r\n                    break;\r\n                default:\r\n                    retval = sym;\r\n            }\r\n        }\r\n        else if(this.fname === SEC) {\r\n            retval = _.parse(format('1/cos({0})^({1})', this.args[0], this.power));\r\n        }\r\n        else if(this.fname === CSC) {\r\n            retval = _.parse(format('1/sin({0})^({1})', this.args[0], this.power));\r\n        }\r\n        else if(this.fname === TAN) {\r\n            if(this.power.lessThan(0)) {\r\n                retval = _.parse(format('cos({0})^(-({1}))/sin({0})^({1})', this.args[0], this.power.negate()));\r\n            }\r\n            else {\r\n                retval = _.parse(format('sin({0})^({1})/cos({0})^({1})', this.args[0], this.power));\r\n            }\r\n        }\r\n        else if(this.fname === SIN && this.power.lessThan(0)) {\r\n            retval = _.parse(format('csc({0})^(-({1}))', this.args[0], this.power.negate()));\r\n        }\r\n        else if(this.fname === COS && this.power.lessThan(0)) {\r\n            retval = _.parse(format('sec({0})^(-({1}))', this.args[0], this.power.negate()));\r\n        }\r\n        else if(this.fname === SIN && this.power.equals(3)) {\r\n            retval = _.parse(format('(3*sin({0})-sin(3*({0})))/4', this.args[0]));\r\n        }\r\n        else if(this.fname === COS && this.power.equals(3)) {\r\n            retval = _.parse(format('(cos(3*({0}))+3*cos({0}))/4', this.args[0]));\r\n        }\r\n        else\r\n            retval = sym;\r\n        \r\n        return _.multiply(retval, m);\r\n    };\r\n    \r\n    Symbol.prototype.hasTrig = function() {\r\n        if(this.isConstant(true) || this.group === S)\r\n            return false;\r\n        if(this.fname && (core.Utils.in_trig(this.fname) || core.Utils.in_inverse_trig(this.fname)))\r\n            return true;\r\n        if(this.symbols) {\r\n            for(var x in this.symbols)\r\n                if(this.symbols[x].hasTrig())\r\n                    return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    core.Expression.prototype.hasIntegral = function() {\r\n        return this.symbol.hasIntegral();\r\n    };\r\n    /**\r\n     * Attempts to rewrite a symbol under one common denominator\r\n     * @param {Symbol} symbol \r\n     */\r\n    core.Utils.toCommonDenominator = function(symbol) {\r\n        //transform x/a+x -> (ax+x)/a\r\n        if(symbol.isComposite() && symbol.isLinear()) {\r\n            var m = new Symbol(symbol.multiplier);\r\n            var denominator = new Symbol(1);\r\n            var numerator = new Symbol(0);\r\n            symbol.each(function(x) {\r\n                denominator = _.multiply(denominator, x.getDenom());\r\n            }, true);\r\n\r\n            //remove the denomitor in each term\r\n            symbol.each(function(x) {\r\n                var num = x.getNum();\r\n                var den = x.getDenom();\r\n                var factor = _.multiply(num, _.divide(denominator.clone(), den));\r\n                numerator = _.add(numerator, factor);\r\n            });\r\n            var retval = _.multiply(m, core.Algebra.divide(_.expand(numerator), _.expand(denominator)));\r\n            return retval;\r\n        }\r\n        return symbol;\r\n    };\r\n    //A function to check if a function name is an inverse trig function\r\n    core.Utils.in_inverse_trig = function(x) {\r\n        var inv_trig_fns = [ASIN, ACOS, ATAN,   ACSC, ASEC, ACOT];\r\n        return inv_trig_fns.indexOf(x) !== -1;\r\n    };\r\n    //A function to check if a function name is a trig function\r\n    core.Utils.in_trig = function(x) {\r\n        var trig_fns = [COS, SIN, TAN, SEC, CSC, COT];\r\n        return trig_fns.indexOf(x) !== -1;\r\n    };\r\n    \r\n    core.Utils.in_htrig = function(x) {\r\n        var trig_fns = [SINH, COSH, TANH, ACSCH, ASECH, ACOTH];\r\n        return trig_fns.indexOf(x) !== -1;\r\n    };\r\n    \r\n    var all_functions = core.Utils.all_functions = function(arr) {\r\n        for(var i=0, l=arr.length; i<l; i++)\r\n            if(arr[i].group !== FN)\r\n                return false;\r\n        return true;\r\n    },\r\n    cosAsinBtransform = core.Utils.cosAsinBtranform = function(symbol1, symbol2) {\r\n        var a, b;\r\n        a = symbol1.args[0];\r\n        b = symbol2.args[0];\r\n        return _.parse(format('(sin(({0})+({1}))-sin(({0})-({1})))/2', a, b));\r\n    },\r\n    cosAsinAtransform = core.Utils.cosAsinAtranform = function(symbol1, symbol2) {\r\n        //TODO: temporary fix for integrate(e^x*sin(x)*cos(x)^2).\r\n        //we technically know how to do this transform but more is needed for correct output\r\n        if(Number(symbol2.power) !== 1)\r\n            return _.multiply(symbol1, symbol2);\r\n        var a;\r\n        a = symbol1.args[0];\r\n        return _.parse(format('(sin(2*({0})))/2', a));\r\n    },\r\n    sinAsinBtransform = core.Utils.cosAsinBtranform = function(symbol1, symbol2) { \r\n        var a, b;\r\n        a = symbol1.args[0];\r\n        b = symbol2.args[0];\r\n        return _.parse(format('(cos(({0})+({1}))-cos(({0})-({1})))/2', a, b));\r\n    },\r\n    trigTransform = core.Utils.trigTransform = function(arr) { \r\n        var map = {}, symbol, t,\r\n            retval = new Symbol(1);\r\n        for(var i=0, l=arr.length; i<l; i++) {\r\n            symbol = arr[i]; \r\n            if(symbol.group === FN) {\r\n                var fname = symbol.fname;\r\n                if(fname === COS && map[SIN]) { \r\n                    if(map[SIN].args[0].toString() !== symbol.args[0].toString()) {\r\n                        t = cosAsinBtransform(symbol, map[SIN]);\r\n                    }\r\n                    else{\r\n                        t = cosAsinAtransform(symbol, map[SIN]);\r\n                    }\r\n                    delete map[SIN];\r\n                    retval = _.multiply(retval, t);\r\n                }\r\n                else if(fname === SIN && map[COS]) { \r\n                    if(map[COS].args[0].toString() !== symbol.args[0].toString()) {\r\n                        t = cosAsinBtransform(symbol, map[COS]);\r\n                    }\r\n                    else {\r\n                        t = cosAsinAtransform(symbol, map[COS]);\r\n                    }\r\n                    delete map[COS];\r\n                    retval = _.multiply(retval, t);\r\n                }\r\n                else if(fname === SIN && map[SIN]) {\r\n                    if(map[SIN].args[0].toString() !== symbol.args[0].toString()) {\r\n                        t = sinAsinBtransform(symbol, map[SIN]);\r\n                        delete map[SIN];\r\n                    }\r\n                    else {\r\n                        //This should actually be redundant code but let's put just in case\r\n                        t = _.multiply(symbol, map[SIN]);\r\n                        delete map[SIN];\r\n                    }\r\n                         \r\n                    retval = t;\r\n                }\r\n                else\r\n                    map[fname] = symbol;\r\n            }\r\n            else\r\n                retval = _.multiply(retval, symbol);\r\n        }\r\n        \r\n        //put back the remaining functions\r\n        for(var x in map) \r\n            retval = _.multiply(retval, map[x]);\r\n        \r\n        return retval;\r\n\r\n    };\r\n    \r\n    core.Settings.integration_depth = 10;\r\n    \r\n    var __ = core.Calculus = {\r\n\r\n        version: '1.4.5',\r\n\r\n        sum: function(fn, index, start, end) {\r\n            if(!(index.group === core.groups.S)) throw new core.exceptions.NerdamerTypeError('Index must be symbol. '+text(index)+' provided');\r\n            index = index.value;\r\n            var retval;\r\n            if(core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\r\n                var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\r\n                start = Number(start);\r\n                end = Number(end);\r\n                retval = core.Utils.block(modifier, function() {\r\n                    var f = fn.text(),\r\n                        subs = {'~': true}, //lock subs. Is this even being used?\r\n                    retval = new core.Symbol(0);\r\n\r\n                    for(var i=start; i<=end; i++) {\r\n                        subs[index] = new Symbol(i); \r\n                        var ans = _.parse(f, subs);\r\n                        retval = _.add(retval, ans);\r\n                    }\r\n                    return retval;\r\n                });\r\n            }\r\n            else {\r\n                retval = _.symfunction('sum',arguments);\r\n            }\r\n\r\n            return retval;\r\n        },\r\n        product: function(fn, index, start, end) {\r\n            if(!(index.group === core.groups.S)) throw new core.exceptions.NerdamerTypeError('Index must be symbol. '+text(index)+' provided');\r\n            index = index.value;\r\n            var retval;\r\n            if(core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\r\n                var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\r\n                retval = core.Utils.block(modifier, function() {\r\n                    start = Number(start);\r\n                    end = Number(end.multiplier);\r\n\r\n                    var f = fn.text(),\r\n                        subs = {},\r\n                        retval = new core.Symbol(1);\r\n\r\n                    for(var i=start; i<=end; i++) {\r\n                        subs[index] = new Symbol(i); \r\n                        retval = _.multiply(retval, _.parse(f, subs));\r\n                    }\r\n                    return retval;\r\n                });\r\n            }\r\n            else {\r\n                retval = _.symfunction('product', arguments);\r\n            }\r\n\r\n            return retval;\r\n        },\r\n        diff: function(symbol, wrt, nth) { \r\n            if(core.Utils.isVector(symbol)) {\r\n                var vector = new core.Vector([]);\r\n                symbol.each(function(x) {\r\n                    vector.elements.push(__.diff(x, wrt, nth));\r\n                });\r\n                return vector;\r\n            }\r\n            else if(core.Utils.isMatrix(symbol)) {\r\n                var matrix = new core.Matrix();\r\n                symbol.each(function(x, j, i) {\r\n                    matrix.set(i, j, __.diff(x, wrt, nth));\r\n                });\r\n                return matrix;\r\n            }\r\n\r\n            var d = isSymbol(wrt) ? wrt.text() : wrt; \r\n            //the nth derivative\r\n            nth = isSymbol(nth) ? nth.multiplier : nth || 1;\r\n            \r\n            if(d === undefined) d = core.Utils.variables(symbol)[0];\r\n            \r\n            //unwrap sqrt\r\n            if(symbol.group === FN && symbol.fname === SQRT) {\r\n                var s = symbol.args[0],\r\n                    sp = symbol.power.clone();\r\n                //these groups go to zero anyway so why waste time?\r\n                if(s.group !== N || s.group !== P) {\r\n                    s.power = isSymbol(s.power) ? _.multiply(s.power, _.multiply(new Symbol(1/2)), sp) : s.power.multiply(new Frac(0.5)).multiply(sp);\r\n                    s.multiplier = s.multiplier.multiply(symbol.multiplier);\r\n                }\r\n                    \r\n                symbol = s;\r\n            }\r\n\r\n            if(symbol.group === FN && !isSymbol(symbol.power)) {\r\n                var a = derive(_.parse(symbol)); \r\n                var b = __.diff(symbol.args[0].clone(), d); \r\n                symbol = _.multiply(a, b);//chain rule\r\n            }\r\n            else {\r\n                symbol = derive(symbol);\r\n            }\r\n            \r\n            if(nth > 1) { \r\n                nth--;\r\n                symbol = __.diff(symbol, wrt, nth);\r\n            }\r\n\r\n            return symbol;\r\n  \r\n             // Equivalent to \"derivative of the outside\".\r\n            function polydiff(symbol) {\r\n                if(symbol.value === d || symbol.contains(d, true)) { \r\n                    symbol.multiplier = symbol.multiplier.multiply(symbol.power);\r\n                    symbol.power = symbol.power.subtract(new Frac(1)); \r\n                    if(symbol.power.equals(0)) {\r\n                        symbol = Symbol(symbol.multiplier);\r\n                    }\r\n                } \r\n                \r\n                return symbol;\r\n            };\r\n            function derive(symbol) { \r\n                var g = symbol.group, a, b, cp; \r\n\r\n                if(g === N || g === S && symbol.value !== d || g === P) { \r\n                    symbol = Symbol(0);\r\n                }\r\n                else if(g === S) {  \r\n                    symbol = polydiff(symbol);\r\n                }\r\n                else if(g === CB) { \r\n                    var m = symbol.multiplier.clone();\r\n                    symbol.toUnitMultiplier();\r\n                    var retval =  _.multiply(product_rule(symbol),polydiff(symbol));\r\n                    retval.multiplier = retval.multiplier.multiply(m);\r\n                    return retval;\r\n                }\r\n                else if(g === FN && symbol.power.equals(1)) { \r\n                    // Table of known derivatives\r\n                    switch(symbol.fname) {\r\n                        case LOG:\r\n                            cp = symbol.clone(); \r\n                            symbol = symbol.args[0].clone();//get the arguments\r\n                            symbol.power = symbol.power.negate();\r\n                            symbol.multiplier = cp.multiplier.divide(symbol.multiplier); \r\n                            break;\r\n                        case COS:\r\n                            //cos -> -sin\r\n                            symbol.fname = SIN;\r\n                            symbol.multiplier.negate();\r\n                            break;\r\n                        case SIN: \r\n                            //sin -> cos\r\n                            symbol.fname = COS;\r\n                            break;\r\n                        case TAN:\r\n                            //tan -> sec^2\r\n                            symbol.fname = SEC;\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case SEC: \r\n                            // Use a clone if this gives errors\r\n                            symbol = qdiff(symbol, TAN);\r\n                            break;\r\n                        case CSC:\r\n                            symbol = qdiff(symbol, '-cot');\r\n                            break;\r\n                        case COT:\r\n                            symbol.fname = CSC;\r\n                            symbol.multiplier.negate();\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case ASIN:\r\n                            symbol = _.parse('(sqrt(1-('+text(symbol.args[0])+')^2))^(-1)');\r\n                            break;\r\n                        case ACOS:\r\n                            symbol = _.parse('-(sqrt(1-('+text(symbol.args[0])+')^2))^(-1)');\r\n                            break;\r\n                        case ATAN:\r\n                            symbol = _.parse('(1+('+text(symbol.args[0])+')^2)^(-1)');\r\n                            break;\r\n                        case ABS: \r\n                            m = symbol.multiplier.clone(); \r\n                            symbol.toUnitMultiplier();\r\n                            //depending on the complexity of the symbol it's easier to just parse it into a new symbol\r\n                            //this should really be readdressed soon\r\n                            b = symbol.args[0].clone();\r\n                            b.toUnitMultiplier();\r\n                            symbol = _.parse(inBrackets(text(symbol.args[0]))+'/abs'+inBrackets(text(b)));\r\n                            symbol.multiplier = m;\r\n                            break;\r\n                        case 'parens':\r\n                            //see product rule: f'.g goes to zero since f' will return zero. This way we only get back\r\n                            //1*g'\r\n                            symbol = Symbol(1);\r\n                            break;\r\n                        case 'cosh':\r\n                            //cosh -> -sinh\r\n                            symbol.fname = 'sinh';\r\n                            break;\r\n                        case 'sinh': \r\n                            //sinh -> cosh\r\n                            symbol.fname = 'cosh';\r\n                            break;\r\n                        case TANH:\r\n                            //tanh -> sech^2\r\n                            symbol.fname = SECH;\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case SECH: \r\n                            // Use a clone if this gives errors\r\n                            symbol = qdiff(symbol, '-tanh');\r\n                            break;\r\n                        case CSCH: \r\n                            var arg = String(symbol.args[0]);\r\n                            return _.parse('-coth('+arg+')*csch('+arg+')');\r\n                            break;\r\n                        case COTH: \r\n                            var arg = String(symbol.args[0]);\r\n                            return _.parse('-csch('+arg+')^2');\r\n                            break;\r\n                        case 'asinh':\r\n                            symbol = _.parse('(sqrt(1+('+text(symbol.args[0])+')^2))^(-1)');\r\n                            break;\r\n                        case 'acosh':\r\n                            symbol = _.parse('(sqrt(-1+('+text(symbol.args[0])+')^2))^(-1)');\r\n                            break;\r\n                        case 'atanh':\r\n                            symbol = _.parse('(1-('+text(symbol.args[0])+')^2)^(-1)');\r\n                            break;\r\n                        case ASECH:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1/('+arg+')^2-1)*('+arg+')^2)');\r\n                            break;\r\n                        case ACOTH:\r\n                            symbol = _.parse('-1/(('+symbol.args[0]+')^2-1)');\r\n                            break;\r\n                        case ACSCH:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1/('+arg+')^2+1)*('+arg+')^2)');\r\n                            break;\r\n                        case ASEC:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('1/(sqrt(1-1/('+arg+')^2)*('+arg+')^2)');\r\n                            break;\r\n                        case ACSC:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1-1/('+arg+')^2)*('+arg+')^2)');\r\n                            break;\r\n                        case ACOT:\r\n                            symbol = _.parse('-1/(('+symbol.args[0]+')^2+1)');\r\n                            break;\r\n                        case 'S':\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('sin((pi*('+arg+')^2)/2)');\r\n                            break;\r\n                        case 'C':\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('cos((pi*('+arg+')^2)/2)');\r\n                            break;\r\n                        case 'Si':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('sin('+arg+')/('+arg+')');\r\n                            break;\r\n                        case 'Shi':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('sinh('+arg+')/('+arg+')');\r\n                            break;\r\n                        case 'Ci':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('cos('+arg+')/('+arg+')');\r\n                            break;\r\n                        case 'Chi':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('cosh('+arg+')/('+arg+')');\r\n                            break;\r\n                        case 'Ei':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('e^('+arg+')/('+arg+')');\r\n                            break;\r\n                        case 'Li':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('1/'+Settings.LOG+'('+arg+')');\r\n                            break;\r\n                        case 'erf':\r\n                            symbol = _.parse('(2*e^(-('+symbol.args[0]+')^2))/sqrt(pi)');\r\n                            break;\r\n                        case 'atan2':\r\n                            var x_ = String(symbol.args[0]),\r\n                                y_ = String(symbol.args[1]);\r\n                            symbol = _.parse('('+y_+')/(('+y_+')^2+('+x_+')^2)');\r\n                            break;\r\n                        case 'sign':\r\n                            symbol = new Symbol(0);\r\n                            break;\r\n                        case Settings.LOG10:\r\n                            symbol = _.parse('1/(('+symbol.args[0]+')*'+Settings.LOG+'(10))');\r\n                            break;\r\n                        default:\r\n                            symbol = _.symfunction('diff', [symbol, wrt]);\r\n                    }\r\n                }\r\n                else if(g === EX || g === FN && isSymbol(symbol.power)) { \r\n                    var value;\r\n                    if(g === EX) {\r\n                        value = symbol.value;\r\n                    }\r\n                    else if(g === FN && symbol.contains(d)) { \r\n                        value = symbol.fname + inBrackets(text(symbol.args[0]));\r\n                    }\r\n                    else {\r\n                        value = symbol.value + inBrackets(text(symbol.args[0]));\r\n                    }\r\n                        a = _.multiply(_.parse(LOG+inBrackets(value)), symbol.power.clone()); \r\n                        b = __.diff(_.multiply(_.parse(LOG+inBrackets(value)), symbol.power.clone()), d); \r\n                    symbol = _.multiply(symbol, b);\r\n                }\r\n                else if(g === FN && !symbol.power.equals(1)) { \r\n                    b = symbol.clone();\r\n                    b.toLinear();\r\n                    b.toUnitMultiplier();\r\n                    symbol = _.multiply(polydiff(symbol.clone()), derive(b));  \r\n                }\r\n                else if( g === CP || g === PL ) { \r\n                    var result = new Symbol(0);\r\n                    for(var x in symbol.symbols) {\r\n                        result = _.add(result, __.diff(symbol.symbols[x].clone(), d));\r\n                    }\r\n                    symbol = _.multiply(polydiff(symbol.clone()), result);\r\n                }\r\n\r\n                symbol.updateHash();\r\n                return symbol;\r\n            };\r\n\r\n            function qdiff(symbol, val, altVal) {\r\n                return _.multiply(symbol, _.parse(val+inBrackets(altVal || text(symbol.args[0]))));\r\n            };\r\n\r\n            function product_rule(symbol) { \r\n                //grab all the symbols within the CB symbol\r\n                var symbols = symbol.collectSymbols(), \r\n                    result = new Symbol(0),\r\n                    l = symbols.length;\r\n                //loop over all the symbols\r\n                for(var i=0; i<l; i++) {\r\n                    var df = __.diff(symbols[i].clone(), d);\r\n                    for(var j=0; j<l; j++) {\r\n                        //skip the symbol of which we just pulled the derivative\r\n                        if(i !== j) {\r\n                            //multiply out the remaining symbols\r\n                            df = _.multiply(df, symbols[j].clone());\r\n                        }\r\n                    }\r\n                    //add the derivative to the result\r\n                    result = _.add(result, df);\r\n                }\r\n                return result; //done\r\n            };\r\n        },\r\n        integration: {\r\n            u_substitution: function(symbols, dx) { \r\n                function try_combo(a, b, f) {\r\n                    var d = __.diff(b, dx);\r\n                    var q = f ? f(a, b) : _.divide(a.clone(), d);\r\n                    if(!q.contains(dx, true)) \r\n                        return q;\r\n                    return null;\r\n                }\r\n                function do_fn_sub(fname, arg) { \r\n                    var subbed = __.integrate(_.symfunction(fname, [new Symbol(u)]), u, 0);\r\n                    subbed = subbed.sub(new Symbol(u), arg);\r\n                    subbed.updateHash();\r\n                    return subbed;\r\n                }\r\n\r\n                var a = symbols[0].clone(),\r\n                    b = symbols[1].clone(),\r\n                    g1 = a.group,\r\n                    g2 = b.group,\r\n                    //may cause problems if person is using this already. Will need\r\n                    //to find algorithm for detecting conflict\r\n                    u = '__u__', \r\n                    Q;\r\n                if(g1 === FN && g2 !== FN) {\r\n                    //e.g. 2*x*cos(x^2)\r\n                    var arg = a.args[0];\r\n                    Q = try_combo(b, arg.clone());\r\n                    if(Q) \r\n                        return _.multiply(Q, do_fn_sub(a.fname, arg));\r\n                    Q = try_combo(b, a);\r\n                    if(Q) {\r\n                        return __.integration.poly_integrate(a);\r\n                    }\r\n                }\r\n                else if(g2 === FN && g1 !== FN) {\r\n                    //e.g. 2*(x+1)*cos((x+1)^2\r\n                    var arg = b.args[0];\r\n                    Q = try_combo(a, arg.clone());\r\n                    if(Q) \r\n                        return _.multiply(Q, do_fn_sub(b.fname, arg));\r\n                }\r\n                else if(g1 === FN && g2 === FN) {\r\n                    Q = try_combo(a.clone(), b.clone());\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                    Q = try_combo(b.clone(), a.clone());\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                }\r\n                else if(g1 === EX && g2 !== EX) { \r\n                    var p = a.power; \r\n                    Q = try_combo(b, p.clone());\r\n                    if(!Q) {\r\n                        //one more try\r\n                        var dc = __.integration.decompose_arg(p.clone(), dx);\r\n                        //consider the possibility of a^x^(n-1)*x^n dx\r\n                        var xp = __.diff(dc[2].clone(), dx);\r\n                        var dc2 = __.integration.decompose_arg(xp.clone(), dx);\r\n                        //if their powers equal, so if dx*p == b\r\n                        if(_.multiply(dc[1], dc2[1]).power.equals(b.power)) {\r\n                            var m = _.divide(dc[0].clone(), dc2[0].clone());\r\n\r\n                            var new_val = _.multiply(m.clone(), _.pow(new Symbol(a.value), _.multiply(dc[0], new Symbol(u))));\r\n                            new_val = _.multiply(new_val, new Symbol(u));\r\n                            return __.integration.by_parts(new_val, u, 0, {}).sub(u, dc[1].clone());\r\n                        }\r\n\r\n                    }\r\n                    var integrated = __.integrate(a.sub(p.clone(), new Symbol(u)), u, 0),\r\n                            retval = _.multiply(integrated.sub(new Symbol(u), p), Q);\r\n                        \r\n                    \r\n                    return retval;\r\n                }\r\n                else if(g2 === EX && g1 !== EX) {\r\n                    var p = b.power;\r\n                    Q = try_combo(a, p.clone());\r\n                    var integrated = __.integrate(b.sub(p, new Symbol(u)), u, 0);\r\n                    return _.multiply(integrated.sub(new Symbol(u), p), Q);\r\n                }\r\n                else if(a.isComposite() || b.isComposite()) { \r\n                    var f = function(a, b) {\r\n                        var d = __.diff(b, dx);\r\n                        var A = core.Algebra.Factor.factor(a),\r\n                            B = core.Algebra.Factor.factor(d);\r\n                        var q = _.divide(A, B);\r\n                        return q;\r\n                    };\r\n                    var f1 = a.isComposite() ? a.clone().toLinear() : a.clone(),\r\n                        f2 = b.isComposite() ? b.clone().toLinear() : b.clone(); \r\n                    Q = try_combo(f1.clone(), f2.clone(), f); \r\n                    if(Q) \r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                    Q = try_combo(f2.clone(), f1.clone(), f);\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(a), Q);\r\n                }\r\n            },\r\n            //simple integration of a single polynomial x^(n+1)/(n+1)\r\n            poly_integrate: function(x) { \r\n                var p = x.power.toString(),\r\n                    m = x.multiplier.toDecimal(), \r\n                    s = x.toUnitMultiplier().toLinear();\r\n                if(Number(p) === -1) {\r\n                    return _.multiply(new Symbol(m), _.symfunction(LOG, [s]));\r\n                }\r\n                return _.parse(format('({0})*({1})^(({2})+1)/(({2})+1)', m, s, p));\r\n            },\r\n            //If we're just spinning wheels we want to stop. This is why we \r\n            //wrap integration in a try catch block and call this to stop.\r\n            stop: function(msg) {\r\n                msg = msg || 'Unable to compute integral!';\r\n                core.Utils.warn(msg);\r\n                throw new NoIntegralFound(msg);\r\n            },\r\n            partial_fraction: function(input, dx, depth, opt) { \r\n                //TODO: This whole thing needs to be rolled into one but for now I'll leave it as two separate parts\r\n                if(!isSymbol(dx))\r\n                    dx = _.parse(dx);\r\n                \r\n                var result, partial_fractions;\r\n                result = new Symbol(0);\r\n                partial_fractions = core.Algebra.PartFrac.partfrac(input, dx);\r\n\r\n                if(partial_fractions.group === CB && partial_fractions.isLinear()) {\r\n                    //perform a quick check to make sure that all partial fractions are linear\r\n                    partial_fractions.each(function(x) {\r\n                        if(!x.isLinear())\r\n                            __.integration.stop();\r\n                    })\r\n                    partial_fractions.each(function(x) {\r\n                        result = _.add(result, __.integrate(x, dx, depth, opt));\r\n                    });\r\n                }\r\n                else {\r\n                    result = _.add(result, __.integrate(partial_fractions, dx, depth, opt));\r\n                }\r\n                return result;\r\n            },\r\n            get_udv: function(symbol) { \r\n                var parts = [[/*L*/], [/*I*/], [/*A*/], [/*T*/], [/*E*/]];\r\n                //first we sort them \r\n                var setSymbol = function(x) { \r\n                    var g = x.group; \r\n                    if(g === FN) {\r\n                        var fname = x.fname;\r\n                        if(core.Utils.in_trig(fname) || core.Utils.in_htrig(fname))\r\n                            parts[3].push(x);\r\n                        else if(core.Utils.in_inverse_trig(fname))\r\n                            parts[1].push(x);\r\n                        else if(fname === LOG)\r\n                            parts[0].push(x);\r\n                        else { \r\n                            __.integration.stop();\r\n                        }\r\n                    }\r\n                    else if(g === S || x.isComposite() && x.isLinear() || g === CB && x.isLinear()) {\r\n                        parts[2].push(x);\r\n                    }\r\n                    else if(g === EX || x.isComposite() && !x.isLinear())\r\n                        parts[4].push(x);\r\n                    else\r\n                        __.integration.stop();\r\n                };\r\n                \r\n                if(symbol.group === CB) \r\n                    symbol.each(function(x) { \r\n                        setSymbol(Symbol.unwrapSQRT(x, true));\r\n                    });\r\n                else \r\n                    setSymbol(symbol);\r\n                var u, dv = new Symbol(1);\r\n                //compile u and dv\r\n                for(var i=0; i<5; i++) { \r\n                    var part = parts[i], t,\r\n                        l = part.length;\r\n                    if(l > 0) {\r\n                        if(l > 1) {\r\n                            t = new Symbol(1);\r\n                            for(var j=0; j<l; j++) \r\n                                t = _.multiply(t, part[j].clone());\r\n                        }\r\n                        else\r\n                            t = part[0].clone();\r\n\r\n                        if(!u) { \r\n                            u = t;//the first u encountered gets chosen\r\n                            u.multiplier = u.multiplier.multiply(symbol.multiplier); //the first one gets the mutliplier\r\n                        } \r\n                        else dv = _.multiply(dv, t); //everything else belongs to dv\r\n                    }  \r\n                }\r\n\r\n                return [u, dv];\r\n            },\r\n            \r\n            trig_sub: function(symbol, dx, depth, opt, parts, symbols) {  \r\n                parts = parts || __.integration.decompose_arg(symbol.clone().toLinear(), dx);\r\n                var b = parts[3],\r\n                    ax = parts[2],\r\n                    a = parts[0],\r\n                    x = parts[1]; \r\n                if(x.power.equals(2) && a.greaterThan(0)) {\r\n                    //use tan(x)\r\n                    var t = core.Utils.getU(symbol), //get an appropriate u\r\n                        u = _.parse(TAN+inBrackets(t)), //u\r\n                        du = _.parse(SEC+inBrackets(t)+'^2'), //du\r\n                        f = _.multiply(symbol.sub(x, u), du);\r\n                    var integral = __.integrate(f, t, depth, opt).sub(u, x);\r\n                    core.Utils.clearU(u);\r\n                    return integral;\r\n                }\r\n            },\r\n            \r\n            by_parts: function(symbol, dx, depth, o) { \r\n                o.previous = o.previous || [];\r\n                var udv, u, dv, du, v, vdu, uv, retval, integral_vdu, m, c, vdu_s;\r\n                //first LIATE\r\n                udv = __.integration.get_udv(symbol);\r\n                u = udv[0]; \r\n                dv = udv[1]; \r\n                du = Symbol.unwrapSQRT(_.expand(__.diff(u.clone(), dx)), true); \r\n                c = du.clone().stripVar(dx);\r\n                //strip any coefficients\r\n                du = _.divide(du, c.clone());\r\n                v = __.integrate(dv.clone(), dx, depth || 0); \r\n                vdu = _.multiply(v.clone(), du); \r\n                vdu_s = vdu.toString();\r\n                //currently only supports e^x*(some trig)\r\n                if(o.previous.indexOf(vdu_s) !== -1 && (core.Utils.in_trig(u.fname)) && dv.isE()) { \r\n                    //We're going to exploit the fact that vdu can never be constant\r\n                    //to work out way out of this cycle. We'll return the length of\r\n                    //the this.previous array until we're back at level one\r\n                    o.is_cyclic = true;\r\n                    //return the integral. \r\n                    return new Symbol(1);\r\n                }\r\n                else\r\n                    o.previous.push(vdu_s);\r\n\r\n                uv = _.multiply(u, v); \r\n                //clear the multiplier so we're dealing with a bare integral\r\n                m = vdu.multiplier.clone();\r\n                vdu.toUnitMultiplier();\r\n                integral_vdu = _.multiply(__.integrate(vdu.clone(), dx, depth, o), c); \r\n                integral_vdu.multiplier = integral_vdu.multiplier.multiply(m);\r\n                retval = _.subtract(uv, integral_vdu);\r\n                //we know that there cannot be constants so they're a holdover from a cyclic integral\r\n                if(o.is_cyclic) { \r\n                    //start popping the previous stack so we know how deep in we are\r\n                    o.previous.pop();\r\n                    if(o.previous.length === 0) {\r\n                        retval = _.expand(retval);\r\n                        var rem = new Symbol(0);\r\n                        retval.each(function(x) {\r\n                            if(!x.contains(dx))\r\n                                rem = _.add(rem, x.clone());\r\n                        });\r\n                        //get the actual uv\r\n                        retval = _.divide(_.subtract(retval, rem.clone()), _.subtract(new Symbol(1), rem));\r\n                    }\r\n                }\r\n                \r\n                return retval;\r\n            },\r\n            /*\r\n             * dependents: [Solve, integrate]\r\n             */\r\n            decompose_arg: core.Utils.decompose_fn\r\n        },\r\n        //TODO: nerdamer.integrate('-e^(-a*t)*sin(t)', 't') -> gives incorrect output\r\n        integrate: function(original_symbol, dt, depth, opt) { \r\n            //assume integration wrt independent variable if expression only has one variable\r\n            if(!dt) {\r\n                var vars = core.Utils.variables(original_symbol);\r\n                if(vars.length === 1)\r\n                    dt = vars[0]; \r\n                //defaults to x\r\n                dt = dt || 'x';\r\n            }\r\n            //add support for integrating vectors\r\n            if(core.Utils.isVector(original_symbol)) {\r\n                var vector = new core.Vector([]);\r\n                original_symbol.each(function(x) {\r\n                    vector.elements.push(__.integrate(x, dt));\r\n                });\r\n                return vector;\r\n            }\r\n            if(!isNaN(dt))\r\n                _.error('variable expected but received '+dt);\r\n            //get rid of constants right away\r\n            if(original_symbol.isConstant(true))\r\n                return _.multiply(original_symbol.clone(), _.parse(dt));\r\n            \r\n            //configurations options for integral. This is needed for tracking extra options\r\n            //e.g. cyclic integrals or additional settings\r\n            opt = opt || {};\r\n            return core.Utils.block('PARSE2NUMBER', function() {\r\n                //make a note of the original symbol. Set only if undefined\r\n                depth = depth || 0;\r\n                var dx = isSymbol(dt) ? dt.toString() : dt,\r\n                    //we don't want the symbol in sqrt form. x^(1/2) is prefererred\r\n                    symbol = Symbol.unwrapSQRT(original_symbol.clone(), true), \r\n                    g = symbol.group,\r\n                    retval;\r\n\r\n                try { \r\n                    //We stop integration after x amount of recursive calls\r\n                    if(++depth > core.Settings.integration_depth) \r\n                        __.integration.stop('Maximum depth reached. Exiting!');\r\n\r\n                    //constants. We first eliminate anything that doesn't have dx. Everything after this has \r\n                    //to have dx or else it would have been taken care of below\r\n                    if(!symbol.contains(dx, true)) { \r\n                        retval = _.multiply(symbol.clone(), _.parse(dx));\r\n                    }\r\n                    //e.g. 2*x\r\n                    else if(g === S) {\r\n                        retval = __.integration.poly_integrate(symbol, dx, depth);\r\n                    }\r\n                    else if(g === EX) { \r\n                        if(symbol.previousGroup === FN && !(symbol.fname === 'sqrt' || symbol.fname === Settings.PARENTHESIS))\r\n                            __.integration.stop();\r\n                        //check the base\r\n                        if(symbol.contains(dx) && symbol.previousGroup !== FN) {\r\n                            //if the symbol also contains dx then we stop since we currently \r\n                            //don't know what to do with it e.g. x^x\r\n                            if(symbol.power.contains(dx))\r\n                                __.integration.stop();\r\n                            else { \r\n                                var t = __.diff(symbol.clone().toLinear(), dx);\r\n                                if(t.contains(dx))\r\n                                    __.integration.stop();\r\n                                //since at this point it's the base only then we do standard single poly integration\r\n                                //e.g. x^y\r\n                                retval = __.integration.poly_integrate(symbol, dx, depth);\r\n                            }\r\n                        }\r\n                        //e.g. a^x or 9^x\r\n                        else {\r\n                            var a = __.diff(symbol.power.clone(), dx);\r\n                            if(a.contains(dx)) {\r\n                                var aa = a.stripVar(dx),\r\n                                    x = _.divide(a.clone(), aa.clone());\r\n                                if(x.group === S && x.isLinear()) {\r\n                                    aa.multiplier = aa.multiplier.divide(new Frac(2));\r\n                                    return _.parse(format('({2})*(sqrt(pi)*erf(sqrt(-{0})*{1}))/(2*sqrt(-{0}))', aa, dx, symbol.multiplier));\r\n                                }\r\n                                else\r\n                                    __.integration.stop();\r\n                            }\r\n                            if(symbol.isE()) { \r\n                                if(a.isLinear())\r\n                                    retval = symbol;\r\n                                else {\r\n                                    if(a.isE() && a.power.group === S && a.power.power.equals(1))\r\n                                        retval = _.multiply(_.symfunction('Ei', [symbol.power.clone()]), symbol.power);\r\n                                    else\r\n                                        __.integration.stop();\r\n                                }\r\n                            }\r\n                            else {\r\n                                var d = _.symfunction(LOG, [_.parse(symbol.value)]);\r\n                                retval = _.divide(symbol, d);\r\n                            }\r\n                            retval = _.divide(retval, a);\r\n                        }\r\n                    }\r\n                    else if(symbol.isComposite() && symbol.isLinear()) { \r\n                        var m = _.parse(symbol.multiplier);\r\n                        symbol.toUnitMultiplier();\r\n                        retval = new Symbol(0);\r\n                        symbol.each(function(x) {\r\n                            retval = _.add(retval, __.integrate(x, dx, depth));\r\n                        });\r\n                        retval = _.multiply(m, retval);\r\n                    }\r\n                    else if(g === CP) { \r\n                        if(symbol.power.greaterThan(1))\r\n                            symbol = _.expand(symbol);\r\n                        if(symbol.power.equals(1)) {\r\n                            retval = new Symbol(0);\r\n                            symbol.each(function(x) {\r\n                                retval = _.add(retval, __.integrate(x, dx, depth));\r\n                            }, true);\r\n                        }\r\n                        else {\r\n                            var p = Number(symbol.power),\r\n                                m = symbol.multiplier.clone();//temporarily remove the multiplier\r\n                            symbol.toUnitMultiplier();\r\n                            var //below we consider the form ax+b\r\n                                fn = symbol.clone().toLinear(), //get just the pure function without the power\r\n                                decomp = __.integration.decompose_arg(fn, dx),\r\n                                //I have no idea why I used bx+a and not ax+b. TODO change this to something that makes sense\r\n                                b = decomp[3],\r\n                                ax = decomp[2],\r\n                                a = decomp[0],\r\n                                x = decomp[1]; \r\n                            if(p === -1 && x.group !== PL && x.power.equals(2)) { \r\n                                var b_is_positive = isInt(b) ? b > 0 : true;\r\n                                //we can now check for atan\r\n                                if(x.group === S && x.power.equals(2) && b_is_positive) { \r\n                                    ////then we have atan\r\n                                    //abs is redundants since the sign appears in both denom and num.\r\n                                    var unwrapAbs = function(s) {\r\n                                        var result = new Symbol(1);\r\n                                        s.each(function(x) {\r\n                                            result = _.multiply(result, x.fname === 'abs' ? x.args[0] : x);\r\n                                        });\r\n                                        return result;\r\n                                    };\r\n                                    var A = a.clone(),\r\n                                        B = b.clone();\r\n                                    A = _.pow(A, new Symbol(1/2));\r\n                                    B = _.pow(B, new Symbol(1/2));\r\n                                    //unwrap abs\r\n\r\n                                    var d = _.multiply(unwrapAbs(B), unwrapAbs(A)),\r\n                                        f = _.symfunction(ATAN, [_.divide(_.multiply(a, x.toLinear()), d.clone())]);\r\n                                    retval = _.divide(f, d);\r\n                                }\r\n                                else if(x.group === S && x.isLinear()) {\r\n                                    retval = _.divide(__.integration.poly_integrate(symbol), a);\r\n                                }\r\n                                else { \r\n                                    //1/(x^4+1)\r\n                                    if(x.power.equals(4)) {\r\n                                        //https://www.freemathhelp.com/forum/threads/55678-difficult-integration-int-1-(1-x-4)-dx\r\n                                        var A, B, C, D, E, F, f1, f2, f3, f4, L1, L2;\r\n                                        var br = inBrackets;\r\n                                        //apply rule: ax^4+b = (√ax^2+√2∜a∜bx+√b)(√ax^2-√2∜a∜bx+√b)\r\n                                        //get quadratic factors\r\n                                        A = _.parse(SQRT+br(a)+'*'+dx+'^2');\r\n                                        B = _.parse(SQRT+br(2)+'*'+br(a)+'^'+br('1/4')+'*'+br(b)+'^'+br('1/4')+'*'+dx);\r\n                                        C = _.parse(SQRT+br(b));\r\n                                        f1 = _.add(_.add(A.clone(), B.clone()), C.clone());\r\n                                        f2 = _.add(_.subtract(A, B), C);\r\n                                        //calculate numerators: [D+E, D-E] -> [√2*b^(3/4)+√b∜ax, √2*b^(3/4)-√b∜ax]\r\n                                        D = _.parse(SQRT+br(2)+'*'+br(b)+'^'+br('3/4'));\r\n                                        E = _.parse(SQRT+br(b)+'*'+br(b)+'^'+br('1/4')+'*'+dx);\r\n                                        //let F = 2b√2∜b\r\n                                        F = _.parse(2+'*'+br(b)+'*'+SQRT+br(2)+'*'+br(b)+'^'+br('1/4'));\r\n                                        //calculate the factors\r\n                                        L1 = _.divide(_.subtract(D.clone(), E.clone()), _.multiply(F.clone(), f2));\r\n                                        L2 = _.divide(_.add(D, E), _.multiply(F, f1.clone()));\r\n                                        retval = _.add(\r\n                                                    __.integrate(L1, dx, depth, opt),\r\n                                                    __.integrate(L2, dx, depth, opt)\r\n                                                );\r\n                                    }\r\n                                    else\r\n                                        //let's try partial fractions\r\n                                        retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                }\r\n                            }\r\n                            else if(p === -1/2) {\r\n                                //detect asin and atan\r\n                                if(x.group === S && x.power.equals(2)) {\r\n                                    if(ax.multiplier.lessThan(0) && !b.multiplier.lessThan(0)) {\r\n                                        a.negate();\r\n                                        //it's asin\r\n                                        if(b.isConstant() && a.isConstant()) {\r\n                                            var d = _.symfunction(SQRT, [a.clone()]),\r\n                                                d2 = _.symfunction(SQRT, [_.multiply(a.clone(), b)]);\r\n                                            retval = _.divide(_.symfunction(ASIN, [_.divide(ax.toLinear(), d2)]), d);\r\n                                        }\r\n                                        //I'm not sure about this one. I'm trusting Wolfram Alpha here\r\n                                        else {\r\n                                            var sqrt_a = _.symfunction(SQRT, [a]),\r\n                                                sqrt_ax = _.multiply(sqrt_a.clone(), x.clone().toLinear());\r\n                                            retval = _.divide(_.symfunction(ATAN, [_.divide(sqrt_ax, _.symfunction(SQRT, [fn.clone()]))]), sqrt_a);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        /*WHAT HAPPENS HERE???? e.g. integrate(3/sqrt(-a+b*x^2),x) or integrate(3/sqrt(a+b*x^2),x)*/\r\n                                        __.integration.stop();\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    //This would be a case like 1/(sqrt(1-x^3) or 1/(1-(x+1)^2)\r\n                                    __.integration.stop();\r\n                                }\r\n                            }\r\n                            else { \r\n                                if(x.isLinear() && x.group !== PL) \r\n                                    retval = _.divide(__.integration.poly_integrate(symbol), a);\r\n                                else if(x.power.equals(2) && a.greaterThan(0)) { \r\n                                    var sqa, sqb, aob, bsqi, n, integral, u, v, uv;\r\n                                    //1/(a*x^2+b^2)^n\r\n                                    //strip the value of b so b = 1\r\n                                    sqa = _.parse(SQRT+inBrackets(a)); //strip a so b = 1\r\n                                    sqb = _.parse(SQRT+inBrackets(b));\r\n                                    aob = _.multiply(sqa.clone(), sqb.clone()).invert();\r\n                                    bsqi = _.pow(b, new Symbol(symbol.power));\r\n                                    uv = core.Utils.getU(symbol);\r\n                                    u = _.multiply(aob, x.clone().toLinear());\r\n                                    v = _.parse(ATAN+inBrackets(u));\r\n                                    //the conversion will be 1+tan(x)^2 -> sec(x)^2\r\n                                    //since the denominator is now (sec(x)^2)^n and the numerator is sec(x)^2 \r\n                                    //then the remaining sec will be (n-1)*2;\r\n                                    var n = (Math.abs(symbol.power)-1)*2; \r\n                                    //1/sec(x)^n can now be converted to cos(x)^n and we can pull the integral of that\r\n                                    var integral = __.integrate(_.parse(COS+inBrackets(uv)+'^'+n));\r\n                                    core.Utils.clearU(uv);\r\n                                    return _.multiply(integral.sub(uv, v), bsqi);\r\n                                }\r\n                                else { \r\n                                    if(symbol.group !== CB && !symbol.power.lessThan(0)) {\r\n                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                    }\r\n                                    else { \r\n                                        var f = symbol.clone().toLinear();\r\n                                        var factored = core.Algebra.Factor.factor(f);\r\n                                        var was_factored = factored.toString() !== f.toString();\r\n                                        if(core.Algebra.degree(f, _.parse(dx)).equals(2) && !was_factored) { \r\n                                            try {\r\n                                                var f1, fx, u, sq;\r\n                                                sq = core.Algebra.sqComplete(f, dx);\r\n                                                u = core.Utils.getU(f);\r\n                                                f1 = sq.f.sub(sq.a, u);\r\n                                                fx = _.pow(f1, _.parse(symbol.power));\r\n                                                retval = __.integrate(fx, u).sub(u, sq.a);\r\n                                            }\r\n                                            catch(e) {\r\n                                                __.integration.stop();\r\n                                            }\r\n                                        }\r\n                                        else\r\n                                            retval = __.integration.partial_fraction(symbol, dx, depth, opt);\r\n                                    }\r\n                                }\r\n                            }\r\n                            retval.multiplier = retval.multiplier.multiply(m);\r\n                        }\r\n                    }\r\n                    else if(g === FN) { \r\n                        var arg = symbol.args[0],\r\n                            m = symbol.multiplier.clone();\r\n                        symbol.toUnitMultiplier();\r\n                        var decomp = __.integration.decompose_arg(arg, dx);\r\n                        //easies way I can think of to get the coefficient and to make sure\r\n                        //that the symbol is linear wrt dx. I'm not actually trying to get the \r\n                        //derivative\r\n                        var a = decomp[0],\r\n                            x = decomp[1],\r\n                            fname = symbol.fname;\r\n                        //log is a special case that can be handled with integration by parts\r\n                        if(fname === LOG || (fname === ASIN || fname === ACOS || fname === ATAN && x.isLinear())) { \r\n                            /*integration by parts */\r\n                            var p = symbol.power.toString(); \r\n                            if(isInt(p))\r\n                                depth = depth - p; //it needs more room to find the integral\r\n                            \r\n                            if(!arg.isComposite())\r\n                                retval = _.multiply(_.parse(m),__.integration.by_parts(symbol, dx, depth, opt)); \r\n                            else {\r\n                                //integral u du\r\n                                var u = core.Utils.getU(symbol);\r\n                                var f = _.pow(_.parse(LOG+inBrackets(u)),new Symbol(p));\r\n                                var du = __.diff(arg, dx);\r\n                                var u_du = _.multiply(f, du);\r\n                                var integral = __.integrate(u_du, u, depth, opt);\r\n                                retval = _.multiply(_.parse(m),integral.sub(u, arg));\r\n                            }\r\n\r\n                        }\r\n                        else if(fname === TAN && symbol.power.lessThan(0)) {\r\n                            //convert to cotangent\r\n                            var sym  = symbol.clone();\r\n                            sym.power.negate();\r\n                            sym.fname = COT;\r\n                            return _.multiply(_.parse(m),__.integrate(sym, dx, depth));\r\n                        }\r\n                        else {\r\n                            if(!a.contains(dx, true) && symbol.isLinear()) { //perform a deep search for safety\r\n                                //first handle the special cases \r\n                                if(fname === ABS) {\r\n                                    //REVISIT **TODO**\r\n                                    var x = _.divide(arg.clone(), a.clone());\r\n                                    if(x.group === S && !x.power.lessThan(0)) {\r\n                                        if(core.Utils.even(x.power)) {\r\n                                            retval = __.integrate(arg, dx, depth);\r\n                                        }\r\n                                        else {\r\n                                            var integrated = __.integrate(x, dx, depth);\r\n                                            integrated.power = integrated.power.subtract(new Frac(1));\r\n                                            retval = _.multiply(_.multiply(_.symfunction(ABS, [x.toLinear()]), integrated), a);\r\n                                        }\r\n                                    }\r\n                                    else \r\n                                        __.integration.stop();\r\n                                }\r\n                                else { \r\n                                    var ag = symbol.args[0].group,\r\n                                        decomposed = __.integration.decompose_arg(arg, dx);\r\n                                    \r\n                                    if(!(ag === CP || ag === S || ag === CB) || !decomposed[1].power.equals(1) || arg.hasFunc())\r\n                                        __.integration.stop();\r\n                                    /**TODO**/ //ASIN, ACOS, ATAN\r\n                                    switch(fname) {\r\n                                        case COS:\r\n                                            retval = _.symfunction(SIN, [arg]);\r\n                                            break;\r\n                                        case SIN:\r\n                                            retval = _.symfunction(COS, [arg]);\r\n                                            retval.negate();\r\n                                            break;\r\n                                        case TAN:\r\n                                            retval = _.parse(format(Settings.LOG+'(sec({0}))', arg));\r\n                                            break;\r\n                                        case SEC:\r\n                                            retval = _.parse(format(Settings.LOG+'(tan({0})+sec({0}))', arg));\r\n                                            break;\r\n                                        case CSC:\r\n                                            retval = _.parse(format('-'+Settings.LOG+'(csc({0})+cot({0}))', arg));\r\n                                            break;\r\n                                        case COT:\r\n                                            retval = _.parse(format(Settings.LOG+'(sin({0}))', arg));\r\n                                            break;\r\n                                        case SINH:\r\n                                            retval = _.symfunction(COSH, [arg]);\r\n                                            break;\r\n                                        case COSH:\r\n                                            retval = _.symfunction(SINH, [arg]);\r\n                                            break;\r\n                                        case TANH:\r\n                                            retval = _.parse(format(Settings.LOG+'(cosh({0}))', arg));\r\n                                            break;\r\n                                        case ASEC:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACSC:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACOT:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        //inverse htrig\r\n                                        case ASECH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACSCH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACOTH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        //end inverse htrig\r\n                                        //htrigh\r\n                                        case SECH:\r\n                                            retval = _.parse(format('atan(sinh({0}))', arg));\r\n                                            break;\r\n                                        case CSCH:\r\n                                            retval = _.parse(format(Settings.LOG+'(tanh(({0})/2))', arg));\r\n                                            break;\r\n                                        case COTH:\r\n                                            retval = _.parse(format(Settings.LOG+'(sinh({0}))', arg));\r\n                                            break;\r\n                                        //end htrig\r\n                                        case EXP:\r\n                                            retval = __.integrate(_.parse(format('e^({0})', arg)), dx, depth);\r\n                                            break;\r\n                                        case 'S':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                dc = __.integration.decompose_arg(arg, dx),\r\n                                                x_ = dc[1],\r\n                                                a_ = dc[0];\r\n                                            var b_ = dc[3];\r\n                                            retval = _.parse(format('(cos((1/2)*pi*(({1})+({0})*({2}))^2)+pi*(({1})+({0})*({2}))*S(({1})+({0})*({2})))/(({0})*pi)', a_, b_, x));\r\n                                            break;\r\n                                        case 'C':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                dc = __.integration.decompose_arg(arg, dx),\r\n                                                x_ = dc[1],\r\n                                                a_ = dc[0];\r\n                                            var b_ = dc[3];\r\n                                            retval = _.parse(format('(pi*(({1})+({0})*({2}))*C(({1})+({0})*({2}))-sin((1/2)*pi*(({1})+({0})*({2}))^2))/(({0})*pi)', a_, b_, x_));\r\n                                            break;\r\n                                        case 'erf':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                dc = __.integration.decompose_arg(arg, dx),\r\n                                                x_ = dc[1],\r\n                                                a_ = dc[0];\r\n                                            retval = _.parse(format('e^(-(({2}))^2)/(({0})*sqrt(pi))+(1/({0})+({1}))*erf(({2}))', a_, x_, arg));\r\n                                            break;\r\n                                        case 'sign':\r\n                                            retval = _.multiply(symbol.clone(), arg.clone());\r\n                                            break;\r\n                                        default:\r\n                                            __.integration.stop();\r\n                                    }\r\n\r\n                                    retval = _.divide(retval, a); \r\n                                }\r\n                            }\r\n                            else if(x.isLinear()) { \r\n                                if(fname === COS || fname === SIN) {\r\n                                    var p = Number(symbol.power);\r\n                                    //check to see if it's negative and then just transform it to sec or csc\r\n                                    if(p < 0) {\r\n                                        symbol.fname = fname === SIN ? CSC : SEC;\r\n                                        symbol.invert().updateHash();\r\n                                        retval = __.integrate(symbol, dx, depth);\r\n                                    }\r\n                                    else {\r\n                                        var arg = symbol.args[0],\r\n                                            rd = symbol.clone(), //cos^(n-1)\r\n                                            rd2 = symbol.clone(), //cos^(n-2)\r\n                                            q = new Symbol((p-1)/p), //\r\n                                            na = _.multiply(a.clone(), new Symbol(p)).invert(); //1/(n*a)\r\n                                        rd.power = rd.power.subtract(new Frac(1));\r\n                                        rd2.power = rd2.power.subtract(new Frac(2));\r\n\r\n                                        var t = _.symfunction(fname === COS ? SIN : COS, [arg.clone()]);\r\n                                        if(fname === SIN) t.negate();\r\n                                        retval = _.add(_.multiply(_.multiply(na, rd), t), _.multiply(q, __.integrate(_.parse(rd2), dx, depth)));\r\n                                    }\r\n                                }\r\n                                //tan(x)^n or cot(x)^n\r\n                                else if(fname === TAN || fname === COT) { \r\n                                    //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\r\n                                    if(symbol.args[0].isLinear(dx)) {\r\n                                        var n = symbol.power.subtract(new Frac(1)).toString(),\r\n                                            r = symbol.clone().toUnitMultiplier(),\r\n                                            w = _.parse(format((fname === COT ? '-' : '')+'1/({2}*{0})*{3}({1})^({0})', n, arg, a, fname));\r\n                                        r.power = r.power.subtract(new Frac(2));\r\n                                        if(r.power.equals(0))\r\n                                            r = _.parse(r);\r\n                                        retval = _.subtract(w, __.integrate(r, dx, depth));\r\n                                    }   \r\n                                }\r\n                                //sec(x)^n or csc(x)^n\r\n                                else if(fname === SEC || fname === CSC) { \r\n                                    //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\r\n                                    var n1 = symbol.power.subtract(new Frac(1)).toString(),\r\n                                        n2 = symbol.power.subtract(new Frac(2)).toString(),\r\n                                        f2 = fname === SEC ? TAN : COT,\r\n                                        r = symbol.clone().toUnitMultiplier(),\r\n                                        parse_str = format((fname === CSC ? '-' : '')+'1/({0}*{1})*{4}({3})^({2})*{5}({3})', a, n1, n2, arg, fname, f2),\r\n                                        w = _.parse(parse_str);\r\n                                    r.power = r.power.subtract(new Frac(2));\r\n                                    if(r.power.equals(0))\r\n                                        r = _.parse(r);\r\n                                    retval = _.add(w, _.multiply(new Symbol(n2/n1), __.integrate(r, dx, depth)));\r\n                                }\r\n                                else if((fname === COSH || fname === SINH) && symbol.power.equals(2)) {\r\n                                    retval = __.integrate(symbol.fnTransform(), dx, depth);\r\n                                }\r\n                                else\r\n                                    __.integration.stop();\r\n                            }\r\n                            else \r\n                                __.integration.stop();\r\n\r\n                            retval.multiplier = retval.multiplier.multiply(m);\r\n                        }\r\n                    }\r\n                    else if(g === PL) {\r\n                        retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                    }\r\n                    else if(g === CB) {\r\n                        var den = symbol.getDenom();\r\n                        if(den.group === S)\r\n                            symbol = _.expand(symbol);\r\n                        \r\n                        //separate the coefficient since all we care about are symbols containing dx\r\n                        var coeff = symbol.stripVar(dx); \r\n                        //now get only those that apply\r\n                        var cfsymbol = _.divide(symbol.clone(), coeff.clone()); //a coeff free symbol\r\n                        //peform a correction for stripVar. This is a serious TODO!\r\n                        if(coeff.contains(dx)) {\r\n                            cfsymbol = _.multiply(cfsymbol, coeff);\r\n                            coeff = new Symbol(1);\r\n                        }\r\n                        \r\n                        //if we only have one symbol left then let's not waste time. Just pull the integral\r\n                        //and let the chips fall where they may\r\n                        if(cfsymbol.group !== CB) {\r\n                            if(cfsymbol.equals(1)) { \r\n                                return __.integrate(_.expand(symbol), dx, depth);\r\n                            }\r\n                            \r\n                            //only factor for multivariate which are polynomials\r\n                            if(cfsymbol.clone().toLinear().isPoly(true) && core.Utils.variables(cfsymbol).length > 1) {\r\n                                cfsymbol = core.Algebra.Factor.factor(cfsymbol);\r\n                            }\r\n  \r\n                            retval = __.integrate(cfsymbol, dx, depth);\r\n                        }\r\n                        else { \r\n                            //we collect the symbols and sort them descending group, descending power, descending alpabethically\r\n                            var symbols = cfsymbol.collectSymbols().sort(function(a, b) {\r\n                                if(a.group === b.group)  {\r\n                                    if(Number(a.power) === Number(b.power))\r\n                                        if(a < b) return 1; //I want sin first\r\n                                        else return -1;\r\n                                    return b.power - a.power; //descending power\r\n                                }\r\n                                return b.group - a.group; //descending groups\r\n                            }).map(function(x) {\r\n                                var unwrapped = Symbol.unwrapSQRT(x, true);\r\n                                if(unwrapped.fname === EXP) {\r\n                                    return _.parse(format('({1})*e^({0})', unwrapped.args[0], unwrapped.multiplier));\r\n                                }\r\n                                return unwrapped;\r\n                            });\r\n                            var l = symbols.length;\r\n                            if(symbol.power < 0) { \r\n                                if(l === 2) {\r\n                                    return __.integrate(_.expand(symbol), dx, depth, opt);\r\n                                }\r\n                            }\r\n                            //otherwise the denominator is one lumped together symbol \r\n                            else {\r\n                                //generate an image for \r\n                                if(l === 2) {\r\n                                    //try u substitution\r\n                                    try {\r\n                                        retval = __.integration.u_substitution(symbols, dx);\r\n                                    }\r\n                                    catch(e){/* failed :`(*/; }   \r\n\r\n                                    if(!retval) { \r\n                                        //no success with u substitution so let's try known combinations\r\n                                        //are they two functions\r\n                                        var g1 = symbols[0].group,\r\n                                            g2 = symbols[1].group,\r\n                                            sym1 = symbols[0],\r\n                                            sym2 = symbols[1],\r\n                                            fn1 = sym1.fname,\r\n                                            fn2 = sym2.fname; \r\n                                        //reset the symbol minus the coeff\r\n                                        symbol = _.multiply(sym1.clone(), sym2.clone());\r\n                                        if(g1 === FN && g2 === FN) { \r\n                                            if(fn1 === LOG || fn2 === LOG) { \r\n                                                retval = __.integration.by_parts(symbol.clone(), dx, depth, opt);\r\n                                            }\r\n                                            else { \r\n                                                symbols.sort(function(a, b) {\r\n                                                    return b.fname > a.fname;\r\n                                                });\r\n                                                var arg1 = sym1.args[0];\r\n                                                //make sure the arguments are suitable. We don't know how to integrate non-linear arguments\r\n                                                if(!arg1.isLinear() || !(arg1.group === CP || arg1.group === CB || arg1.group === S))\r\n                                                    __.integration.stop();\r\n\r\n                                                var decomp = __.integration.decompose_arg(arg1, dx);\r\n                                                x = decomp[1],\r\n                                                a = decomp[0];\r\n                                                if(!x.isLinear()) //again... linear arguments only wrt x\r\n                                                    __.integration.stop();\r\n\r\n                                                //they have to have the same arguments and then we have cleared all the check to \r\n                                                //make sure we can integrate FN & FN\r\n                                                var arg2 = sym2.args[0];\r\n                                                //make sure that their argument matches\r\n                                                if(arg1.equals(arg2)) { \r\n                                                    if(fn1 === SIN && fn2 === COS || fn1 === COS && fn2 === SIN) { \r\n                                                        if(sym1.power.lessThan(0))\r\n                                                            __.integration.stop();//we don't know how to handle, sin(x)^n/cos(x)^m where m > n,  yet\r\n                                                        //if it's in the form sin(x)^n*cos(x)^n then we can just return tan(x)^n which we know how to integrate\r\n                                                        if(fn1 === SIN && sym1.power.add(sym2.power).equals(0)) { \r\n                                                            sym1.fname = TAN;\r\n                                                            sym1.updateHash();\r\n                                                            retval = __.integrate(sym1, dx, depth);\r\n                                                        }\r\n                                                        else {\r\n                                                            if(even(sym1.power) && fn2 === COS && sym2.power.lessThan(0)) {\r\n                                                                //transform sin^(2*n) to (1-cos^2)^n\r\n                                                                var n = Number(sym1.power)/2,\r\n                                                                    new_sym = _.parse(format('(1-cos({0})^2)^({1})', sym1.args[0], n));\r\n                                                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\r\n                                                            }\r\n                                                            else if(even(sym1.power) && fn2 === SIN && sym2.power.lessThan(0)) {\r\n                                                                //transform cos^(2*n) to (1-sin^2)^n\r\n                                                                var n = Number(sym1.power)/2,\r\n                                                                    new_sym = _.parse(format('(1-sin({0})^2)^({1})', sym1.args[0], n));\r\n                                                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\r\n                                                            }\r\n                                                            else {\r\n                                                                var p1_even = core.Utils.even(sym1.power),\r\n                                                                    p2_even = core.Utils.even(sym2.power);\r\n                                                                retval = new Symbol(0);\r\n                                                                if(!p1_even || !p2_even) { \r\n                                                                    var u, r, trans;\r\n                                                                    //since cos(x) is odd it carries du. If sin was odd then it would be the other way around\r\n                                                                    //know that p1 satifies the odd portion in this case. If p2 did than it would contain r\r\n                                                                    if(!p1_even) {\r\n                                                                        //u = sin(x)\r\n                                                                        u = sym2; r = sym1; \r\n                                                                    }\r\n                                                                    else {\r\n                                                                        u = sym1; r = sym2;\r\n                                                                    }\r\n                                                                    //get the sign of du. In this case r carries du as stated before and D(cos(x),x) = -sin(x)\r\n                                                                    var sign = u.fname === COS ? -1 : 1,\r\n                                                                        n = r.power, \r\n                                                                        //remove the du e.g. cos(x)^2*sin(x)^3 dx -> cos(x)^2*sin(x)^2*sin(x). We're left with two \r\n                                                                        //even powers afterwards which can be transformed\r\n                                                                        k = (n - 1)/2, \r\n                                                                        //make the transformation cos(x)^2 = 1 - sin(x)^2\r\n                                                                        trans = _.parse('(1-'+u.fname+core.Utils.inBrackets(arg1)+'^2)^'+k), \r\n                                                                        sym = _.expand(_.multiply(new Symbol(sign), _.multiply(u.clone(), trans)));\r\n                                                                    //we can now just loop through and integrate each since it's now just a polynomial with functions\r\n                                                                    sym.each(function(x) { \r\n                                                                        retval = _.add(retval, __.integration.poly_integrate(x.clone()));\r\n                                                                    });\r\n                                                                }\r\n                                                                else { \r\n                                                                    //performs double angle transformation\r\n                                                                    var double_angle = function(symbol) {\r\n                                                                        var p = symbol.power,\r\n                                                                            k = p/2, e;\r\n                                                                        if(symbol.fname === COS)\r\n                                                                            e = '((1/2)+(cos(2*('+symbol.args[0]+'))/2))^'+k;\r\n                                                                        else\r\n                                                                            e = '((1/2)-(cos(2*('+symbol.args[0]+'))/2))^'+k;\r\n\r\n                                                                        return _.parse(e);\r\n                                                                    };\r\n                                                                    //they're both even so transform both using double angle identities and we'll just\r\n                                                                    //be able to integrate by the sum of integrals\r\n                                                                    var a = double_angle(sym1),\r\n                                                                        b = double_angle(sym2),\r\n                                                                        t = _.multiply(a, b);\r\n                                                                    var sym = _.expand(t);\r\n                                                                    sym.each(function(x) {\r\n                                                                        retval = _.add(retval, __.integrate(x, dx, depth));\r\n                                                                    });\r\n                                                                    return _.multiply(retval, coeff);\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                    //tan(x)*sec(x)^n \r\n                                                    else if(fn1 === SEC && fn2 === TAN && x.isLinear() && sym2.isLinear()) { \r\n                                                        retval = _.parse(format('sec({0})^({1})/({1})', sym1.args[0], sym1.power));\r\n                                                    }\r\n                                                    else if(fn1 === TAN && fn2 === SEC && x.isLinear()) { \r\n                                                        //remaining: tan(x)^3*sec(x)^6\r\n                                                        if(sym1.isLinear() && sym2.isLinear()) {\r\n                                                            retval = _.divide(_.symfunction(SEC, [arg1.clone()]), a);\r\n                                                        }\r\n                                                        else if(even(sym1.power)) {\r\n                                                            var p = Number(sym1.power)/2;\r\n                                                            //transform tangent\r\n                                                            var t = _.parse(format('(sec({0})^2-1)^({1})', sym1.args[0], p));\r\n                                                            retval = __.integrate(_.expand(_.multiply(t, sym2)), dx, depth);\r\n                                                        }\r\n                                                        else\r\n                                                            __.integration.stop();\r\n                                                    }\r\n                                                    else if(fn1 === SEC && fn2 === COS) {\r\n                                                        sym1.fname = COS;\r\n                                                        sym1.invert().updateHash();\r\n                                                        retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\r\n                                                    }\r\n                                                    else if(fn1 === SIN && fn2 === CSC) {\r\n                                                        sym2.fname = SIN;\r\n                                                        sym2.invert().updateHash();\r\n                                                        retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\r\n                                                    }\r\n                                                    //tan/cos\r\n                                                    else if(fn1 === TAN && (fn2 === COS || fn2 === SIN) && sym2.power.lessThan(0)) {\r\n                                                        var t = _.multiply(sym1.fnTransform(), sym2);\r\n                                                        retval = __.integrate(_.expand(t), dx, depth);\r\n                                                    }\r\n                                                    else { \r\n                                                        var t = _.multiply(sym1.fnTransform(), sym2.fnTransform());\r\n                                                        retval = __.integrate(_.expand(t), dx, depth);\r\n                                                    }\r\n                                                }\r\n                                                //TODO: REVISIT AT SOME POINT\r\n                                                else if((fn1 === SIN || fn1 === COS) && (fn2 === SIN || fn2 === COS)) { \r\n                                                    var transformed = trigTransform(symbols);\r\n                                                    retval = __.integrate(_.expand(transformed), dx, depth);\r\n                                                }\r\n\r\n                                                else {\r\n                                                    __.integration.stop();\r\n                                                }\r\n\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === FN && g2 === S) { \r\n                                            var sym1_is_linear = sym1.isLinear();\r\n                                            if(sym1.fname === COS && sym1_is_linear && sym2.power.equals(-1)) \r\n                                                retval = _.symfunction('Ci', [sym1.args[0]]);\r\n                                            else if(sym1.fname === COS && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === COSH && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Chi', [sym1.args[0]]);\r\n                                            else if(sym1.fname === COSH && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === SIN && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Si', [sym1.args[0]]);\r\n                                            else if(sym1.fname === SIN && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === SINH && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Shi', [sym1.args[0]]);\r\n                                            else if(sym1.fname === SINH && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === LOG && sym2.power.equals(-1)) {\r\n                                                //log(x)^n/x = log(x)^(n+1)/(n+1)\r\n                                                retval = __.integration.poly_integrate(sym1, dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === 'erf') {\r\n                                                if(sym2.power.equals(1)) {\r\n                                                    var dc = __.integration.decompose_arg(sym1.args[0], dx),\r\n                                                        a_ = dc[0],\r\n                                                        x_ = dc[1],\r\n                                                        arg = sym1.args[0].toString();\r\n                                                    retval = _.parse(format('(e^(-(({2}))^2)*(sqrt(pi)*e^((({2}))^2)*(2*({0})^2*({1})^2-3)*erf(({2}))+2*({0})*({1})-2))/(4*sqrt(pi)*({0})^2)', a_, x_, arg))\r\n                                                }\r\n                                            }\r\n                                            else { \r\n                                                //since group S is guaranteed convergence we need not worry about tracking depth of integration\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === EX && g2 === S) { \r\n                                            var x = fn1 === LOG ? __.integration.decompose_arg(sym1.args[0], dx)[1] : null;\r\n                                            if(sym1.isE() && (sym1.power.group === S || sym1.power.group === CB) && sym2.power.equals(-1)) {\r\n                                                retval = _.symfunction('Ei', [sym1.power.clone()]);\r\n                                            }\r\n                                            else if(fn1 === LOG && x.value === sym2.value) {\r\n                                                retval = __.integration.poly_integrate(sym1, dx, depth);\r\n                                            }\r\n                                            else\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                        }\r\n                                        else if(g1 === PL && g2 === S) {\r\n                                            //first try to reduce the top\r\n                                            if(sym2.value === sym1.value && sym1.power.equals(-1)) {\r\n                                                //find the lowest power in the denominator\r\n                                                var pd = Math.min.apply(null, core.Utils.keys(sym1.symbols));\r\n                                                //get the lowest common value between denominator and numerator\r\n                                                var pc = Math.min(pd, sym2.power);\r\n                                                //reduce both denominator and numerator by that factor\r\n                                                var factor = sym2.clone();\r\n                                                factor.power = new Frac(pc);\r\n                                                sym2 = _.divide(sym2, factor.clone()); //reduce the denominator\r\n                                                var t = new Symbol(0);\r\n                                                sym1.each(function(x) {\r\n                                                    t = _.add(t, _.divide(x.clone(), factor.clone()));\r\n                                                });\r\n                                                t.multiplier = sym1.multiplier;\r\n                                                symbol = _.divide(sym2, t);\r\n                                            }\r\n                                            else {\r\n                                                symbol = _.expand(symbol);\r\n                                            }\r\n                                            retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                        }\r\n                                        else if(g1 === CP && g2 === S) {  \r\n                                            var f = sym1.clone().toLinear(),\r\n                                                f_is_linear = core.Algebra.degree(f, _.parse(dx)).equals(1);\r\n                                            //handle cases x^(2*n)/sqrt(1-x^2)\r\n                                            if(sym1.power.equals(-1/2)) { \r\n                                                var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx);\r\n                                                var a = decomp[0].negate(),\r\n                                                    x = decomp[1],\r\n                                                    b = decomp[3],\r\n                                                    p1 = Number(sym1.power),\r\n                                                    p2 = Number(sym2.power);\r\n                                                if(isInt(p2) && core.Utils.even(p2) && x.power.equals(2)) {\r\n                                                    //if the substitution \r\n                                                    var c = _.divide(_.multiply(_.pow(b.clone(), new Symbol(2)), \r\n                                                        _.symfunction(SQRT, [_.divide(b.clone(), a.clone())])), \r\n                                                        _.pow(a.clone(), new Symbol(2)));\r\n                                                    c = _.multiply(c, _.symfunction(SQRT, [b]).invert());\r\n                                                    var dummy = _.parse('sin(u)');\r\n                                                    dummy.power = dummy.power.multiply(sym2.power);\r\n                                                    var integral = __.integrate(dummy, 'u', depth);\r\n                                                    var bksub = _.parse(ASIN+'('+SQRT+'('+a+'/'+b+')*'+dx+')');\r\n                                                    retval = _.multiply(c, integral.sub(new Symbol('u'), bksub));\r\n                                                }   \r\n                                                else if(p1 === -1/2) {\r\n                                                    var u_transform = function(f, u) {\r\n                                                        var integral = _.parse(__.integrate(f, dx, depth, opt).sub(dx, format(u, dx)));\r\n                                                        if(!integral.hasIntegral())\r\n                                                            return integral;\r\n                                                    }\r\n                                                    if(p2 === -1) {\r\n                                                        retval = u_transform(\r\n                                                                _.expand(_.expand(_.pow(_.multiply(sym1.invert(), sym2.invert()), new Symbol(2)))).invert(),\r\n                                                                'sqrt(1-1/({0})^2)'\r\n                                                        );\r\n                                                    }\r\n                                                    else if(p2 === -2) {\r\n                                                        //apply transformation to see if it matches asin(x)\r\n                                                        retval = u_transform(\r\n                                                                _.sqrt(_.expand(_.divide(_.pow(symbol, new Symbol(2)).invert(), _.pow(new Symbol(dx), new Symbol(2))).negate())).invert(),\r\n                                                                'sqrt(1-1/({0})^2)'\r\n                                                        );\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            else if(sym1.power.equals(-1) && sym2.isLinear() && f_is_linear) { \r\n                                                retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                            }\r\n                                            else if(!sym1.power.lessThan(0) && isInt(sym1.power)) { \r\n                                                //sum of integrals\r\n                                                var expanded = _.expand(sym1);\r\n                                                retval = new Symbol(0);\r\n                                                expanded.each(function(x) {\r\n                                                    if(x.group === PL) {\r\n                                                        x.each(function(y) {\r\n                                                            retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), y), dx, depth));\r\n                                                        });\r\n                                                    }\r\n                                                    else \r\n                                                        retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), x), dx, depth));\r\n                                                });\r\n                                            }\r\n                                            else if(sym1.power.lessThan(-2)) { \r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                            else if(sym1.power.lessThan(0) && sym2.power.greaterThan(1)) { \r\n                                                var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\r\n                                                    a = decomp[0].negate(),\r\n                                                    x = decomp[1],\r\n                                                    b = decomp[3],\r\n                                                    fn = sym1.clone().toLinear();\r\n\r\n                                                if(x.group !== PL && x.isLinear()) { \r\n                                                    var p = Number(sym2.power),\r\n                                                        du = '_u_',\r\n                                                        u = new Symbol(du),\r\n                                                        //pull the integral with the subsitution\r\n                                                        U = _.expand(_.divide(_.pow(_.subtract(u.clone(), b.clone()), new Symbol(p)), u.clone())),\r\n                                                        scope = {};\r\n\r\n                                                    //generate a scope for resubbing the symbol\r\n                                                    scope[du] = fn;\r\n                                                    var U2 = _.parse(U, scope);\r\n                                                    retval = __.integrate(U2, dx, 0);\r\n                                                }\r\n                                                else if(sym2.power.greaterThan(x.power) || sym2.power.equals(x.power)) { \r\n\r\n                                                    //factor out coefficients\r\n                                                    var factors = new core.Algebra.Classes.Factors();\r\n                                                    sym1 = core.Algebra.Factor.coeffFactor(sym1.invert(), factors);\r\n                                                    var div = core.Algebra.divide(sym2, sym1);\r\n                                                    //it assumed that the result will be of group CB\r\n                                                    if(div.group !== CB) {\r\n                                                        retval = new Symbol(0);\r\n                                                        div.each(function(t) {\r\n                                                            retval = _.add(retval, __.integrate(t, dx, depth));\r\n                                                        });\r\n                                                        //put back the factors\r\n                                                        factors.each(function(factor) {\r\n                                                            retval = _.divide(retval, factor);\r\n                                                        });\r\n\r\n                                                        retval = _.expand(retval);\r\n                                                    }\r\n                                                    else {\r\n                                                        //try something else\r\n                                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                                    }\r\n                                                }\r\n                                                else \r\n                                                    retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                            }\r\n                                            else { \r\n                                                //handle cases such as (1-x^2)^(n/2)*x^(m) where n is odd ___ cracking knuckles... This can get a little hairy \r\n                                                if(sym1.power.den.equals(2)) { \r\n                                                    //assume the function is in the form (a^2-b*x^n)^(m/2)\r\n                                                    var dc = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\r\n                                                        //using the above definition\r\n                                                        a = dc[3], x = dc[1], b = dc[0], bx = dc[2];\r\n                                                    if(x.power.equals(2) && b.lessThan(0)) { //if n is even && b is negative\r\n                                                        //make a equal 1 so we can do a trig sub\r\n                                                        if(!a.equals(1)) { //divide a out of everything\r\n                                                            //move a to the coeff\r\n                                                            coeff = _.multiply(coeff, _.pow(a, new Symbol(2)));\r\n                                                        }\r\n                                                        var u = dx;\r\n                                                        var c = _.divide(_.pow(b.clone().negate(), new Symbol(1/2)), _.pow(a, new Symbol(1/2))),\r\n                                                            du = _.symfunction(COS, [new Symbol(u)]),\r\n                                                            cosn = _.pow(_.symfunction(COS, [new Symbol(u)]), new Symbol(sym1.power.num)),\r\n                                                            X = _.pow(_.symfunction(SIN, [new Symbol(u)]), new Symbol(sym2.power)),\r\n                                                            val = _.multiply(_.multiply(cosn, du), X),\r\n                                                            integral = __.integrate(val, u, depth);\r\n                                                            //but remember that u = asin(sqrt(b)*a*x)\r\n                                                            retval = integral.sub(u, _.symfunction(ASIN, [_.multiply(new Symbol(dx), c)]));\r\n                                                    }\r\n                                                    else {\r\n                                                        retval = __.integration.partial_fraction(symbol, dx, depth, opt);\r\n                                                    }\r\n                                                }\r\n                                                else if(f_is_linear) {\r\n                                                    retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n                                        else if(sym1.isComposite() && sym2.isComposite()) { \r\n                                            //sum of integrals\r\n                                            retval = new Symbol(0);\r\n                                            if(sym1.power.greaterThan(0) && sym2.power.greaterThan(0)) {\r\n                                                //combine and pull the integral of each\r\n                                                var sym = _.expand(symbol);\r\n                                                sym.each(function(x) {\r\n                                                    retval = _.add(retval, __.integrate(x, dx, depth));\r\n                                                }, true);\r\n                                            }\r\n                                            else {\r\n                                                var p1 = Number(sym1.power),\r\n                                                    p2 = Number(sym2.power);\r\n                                                if(p1 < 0 && p2 > 0) {\r\n                                                    //swap\r\n                                                    var t = sym1; sym1 = sym2; sym2 = t;\r\n                                                }\r\n                                                if(p1 === -1 && p2 === -1) {\r\n                                                    retval = __.integration.partial_fraction(symbol, dx);\r\n                                                }\r\n                                                else {\r\n                                                    sym1.each(function(x) {\r\n                                                        var k = _.multiply(x, sym2.clone());\r\n                                                        var integral = __.integrate(k, dx, depth);\r\n                                                        retval = _.add(retval, integral);\r\n                                                    });\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === CP && symbols[0].power.greaterThan(0)) {\r\n                                            sym1 = _.expand(sym1);\r\n                                            retval = new Symbol(0);\r\n                                            sym1.each(function(x) {\r\n                                                retval = _.add(retval, __.integrate(_.multiply(x, sym2.clone()), dx, depth));\r\n                                            }, true);\r\n                                        }\r\n                                        else if(g1 === FN && g2 === EX && core.Utils.in_htrig(sym1.fname)) {\r\n                                            sym1 = sym1.fnTransform();\r\n                                            retval = __.integrate(_.expand(_.multiply(sym1, sym2)), dx, depth);\r\n                                        }\r\n                                        else if(g1 === FN && g2 === CP || g2 === FN && g1 === CP) {\r\n                                            if(g2 === FN && g1 === CP) {\r\n                                                var t = sym1; sym1 = sym2; sym2 = t; //swap\r\n                                            }\r\n                                            var du, sym2_clone, p, q, sa, sb;\r\n                                            du = Symbol.unwrapSQRT(__.diff(sym1.clone(), dx), true);\r\n                                            sym2_clone = Symbol.unwrapSQRT(sym2, true);\r\n                                            if(du.power.equals(sym2_clone.power)) { \r\n                                                p = new Symbol(sym2.power);\r\n                                                sa = du.clone().toLinear();\r\n                                                sb = sym2.clone().toLinear();\r\n                                                q = core.Algebra.divide(sa.toLinear(), sb);\r\n                                                if(q.isConstant()) {\r\n                                                    var nq = _.pow(q, p.negate());\r\n                                                    retval = _.multiply(nq, __.integration.poly_integrate(sym1.clone()));\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                        }\r\n                                        else { \r\n                                            var syma = sym1.clone().toLinear();\r\n                                            var symb = sym2.clone().toLinear();\r\n                                            if(g1 === EX && g2 === EX && sym1.power.contains(dx) && sym2.power.contains(dx) \r\n                                                    && !syma.contains(dx) && !symb.contains(dx)) {\r\n                                                retval = _.parse(format('(({0})^(({2})*({4}))*({1})^(({3})*({4})))/(log(({0})^({2}))+log(({1})^({3})))',\r\n                                                    syma.toString(),\r\n                                                    symb.toString(),\r\n                                                    sym1.power.multiplier.toString(),\r\n                                                    sym2.power.multiplier.toString(),\r\n                                                    dx\r\n                                                ));\r\n                                            }\r\n                                            else \r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(l === 3 && (symbols[2].group === S && symbols[2].power.lessThan(2) || symbols[0].group === CP)) { \r\n                                    var first = symbols[0];\r\n                                    if(first.group === CP) { //TODO {support higher powers of x in the future}\r\n                                        if(first.power.greaterThan(1))\r\n                                            first = _.expand(first);\r\n                                        var r = _.multiply(symbols[1], symbols[2]);\r\n                                        retval = new Symbol(0);\r\n                                        first.each(function(x) {\r\n                                            var t = _.multiply(x, r.clone());\r\n                                            var intg = __.integrate(t, dx, depth);\r\n                                            retval = _.add(retval, intg);\r\n                                        }, true);\r\n                                    }\r\n                                    else { \r\n                                        //try integration by parts although technically it will never work\r\n                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                    }\r\n\r\n                                }\r\n                                else if(all_functions(symbols)) { \r\n                                    var t = new Symbol(1);\r\n                                    for(var i=0,l=symbols.length; i<l; i++) {\r\n                                        t = _.multiply(t, symbols[i].fnTransform());\r\n                                    }\r\n                                    t = _.expand(t);\r\n                                    retval = __.integrate(t, dx, depth);\r\n                                }\r\n                                else { \r\n                                    //one more go\r\n                                    var transformed = trigTransform(symbols);\r\n                                    retval = __.integrate(_.expand(transformed), dx, depth);\r\n                                }\r\n                            }\r\n                                \r\n                        }\r\n\r\n                        retval = _.multiply(retval, coeff);\r\n                    }\r\n                    //if an integral was found then we return it\r\n                    if(retval)\r\n                        return retval;\r\n                }\r\n\r\n                catch(error){\r\n                    //do nothing if it's a NoIntegralFound error otherwise let it bubble\r\n                    if(!(error instanceof NoIntegralFound || error instanceof core.exceptions.DivisionByZero)) \r\n                        throw error;\r\n                }  \r\n\r\n                //no symbol found so we return the integral again\r\n                return _.symfunction('integrate', [original_symbol, dt]);\r\n            }, false);\r\n        },\r\n        defint: function(symbol, from, to, dx) {\r\n            dx = dx || 'x'; //make x the default variable of integration\r\n            var get_value = function(integral, vars, point) {\r\n                try {\r\n                    return _.parse(integral, vars);\r\n                }\r\n                catch(e) {\r\n                    //it failed for some reason so return the limit\r\n                    return __.Limit.limit(integral, dx, point);\r\n                }\r\n            };\r\n            \r\n            var vars = core.Utils.variables(symbol),\r\n                hasTrig = symbol.hasTrig();\r\n            var retval, integral;\r\n            if(vars.length === 1)\r\n                dx = vars[0];\r\n            if(!hasTrig) {\r\n                integral = __.integrate(symbol, dx);\r\n            }\r\n            \r\n            if(!hasTrig && !integral.hasIntegral()) { \r\n                var upper = {},\r\n                    lower = {},\r\n                    a, b;\r\n                upper[dx] = to;\r\n                lower[dx] = from;\r\n                \r\n                a = get_value(integral, upper, to, dx);  \r\n                b = get_value(integral, lower, from, dx);\r\n                retval = _.subtract(a, b);\r\n            }\r\n            else if(vars.length === 1 && from.isConstant() && to.isConstant()) {\r\n                \r\n                var f = core.Utils.build(symbol); \r\n                    retval = new Symbol(core.Math2.num_integrate(f, Number(from), Number(to)));\r\n            }\r\n            else \r\n                retval = _.symfunction('defint', [symbol, from , to, dx]);\r\n            return retval;\r\n        },\r\n            \r\n        Limit: {\r\n            interval: function(start, end) {\r\n                return _.parse(format('[{0}, {1}]', start, end));\r\n            },\r\n            diverges: function() {\r\n                return __.Limit.interval('-Infinity', 'Infinity');\r\n            },\r\n            divide: function(f, g, x, lim) { \r\n                var fin = f.clone(), gin = g.clone();\r\n                var isInfinity = function(L) {\r\n                    if(core.Utils.isVector(L)) {\r\n                        for(var i=0; i<L.elements.length; i++)\r\n                            if(!L.elements[i].isInfinity)\r\n                                return false;\r\n                        return true;\r\n                    }\r\n                    return L.isInfinity;     \r\n                };\r\n\r\n                var equals = function(L, v) {\r\n                    if(core.Utils.isVector(L)) {\r\n                        return false;\r\n                    }\r\n                    return L.equals(v);\r\n                };\r\n\r\n                var retval;\r\n                do {\r\n                    var lim1 = evaluate(__.Limit.limit(f, x, lim));\r\n                    var lim2 = evaluate(__.Limit.limit(g, x, lim));\r\n                    //if it's in indeterminate form apply L'Hospital's rule\r\n                    var indeterminate = isInfinity(lim1) && isInfinity(lim2) || equals(lim1, 0) && equals(lim2, 0);\r\n                    //pull the derivatives\r\n                    if(indeterminate) {\r\n                        var ft = __.diff(f.clone(), x);\r\n                        var gt = __.diff(g.clone(), x);\r\n                        var t_symbol = _.expand(_.divide(ft, gt));\r\n                        f = t_symbol.getNum();\r\n                        g = t_symbol.getDenom();\r\n                    }\r\n                }\r\n                while(indeterminate)  \r\n                    \r\n                if(lim1.isInfinity && lim2.equals(0))\r\n                    retval = lim1;\r\n                else if(lim1.equals(0) && lim2.isInfinity)\r\n                    retval = lim1;\r\n                else if(lim1.isInfinity) {\r\n                    retval = lim1;\r\n                }\r\n                else if(lim2.isInfinity){\r\n                    retval = new Symbol(0);\r\n                }\r\n                else {\r\n                    //TODO: \r\n                    //REMEMBER: \r\n                    //- 1/cos(x)\r\n                    //n/0 is still possible since we only checked for 0/0\r\n                    if(lim2.equals(0)) {\r\n                        retval = __.Limit.diverges();\r\n                    }\r\n                    else\r\n                        retval = _.divide(lim1, lim2);\r\n                }\r\n                \r\n                return retval;\r\n            },\r\n            rewriteToLog: function(symbol) {\r\n                var p = symbol.power.clone();\r\n                symbol.toLinear();\r\n                return _.pow(new Symbol('e'), _.multiply(p, _.symfunction(Settings.LOG+'', [symbol])));\r\n            },\r\n            getSubbed: function(f, x, lim) {\r\n                var retval;\r\n                //1. rewrite EX with base e\r\n                if(f.group === EX) {\r\n                    f = __.rewriteToLog(f);\r\n                }\r\n                //2. try simple substitution\r\n                try {\r\n                    retval = f.sub(x, lim);\r\n                }\r\n                catch(e) {\r\n                    //Nope. No go, so just return the unsubbed function so we can test the limit instead.\r\n                    retval = f;\r\n                }\r\n                \r\n                return retval;\r\n            },\r\n            isInterval: function(limit) {\r\n                return core.Utils.isVector(limit);\r\n            },\r\n            isConvergent: function(limit) {\r\n                //it's not convergent if it lies on the interval -Infinity to Infinity\r\n                if(     \r\n                    //It lies on the interval -Infinity to Infinity\r\n                    __.Limit.isInterval(limit) && limit.elements[0].isInfinity && limit.elements[1].isInfinity ||\r\n                    //We weren't able to calculate the limit\r\n                    limit.containsFunction('limit')\r\n                ) {\r\n                    return false; //Then no\r\n                }\r\n                return true; //It is\r\n            },\r\n            limit: function(symbol, x, lim) {\r\n                //store the multiplier\r\n                var m = _.parse(symbol.multiplier);\r\n                //strip the multiplier\r\n                symbol.toUnitMultiplier();\r\n                try {\r\n                    //https://en.wikipedia.org/wiki/List_of_limits\r\n                    var retval;\r\n                    //we try the simplest option first where c is some limit\r\n                    //lim a as x->c = a where c \r\n                    if(symbol.isConstant(true)) {\r\n                        retval = symbol;\r\n                    }\r\n                    else {\r\n                        var point = {};\r\n                        point[x] = lim;\r\n                        //lim x as x->c = c where c\r\n                        try {\r\n                            //evaluate the function at the given limit\r\n                            var t = _.parse(symbol.sub(x, lim), point);\r\n                            //a constant or infinity is known so we're done\r\n                            if(t.isConstant(true) || t.isInfinity)\r\n                                retval = t;\r\n\r\n                        }\r\n                        catch(e){ /*Nothing. Maybe we tried to divide by zero.*/};\r\n\r\n                        if(!retval) {\r\n                            //split the symbol in the numerator and the denominator\r\n                            var num = symbol.getNum();\r\n                            var den = symbol.getDenom();\r\n\r\n                            if(den.isConstant(true)) {\r\n                                //We still don't have a limit so we generate tests.\r\n                                if(symbol.group === EX) {\r\n                                    //https://en.wikipedia.org/wiki/List_of_limits\r\n                                    //Speed boost for exponentials by detecting patterns\r\n                                    var f = symbol.clone().toLinear();\r\n                                    var p = symbol.power.clone();\r\n                                    var _num = f.getNum();\r\n                                    var _den = f.getDenom();\r\n                                    var fn = core.Utils.decompose_fn(_den, x, true);\r\n                                    //start detection of pattern (x/(x+1))^x\r\n                                    if(_num.group === S && _num.multiplier.isOne() && fn.ax.group === S && fn.b.isConstant(true) && fn.a.isOne() && fn.b.isConstant(true)) {\r\n                                        retval = _.parse(format('(1/e^({0}))', fn.b));\r\n                                    }\r\n                                    else {\r\n                                        var symbol_ = __.Limit.rewriteToLog(symbol.clone());\r\n                                        //get the base\r\n                                        var pow = symbol_.power.clone();\r\n                                        var base = symbol_.clone().toLinear();\r\n                                        var lim_base = __.Limit.limit(base, x, lim);\r\n                                        var lim_pow = __.Limit.limit(pow, x, lim);\r\n                                        retval = _.pow(lim_base, lim_pow);\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === FN && symbol.args.length === 1 ) {\r\n                                    \r\n                                    //Squeeze theorem lim f(g(x)) = lim f(lim g))\r\n                                    var arg = __.Limit.limit(symbol.args[0], x, lim);\r\n                                    if(core.Utils.isVector(arg)) {\r\n                                        //get the limit over that interval\r\n                                        retval = arg.map(function(e) {\r\n                                            var clone = symbol.clone();\r\n                                            clone.args[0] = e;\r\n                                            return __.Limit.limit(_.symfunction(symbol.fname, [e]), x, lim);\r\n                                        });\r\n                                        \r\n                                        return _.multiply(m, retval)\r\n                                    }\r\n                                    //if the argument is constant then we're done\r\n                                    else if(arg.isConstant(true)) {\r\n                                        var evaluates;\r\n                                        //double check that it evaluates\r\n                                        var trial = _.symfunction(symbol.fname, [arg]);\r\n                                        //trial evaluation\r\n                                        try {\r\n                                            evaluate(trial);\r\n                                            evaluates = true;\r\n                                        }\r\n                                        catch(e) {\r\n                                            evaluates = false;\r\n                                        }\r\n                                    }\r\n                                    if(evaluates) {\r\n                                        retval = trial;\r\n                                    }\r\n                                    else {\r\n                                        //if the limit converges. We'll deal with non-convergent ones later\r\n                                        if(__.Limit.isConvergent(arg)) {\r\n                                            if(symbol.fname === LOG) { \r\n                                                switch(arg.toString()) {\r\n                                                    //lim -> 0\r\n                                                    case '0':\r\n                                                        retval = Symbol.infinity().negate();\r\n                                                        break;\r\n                                                    case 'Infinity':\r\n                                                        retval = Symbol.infinity();\r\n                                                        break;\r\n                                                    case '-Infinity':\r\n                                                        retval = Symbol.infinity();\r\n                                                        break;\r\n                                                }\r\n                                            }\r\n                                            else if((symbol.fname === COS || symbol.fname === SIN) && lim.isInfinity) {\r\n                                                retval = __.Limit.interval(-1, 1);\r\n                                            }\r\n                                            else if((symbol.fname === TAN)) {\r\n                                                var s_arg = symbol.args[0];\r\n                                                var n = s_arg.getNum();\r\n                                                var d = s_arg.getDenom();\r\n                                                var pi = n.toUnitMultiplier();\r\n                                                if(lim.isInfinity || pi.equals('pi') && d.equals(2)) {\r\n                                                    retval = divergent();\r\n                                                }\r\n                                            }\r\n                                            else if(symbol.fname === Settings.FACTORIAL) {\r\n                                                if(arg.isInfinity)\r\n                                                    return Symbol.infinity();\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === S) {\r\n                                    if(symbol.power > 0)\r\n                                        //these functions always converge to the limit\r\n                                        return _.parse(symbol, point);\r\n                                    else {\r\n                                        //we're dealing with 1/x^n but remember that infinity has already been dealt\r\n                                        //with by substitution\r\n                                        if(core.Utils.even(symbol.power)) {\r\n                                            //even powers converge to infinity\r\n                                            retval = Symbol.infinity();\r\n                                        }\r\n                                        else {\r\n                                            //odd ones don't\r\n                                            retval = __.Limit.diverges();\r\n                                        }   \r\n                                    }\r\n                                }\r\n                                else if(symbol.group === CB) {\r\n                                    symbol = _.expand(symbol);\r\n                                    //if the group no longer is CB then feed it back to this function\r\n                                    if(symbol.group !== CB) {\r\n                                        retval = __.Limit.limit(symbol, x, lim);\r\n                                    }\r\n                                    else {\r\n                                        var lim1, lim2;\r\n                                        //loop through all the symbols\r\n                                        //thus => lim f*g*h = lim (f*g)*h = (lim f*g)*(lim h)\r\n                                        //symbols of lower groups are generally easier to differentiatee so get them to the right by first sorting\r\n                                        var symbols = symbol.collectSymbols().sort(function(a, b) {\r\n                                            return a.group - b.group;\r\n                                        });\r\n                                        var f = symbols.pop();\r\n                                        //calculate the first limit so we can keep going down the list\r\n                                        lim1 = evaluate(__.Limit.limit(f, x, lim));\r\n                                        //reduces all the limits one at a time\r\n                                        while(symbols.length) {\r\n                                            //get the second limit\r\n                                            var g = symbols.pop();\r\n                                            //get the limit of g\r\n                                            lim2 = evaluate(__.Limit.limit(g, x, lim));\r\n                                            //if the limit is in indeterminate form aplly L'Hospital by inverting g and then f/(1/g)\r\n                                            if((lim1.isInfinity || !__.Limit.isConvergent(lim1) && lim2.equals(0) || lim1.equals(0) && __.Limit.isConvergent(lim2))) { \r\n                                                //invert the symbol\r\n                                                g.invert();\r\n                                                lim1 = __.Limit.divide(f, g, x, lim);\r\n                                            }\r\n                                            else {\r\n                                                //lim f*g = (lim f)*(lim g)\r\n                                                lim1 = _.multiply(lim1, lim2);\r\n                                                //let f*g equal f and h equal g \r\n                                                f = _.multiply(f, g);\r\n                                            }\r\n                                        }\r\n                                        //Done, lim1 is the limit we're looking for     \r\n                                        retval = lim1;\r\n                                    }\r\n                                }\r\n                                else if(symbol.isComposite()) { \r\n                                    var original = symbol.clone();\r\n                                    var _lim;\r\n                                    if(!symbol.isLinear())\r\n                                        symbol = _.expand(symbol);\r\n                                    //Apply lim f+g = (lim f)+(lim g)\r\n                                    retval = new Symbol(0);\r\n                                    symbol.each(function(sym) {\r\n                                        //If the addition of the limits is undefined then the limit diverges so return -infinity to infinity\r\n                                        try {\r\n                                            _lim = __.Limit.limit(sym, x, lim);\r\n                                            \r\n                                        }\r\n                                        catch(e) {\r\n                                            _lim = __.Limit.diverges();\r\n                                        }\r\n                                        \r\n                                        try {\r\n                                            retval = _.add(retval, _lim);\r\n                                        }\r\n                                        catch(e) {\r\n                                            //rewrite the function to have a common denominator. \r\n                                            //TODO: This is soooo slow at the moment.\r\n                                            symbol = core.Utils.toCommonDenominator(original);\r\n                                            retval = __.Limit.limit(symbol, x, lim);\r\n                                        }\r\n                                    });\r\n                                } \r\n                            }\r\n                            else {\r\n                                retval = __.Limit.divide(num, den, x, lim);\r\n                            }    \r\n                        }\r\n                    }\r\n\r\n                    //if we still don't have a solution\r\n                    if(!retval)\r\n                        //return it symbolically\r\n                        retval = _.symfunction('limit', arguments); \r\n                }\r\n                catch(e) {\r\n                    //if all else fails return the symbolic function\r\n                    retval = _.symfunction('limit', arguments); \r\n                }\r\n                \r\n                return _.multiply(m, retval);\r\n            }\r\n        },\r\n        Fresnel: {\r\n            S: function(x) {\r\n                if(x.isConstant(true)) {\r\n                    return __.defint(_.parse('sin(pi*x^2/2)'), Symbol(0), x, 'x');\r\n                }\r\n                return _.symfunction('S', arguments);\r\n            },\r\n            C: function(x) {\r\n                if(x.isConstant(true)) {\r\n                    return __.defint(_.parse('cos(pi*x^2/2)'), Symbol(0), x, 'x');\r\n                }\r\n                return _.symfunction('C', arguments);\r\n            }\r\n        }\r\n    };\r\n    \r\n    nerdamer.register([\r\n        {\r\n            name: 'diff',\r\n            visible: true,\r\n            numargs: [1,3],\r\n            build: function(){ return __.diff; }\r\n        },\r\n        {\r\n            name: 'sum',\r\n            visible: true,\r\n            numargs: 4,\r\n            build: function(){ return __.sum; }\r\n        },\r\n        {\r\n            name: 'product',\r\n            visible: true,\r\n            numargs: 4,\r\n            build: function(){ return __.product; }\r\n        },\r\n        {\r\n            name: 'integrate',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function() { return __.integrate; }\r\n        },\r\n        {\r\n            name: 'defint',\r\n            visible: true,\r\n            numargs: [3, 4],\r\n            build: function() { return __.defint; }\r\n        },\r\n        {\r\n            name: 'S',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function() { return __.Fresnel.S; }\r\n        },\r\n        {\r\n            name: 'C',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function() { return __.Fresnel.C; }\r\n        },\r\n        {\r\n            name: 'limit',\r\n            visible: true,\r\n            numargs: [3, 4],\r\n            build: function() { return __.Limit.limit; }\r\n        }\r\n    ]);\r\n    //link registered functions externally\r\n    nerdamer.api();\r\n   \r\n})();"],"sourceRoot":""}