{"version":3,"sources":["exercises/exBlueprint.js","utility/random.js","utility/auxMath.js","checkMethods.js"],"names":["generate2NumsCalc","exercise","questionText","questionMath","questionLatex","answerMath","checkMethod","sign","randomIntBetween","numA","numB","wrapNegative","numC","coinFlip","randomNonZeroIntBetween","String","raw","nerdamer","convertToLaTeX","toString","compareNumbers","num1","num2","lowNum","Math","min","highNum","max","floor","random","Error","rand","num","submittedAnswer"],"mappings":"qRAuBe,SAASA,IACtB,IAAMC,EAAW,CACfC,aAAc,KACdC,aAAc,KACdC,cAAe,KACfC,WAAY,KACZC,YAAa,MAKXC,EADU,CAAC,IAAK,IAAK,IAAK,KACbC,YAAiB,EAAG,IAIrC,GAAa,MAATD,EAAc,CAChB,IAAME,EAAOD,aAPA,OAQPE,EAAOF,aARA,OAUbP,EAASE,aAAT,UACW,MAATI,EAAeI,YAAaF,GAAQA,EADtC,YAEIF,EAFJ,YAEYI,YAAaD,QACpB,CAGL,IAAID,EAAMC,EAAME,EAEZC,eACFD,EAAOJ,aAnBI,OAqBXC,GADAC,EAAOI,aApBI,QAqBGF,IAEdA,EAAOE,aAvBI,OAyBXJ,GADAD,EAAOK,aAxBI,QAyBGF,GAGhBX,EAASE,aAAT,UAA2BQ,YAAaF,GAAxC,cAAmDE,YAAaD,IAWlE,OATAT,EAASC,aAAe,0DACxBD,EAASG,cAAgBW,OAAOC,IAAhC,IAAwCC,IAASC,eAC/CjB,EAASE,eAEXF,EAASI,WAAaY,IAAShB,EAASE,cAAcgB,WACtDlB,EAASK,YAAcc,IAIhBnB,I,4ICvEF,SAASO,EAAiBa,EAAMC,GAGrC,IAAMC,EAASC,KAAKC,IAAIJ,EAAMC,GACxBI,EAAUF,KAAKG,IAAIN,EAAMC,GAAQ,EACvC,OAAOE,KAAKI,MAAMJ,KAAKK,UAAYH,EAAUH,GAAUA,GAGlD,SAAST,EAAwBO,EAAMC,GAC5C,GAAa,IAATD,GAAuB,IAATC,EAChB,MAAM,IAAIQ,MAAM,8CAGlB,IADA,IAAIC,GACIA,GAAiB,IAATA,GACdA,EAAOvB,EAAiBa,EAAMC,GAEhC,OAAOS,EAGF,SAASlB,IACd,QAASL,EAAiB,EAAG,K,gCCZxB,SAASG,EAAaqB,GAC3B,OAAOA,EAAM,EAAN,WAAcA,EAAd,KAAuBA,EAThC,mC,gCCAA,wDAIaZ,EAAiB,SAACa,EAAiB5B,GAAlB,OAC5B4B,IAAoB5B","file":"static/js/4.3ecbba18.chunk.js","sourcesContent":["import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nimport {\r\n  randomIntBetween,\r\n  randomNonZeroIntBetween,\r\n  coinFlip,\r\n  rollD,\r\n  chooseRandomArrayElement,\r\n  chooseSomeRandomArrayElements,\r\n  shuffle,\r\n} from '../utility/random';\r\n\r\nimport {\r\n  showSign,\r\n  wrapNum,\r\n  wrapNegative,\r\n  wrapWithVarIfNegative,\r\n} from '../utility/auxMath';\r\n\r\nimport { compareNumbers } from '../checkMethods';\r\n\r\nexport default function generate2NumsCalc() {\r\n  const exercise = {\r\n    questionText: null,\r\n    questionMath: null,\r\n    questionLatex: null,\r\n    answerMath: null,\r\n    checkMethod: null,\r\n  };\r\n\r\n  const maxInt = 10;\r\n  const signs = ['+', '-', '*', '/'];\r\n  let sign = signs[randomIntBetween(0, 3)];\r\n\r\n  // sign = '/'; //test division\r\n\r\n  if (sign !== '/') {\r\n    const numA = randomIntBetween(-maxInt, maxInt);\r\n    const numB = randomIntBetween(-maxInt, maxInt);\r\n\r\n    exercise.questionMath = `${\r\n      sign === '*' ? wrapNegative(numA) : numA\r\n    } ${sign} ${wrapNegative(numB)}`;\r\n  } else {\r\n    // numA / numB\r\n\r\n    let numA, numB, numC;\r\n\r\n    if (coinFlip()) {\r\n      numC = randomIntBetween(-maxInt, maxInt);\r\n      numB = randomNonZeroIntBetween(-maxInt, maxInt);\r\n      numA = numB * numC;\r\n    } else {\r\n      numC = randomNonZeroIntBetween(-maxInt, maxInt);\r\n      numA = randomNonZeroIntBetween(-maxInt, maxInt);\r\n      numB = numA * numC;\r\n    }\r\n\r\n    exercise.questionMath = `${wrapNegative(numA)} / ${wrapNegative(numB)}`;\r\n  }\r\n  exercise.questionText = 'Υπολόγισε:';\r\n  exercise.questionLatex = String.raw`$ ${nerdamer.convertToLaTeX(\r\n    exercise.questionMath\r\n  )} $`;\r\n  exercise.answerMath = nerdamer(exercise.questionMath).toString();\r\n  exercise.checkMethod = compareNumbers;\r\n\r\n  // console.log('nerd: ', nerdamer('5/40').toString()); // test\r\n\r\n  return exercise;\r\n}\r\n","export function randomIntBetween(num1, num2) {\r\n  // return an integer between num1 and num2,\r\n  // INCLUDING BOTH num1 and num2.\r\n  const lowNum = Math.min(num1, num2);\r\n  const highNum = Math.max(num1, num2) + 1;\r\n  return Math.floor(Math.random() * (highNum - lowNum) + lowNum);\r\n}\r\n\r\nexport function randomNonZeroIntBetween(num1, num2) {\r\n  if (num1 === 0 && num2 === 0) {\r\n    throw new Error('Both nums are 0 in randomNonZeroIntBetween');\r\n  }\r\n  let rand;\r\n  while (!rand || rand === 0) {\r\n    rand = randomIntBetween(num1, num2);\r\n  }\r\n  return rand;\r\n}\r\n\r\nexport function coinFlip() {\r\n  return !!randomIntBetween(0, 1);\r\n}\r\n\r\nexport function rollD(n) {\r\n  return randomIntBetween(1, n);\r\n}\r\n\r\nexport function chooseRandomArrayElement(arr) {\r\n  return arr[randomIntBetween(0, arr.length - 1)];\r\n}\r\n\r\nexport function chooseSomeRandomArrayElements(arr, n) {\r\n  if (n > arr.length) {\r\n    throw new Error('Elements  to pick are larger than array length');\r\n  }\r\n  const elements = new Set();\r\n  while (elements.size < n) {\r\n    elements.add(chooseRandomArrayElement(arr));\r\n  }\r\n  return [...elements];\r\n}\r\n\r\nexport function shuffle(array) {\r\n  // from https://bost.ocks.org/mike/shuffle/\r\n  var m = array.length,\r\n    t,\r\n    i;\r\n\r\n  // While there remain elements to shuffle…\r\n  while (m) {\r\n    // Pick a remaining element…\r\n    i = Math.floor(Math.random() * m--);\r\n\r\n    // And swap it with the current element.\r\n    t = array[m];\r\n    array[m] = array[i];\r\n    array[i] = t;\r\n  }\r\n\r\n  return array;\r\n}\r\n","export function showSign(num) {\r\n  return num > 0 ? `+${num}` : `${num}`;\r\n}\r\n\r\nexport function wrapNum(num) {\r\n  return num > 0 ? `(+${num})` : `(${num})`;\r\n}\r\n\r\nexport function wrapNegative(num) {\r\n  return num < 0 ? `(${num})` : num;\r\n}\r\n\r\nexport function wrapWithVarIfNegative(num, varName) {\r\n  return `${num < 0 ? `(${num} ${varName})` : `${num} ${varName}`}`;\r\n}\r\n","import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nexport const compareNumbers = (submittedAnswer, answerMath) =>\r\n  submittedAnswer === answerMath;\r\n\r\nexport const nerd = (submittedAnswer, answerMath) => {\r\n  try {\r\n    return nerdamer(submittedAnswer).eq(answerMath);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const nerdOneVar = (submittedAnswer, answerMath) => {\r\n  // no more than one sign (except for a possible sign at the start)\r\n  const signs = ['+', '-', '*', '/'];\r\n  try {\r\n    const numSigns = submittedAnswer\r\n      .slice(1)\r\n      .split('')\r\n      .filter((e) => signs.includes(e)).length;\r\n    return numSigns > 1 ? false : nerd(submittedAnswer, answerMath);\r\n  } catch (e) {\r\n    console.log(e);\r\n    return nerd(submittedAnswer, answerMath);\r\n  }\r\n};\r\n\r\nexport const nerdTwoVars = (submittedAnswer, answerMath) => {\r\n  // no more than two signs (except for a possible sign at the start)\r\n  const signs = ['+', '-', '*', '/'];\r\n  try {\r\n    const numSigns = submittedAnswer\r\n      .slice(1)\r\n      .split('')\r\n      .filter((e) => signs.includes(e)).length;\r\n    return numSigns > 2 ? false : nerd(submittedAnswer, answerMath);\r\n  } catch (e) {\r\n    console.log(e);\r\n    return nerd(submittedAnswer, answerMath);\r\n  }\r\n};\r\n"],"sourceRoot":""}