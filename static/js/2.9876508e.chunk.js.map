{"version":3,"sources":["exercises/2-SimplifyFraction.js","utility/random.js","utility/auxMath.js","checkMethods.js"],"names":["generate2NumsCalc","numA","numB","mult","exercise","questionText","questionMath","questionLatex","answerMath","checkMethod","randomIntBetween","wrapNegative","String","raw","nerdamer","convertToLaTeX","toString","compareNumbers","num1","num2","lowNum","Math","min","highNum","max","floor","random","randomNonZeroIntBetween","Error","rand","coinFlip","num","submittedAnswer"],"mappings":"qRAUe,SAASA,IACtB,IAaIC,EAAMC,EAAMC,EAbVC,EAAW,CACfC,aAAc,KACdC,aAAc,KACdC,cAAe,KACfC,WAAY,KACZC,YAAa,MAyBf,OAdAR,GADAE,EAAOO,YAAiB,EANR,IAOFA,YAAiB,EARhB,IASfR,EAAOC,EAAOO,YAAiB,EAThB,IAWfN,EAASE,aAAT,UAA2BK,YAAaV,GAAxC,cAAmDU,YAAaT,IAEhEE,EAASC,aAAe,kHACxBD,EAASG,cAAgBK,OAAOC,IAAhC,IAAwCC,IAASC,eAC/CX,EAASE,eAEXF,EAASI,WAAaM,IAASV,EAASE,cAAcU,WACtDZ,EAASK,YAAcQ,IAIhBb,I,4ICzCF,SAASM,EAAiBQ,EAAMC,GAGrC,IAAMC,EAASC,KAAKC,IAAIJ,EAAMC,GACxBI,EAAUF,KAAKG,IAAIN,EAAMC,GAAQ,EACvC,OAAOE,KAAKI,MAAMJ,KAAKK,UAAYH,EAAUH,GAAUA,GAGlD,SAASO,EAAwBT,EAAMC,GAC5C,GAAa,IAATD,GAAuB,IAATC,EAChB,MAAM,IAAIS,MAAM,8CAGlB,IADA,IAAIC,GACIA,GAAiB,IAATA,GACdA,EAAOnB,EAAiBQ,EAAMC,GAEhC,OAAOU,EAGF,SAASC,IACd,QAASpB,EAAiB,EAAG,K,gCCZxB,SAASC,EAAaoB,GAC3B,OAAOA,EAAM,EAAN,WAAcA,EAAd,KAAuBA,EAThC,mC,gCCAA,wDAIad,EAAiB,SAACe,EAAiBxB,GAAlB,OAC5BwB,IAAoBxB","file":"static/js/2.9876508e.chunk.js","sourcesContent":["import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nimport { randomIntBetween } from '../utility/random';\r\n\r\nimport { wrapNegative } from '../utility/auxMath';\r\n\r\nimport { compareNumbers } from '../checkMethods';\r\n\r\nexport default function generate2NumsCalc() {\r\n  const exercise = {\r\n    questionText: null,\r\n    questionMath: null,\r\n    questionLatex: null,\r\n    answerMath: null,\r\n    checkMethod: null,\r\n  };\r\n\r\n  const maxInt = 10;\r\n  const maxMult = 5;\r\n\r\n  // numA / numB\r\n\r\n  let numA, numB, mult;\r\n\r\n  mult = randomIntBetween(2, maxMult);\r\n  numA = mult * randomIntBetween(1, maxInt);\r\n  numB = mult * randomIntBetween(1, maxInt);\r\n\r\n  exercise.questionMath = `${wrapNegative(numA)} / ${wrapNegative(numB)}`;\r\n\r\n  exercise.questionText = 'Απλοποίησε το κλάσμα:';\r\n  exercise.questionLatex = String.raw`$ ${nerdamer.convertToLaTeX(\r\n    exercise.questionMath\r\n  )} $`;\r\n  exercise.answerMath = nerdamer(exercise.questionMath).toString();\r\n  exercise.checkMethod = compareNumbers;\r\n\r\n  // console.log('nerd: ', nerdamer('5/40').toString()); // test\r\n\r\n  return exercise;\r\n}\r\n","export function randomIntBetween(num1, num2) {\r\n  // return an integer between num1 and num2,\r\n  // INCLUDING BOTH num1 and num2.\r\n  const lowNum = Math.min(num1, num2);\r\n  const highNum = Math.max(num1, num2) + 1;\r\n  return Math.floor(Math.random() * (highNum - lowNum) + lowNum);\r\n}\r\n\r\nexport function randomNonZeroIntBetween(num1, num2) {\r\n  if (num1 === 0 && num2 === 0) {\r\n    throw new Error('Both nums are 0 in randomNonZeroIntBetween');\r\n  }\r\n  let rand;\r\n  while (!rand || rand === 0) {\r\n    rand = randomIntBetween(num1, num2);\r\n  }\r\n  return rand;\r\n}\r\n\r\nexport function coinFlip() {\r\n  return !!randomIntBetween(0, 1);\r\n}\r\n\r\nexport function rollD(n) {\r\n  return randomIntBetween(1, n);\r\n}\r\n\r\nexport function chooseRandomArrayElement(arr) {\r\n  return arr[randomIntBetween(0, arr.length - 1)];\r\n}\r\n\r\nexport function chooseSomeRandomArrayElements(arr, n) {\r\n  if (n > arr.length) {\r\n    throw new Error('Elements  to pick are larger than array length');\r\n  }\r\n  const elements = new Set();\r\n  while (elements.size < n) {\r\n    elements.add(chooseRandomArrayElement(arr));\r\n  }\r\n  return [...elements];\r\n}\r\n\r\nexport function shuffle(array) {\r\n  // from https://bost.ocks.org/mike/shuffle/\r\n  var m = array.length,\r\n    t,\r\n    i;\r\n\r\n  // While there remain elements to shuffle…\r\n  while (m) {\r\n    // Pick a remaining element…\r\n    i = Math.floor(Math.random() * m--);\r\n\r\n    // And swap it with the current element.\r\n    t = array[m];\r\n    array[m] = array[i];\r\n    array[i] = t;\r\n  }\r\n\r\n  return array;\r\n}\r\n","export function showSign(num) {\r\n  return num > 0 ? `+${num}` : `${num}`;\r\n}\r\n\r\nexport function wrapNum(num) {\r\n  return num > 0 ? `(+${num})` : `(${num})`;\r\n}\r\n\r\nexport function wrapNegative(num) {\r\n  return num < 0 ? `(${num})` : num;\r\n}\r\n\r\nexport function wrapWithVarIfNegative(num, varName) {\r\n  return `${num < 0 ? `(${num} ${varName})` : `${num} ${varName}`}`;\r\n}\r\n","import nerdamer from 'nerdamer/nerdamer.core';\r\nimport 'nerdamer/Algebra';\r\nimport 'nerdamer/Solve';\r\n\r\nexport const compareNumbers = (submittedAnswer, answerMath) =>\r\n  submittedAnswer === answerMath;\r\n\r\nexport const nerd = (submittedAnswer, answerMath) => {\r\n  try {\r\n    return nerdamer(submittedAnswer).eq(answerMath);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const nerdOneVar = (submittedAnswer, answerMath) => {\r\n  // no more than one sign (except for a possible sign at the start)\r\n  const signs = ['+', '-', '*', '/'];\r\n  try {\r\n    const numSigns = submittedAnswer\r\n      .slice(1)\r\n      .split('')\r\n      .filter((e) => signs.includes(e)).length;\r\n    return numSigns > 1 ? false : nerd(submittedAnswer, answerMath);\r\n  } catch (e) {\r\n    console.log(e);\r\n    return nerd(submittedAnswer, answerMath);\r\n  }\r\n};\r\n\r\nexport const nerdTwoVars = (submittedAnswer, answerMath) => {\r\n  // no more than two signs (except for a possible sign at the start)\r\n  const signs = ['+', '-', '*', '/'];\r\n  try {\r\n    const numSigns = submittedAnswer\r\n      .slice(1)\r\n      .split('')\r\n      .filter((e) => signs.includes(e)).length;\r\n    return numSigns > 2 ? false : nerd(submittedAnswer, answerMath);\r\n  } catch (e) {\r\n    console.log(e);\r\n    return nerd(submittedAnswer, answerMath);\r\n  }\r\n};\r\n"],"sourceRoot":""}